
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800634c  0800634c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006354  08006354  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800635c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000074  080063d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080063d0  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cee  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b58  00000000  00000000  00034d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  000378f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001937b  00000000  00000000  00039dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143da  00000000  00000000  0005313b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099124  00000000  00000000  00067515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  0010068c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005930 	.word	0x08005930

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005930 	.word	0x08005930

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8000582:	f000 faa9 	bl	8000ad8 <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 8000586:	f000 fabf 	bl	8000b08 <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 faeb 	bl	8000b68 <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8000592:	f000 faad 	bl	8000af0 <SSD1322_HW_drive_CS_high>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	4603      	mov	r3, r0
 80005a6:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 80005a8:	f000 fa96 	bl	8000ad8 <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 80005ac:	f000 fab8 	bl	8000b20 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fad8 	bl	8000b68 <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 80005b8:	f000 fa9a 	bl	8000af0 <SSD1322_HW_drive_CS_high>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 80005c8:	f000 fab6 	bl	8000b38 <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 faef 	bl	8000bb0 <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 80005d2:	f000 fabd 	bl	8000b50 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 80005d6:	2032      	movs	r0, #50	; 0x32
 80005d8:	f000 faea 	bl	8000bb0 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 80005dc:	20fd      	movs	r0, #253	; 0xfd
 80005de:	f7ff ffcb 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 80005e2:	2012      	movs	r0, #18
 80005e4:	f7ff ffdb 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 80005e8:	20ae      	movs	r0, #174	; 0xae
 80005ea:	f7ff ffc5 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 80005ee:	20b3      	movs	r0, #179	; 0xb3
 80005f0:	f7ff ffc2 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 80005f4:	2091      	movs	r0, #145	; 0x91
 80005f6:	f7ff ffd2 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 80005fa:	20ca      	movs	r0, #202	; 0xca
 80005fc:	f7ff ffbc 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 8000600:	203f      	movs	r0, #63	; 0x3f
 8000602:	f7ff ffcc 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 8000606:	20a2      	movs	r0, #162	; 0xa2
 8000608:	f7ff ffb6 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffc6 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 8000612:	20a1      	movs	r0, #161	; 0xa1
 8000614:	f7ff ffb0 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffc0 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 800061e:	20a0      	movs	r0, #160	; 0xa0
 8000620:	f7ff ffaa 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 8000624:	2014      	movs	r0, #20
 8000626:	f7ff ffba 	bl	800059e <SSD1322_API_data>
	SSD1322_API_data(0x11);
 800062a:	2011      	movs	r0, #17
 800062c:	f7ff ffb7 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 8000630:	20b5      	movs	r0, #181	; 0xb5
 8000632:	f7ff ffa1 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffb1 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 800063c:	20ab      	movs	r0, #171	; 0xab
 800063e:	f7ff ff9b 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff ffab 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 8000648:	20b4      	movs	r0, #180	; 0xb4
 800064a:	f7ff ff95 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 800064e:	20a0      	movs	r0, #160	; 0xa0
 8000650:	f7ff ffa5 	bl	800059e <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 8000654:	20fd      	movs	r0, #253	; 0xfd
 8000656:	f7ff ffa2 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 800065a:	20c1      	movs	r0, #193	; 0xc1
 800065c:	f7ff ff8c 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	f7ff ff9c 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 8000666:	20c7      	movs	r0, #199	; 0xc7
 8000668:	f7ff ff86 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 800066c:	200f      	movs	r0, #15
 800066e:	f7ff ff96 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 8000672:	20b9      	movs	r0, #185	; 0xb9
 8000674:	f7ff ff80 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 8000678:	20b1      	movs	r0, #177	; 0xb1
 800067a:	f7ff ff7d 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 800067e:	20e2      	movs	r0, #226	; 0xe2
 8000680:	f7ff ff8d 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 8000684:	20d1      	movs	r0, #209	; 0xd1
 8000686:	f7ff ff77 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 800068a:	2082      	movs	r0, #130	; 0x82
 800068c:	f7ff ff87 	bl	800059e <SSD1322_API_data>
	SSD1322_API_data(0x20);
 8000690:	2020      	movs	r0, #32
 8000692:	f7ff ff84 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 8000696:	20bb      	movs	r0, #187	; 0xbb
 8000698:	f7ff ff6e 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 800069c:	201f      	movs	r0, #31
 800069e:	f7ff ff7e 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 80006a2:	20b6      	movs	r0, #182	; 0xb6
 80006a4:	f7ff ff68 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff78 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 80006ae:	20be      	movs	r0, #190	; 0xbe
 80006b0:	f7ff ff62 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f7ff ff72 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 80006ba:	20a6      	movs	r0, #166	; 0xa6
 80006bc:	f7ff ff5c 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 80006c0:	20a9      	movs	r0, #169	; 0xa9
 80006c2:	f7ff ff59 	bl	8000578 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fa72 	bl	8000bb0 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 80006cc:	20af      	movs	r0, #175	; 0xaf
 80006ce:	f7ff ff53 	bl	8000578 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 80006d2:	2032      	movs	r0, #50	; 0x32
 80006d4:	f000 fa6c 	bl	8000bb0 <SSD1322_HW_msDelay>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4604      	mov	r4, r0
 80006e4:	4608      	mov	r0, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	461a      	mov	r2, r3
 80006ea:	4623      	mov	r3, r4
 80006ec:	71fb      	strb	r3, [r7, #7]
 80006ee:	4603      	mov	r3, r0
 80006f0:	71bb      	strb	r3, [r7, #6]
 80006f2:	460b      	mov	r3, r1
 80006f4:	717b      	strb	r3, [r7, #5]
 80006f6:	4613      	mov	r3, r2
 80006f8:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 80006fa:	2015      	movs	r0, #21
 80006fc:	f7ff ff3c 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(28+start_column);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	331c      	adds	r3, #28
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff49 	bl	800059e <SSD1322_API_data>
	SSD1322_API_data(28+end_column);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	331c      	adds	r3, #28
 8000710:	b2db      	uxtb	r3, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff43 	bl	800059e <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8000718:	2075      	movs	r0, #117	; 0x75
 800071a:	f7ff ff2d 	bl	8000578 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 800071e:	797b      	ldrb	r3, [r7, #5]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff3c 	bl	800059e <SSD1322_API_data>
	SSD1322_API_data(end_row);
 8000726:	793b      	ldrb	r3, [r7, #4]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff38 	bl	800059e <SSD1322_API_data>
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}

08000736 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8000740:	205c      	movs	r0, #92	; 0x5c
 8000742:	f7ff ff19 	bl	8000578 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 8000746:	f000 f9c7 	bl	8000ad8 <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800074a:	f000 f9e9 	bl	8000b20 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fa1b 	bl	8000b8c <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 8000756:	f000 f9cb 	bl	8000af0 <SSD1322_HW_drive_CS_high>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <set_buffer_size>:
 *  		   new y size of a buffer in pixels
 */


void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	460a      	mov	r2, r1
 800076e:	80fb      	strh	r3, [r7, #6]
 8000770:	4613      	mov	r3, r2
 8000772:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <set_buffer_size+0x24>)
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000000 	.word	0x20000000

0800078c <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	b25a      	sxtb	r2, r3
 800079e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <fill_buffer+0x58>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <fill_buffer+0x5c>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	fb03 f302 	mul.w	r3, r3, r2
 80007b6:	0fda      	lsrs	r2, r3, #31
 80007b8:	4413      	add	r3, r2
 80007ba:	105b      	asrs	r3, r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 80007be:	e004      	b.n	80007ca <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	7afa      	ldrb	r2, [r7, #11]
 80007c8:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	60fa      	str	r2, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f5      	bne.n	80007c0 <fill_buffer+0x34>
	}
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000002 	.word	0x20000002

080007ec <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	4608      	mov	r0, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	4603      	mov	r3, r0
 80007fc:	817b      	strh	r3, [r7, #10]
 80007fe:	460b      	mov	r3, r1
 8000800:	813b      	strh	r3, [r7, #8]
 8000802:	4613      	mov	r3, r2
 8000804:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <draw_pixel+0xf0>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	897a      	ldrh	r2, [r7, #10]
 800080c:	429a      	cmp	r2, r3
 800080e:	d25f      	bcs.n	80008d0 <draw_pixel+0xe4>
 8000810:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <draw_pixel+0xf4>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	893a      	ldrh	r2, [r7, #8]
 8000816:	429a      	cmp	r2, r3
 8000818:	d25a      	bcs.n	80008d0 <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 800081a:	893b      	ldrh	r3, [r7, #8]
 800081c:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <draw_pixel+0xf0>)
 800081e:	8812      	ldrh	r2, [r2, #0]
 8000820:	fb02 f203 	mul.w	r2, r2, r3
 8000824:	897b      	ldrh	r3, [r7, #10]
 8000826:	4413      	add	r3, r2
 8000828:	2b00      	cmp	r3, #0
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	bfb8      	it	lt
 8000830:	425b      	neglt	r3, r3
 8000832:	2b01      	cmp	r3, #1
 8000834:	d125      	bne.n	8000882 <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8000836:	893b      	ldrh	r3, [r7, #8]
 8000838:	4a28      	ldr	r2, [pc, #160]	; (80008dc <draw_pixel+0xf0>)
 800083a:	8812      	ldrh	r2, [r2, #0]
 800083c:	fb02 f203 	mul.w	r2, r2, r3
 8000840:	897b      	ldrh	r3, [r7, #10]
 8000842:	4413      	add	r3, r2
 8000844:	0fda      	lsrs	r2, r3, #31
 8000846:	4413      	add	r3, r2
 8000848:	105b      	asrs	r3, r3, #1
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f023 030f 	bic.w	r3, r3, #15
 8000858:	b25a      	sxtb	r2, r3
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	4313      	orrs	r3, r2
 8000860:	b259      	sxtb	r1, r3
 8000862:	893b      	ldrh	r3, [r7, #8]
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <draw_pixel+0xf0>)
 8000866:	8812      	ldrh	r2, [r2, #0]
 8000868:	fb02 f203 	mul.w	r2, r2, r3
 800086c:	897b      	ldrh	r3, [r7, #10]
 800086e:	4413      	add	r3, r2
 8000870:	0fda      	lsrs	r2, r3, #31
 8000872:	4413      	add	r3, r2
 8000874:	105b      	asrs	r3, r3, #1
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	b2ca      	uxtb	r2, r1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e027      	b.n	80008d2 <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 8000882:	893b      	ldrh	r3, [r7, #8]
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <draw_pixel+0xf0>)
 8000886:	8812      	ldrh	r2, [r2, #0]
 8000888:	fb02 f203 	mul.w	r2, r2, r3
 800088c:	897b      	ldrh	r3, [r7, #10]
 800088e:	4413      	add	r3, r2
 8000890:	0fda      	lsrs	r2, r3, #31
 8000892:	4413      	add	r3, r2
 8000894:	105b      	asrs	r3, r3, #1
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	f003 030f 	and.w	r3, r3, #15
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b259      	sxtb	r1, r3
 80008b0:	893b      	ldrh	r3, [r7, #8]
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <draw_pixel+0xf0>)
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	fb02 f203 	mul.w	r2, r2, r3
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	4413      	add	r3, r2
 80008be:	0fda      	lsrs	r2, r3, #31
 80008c0:	4413      	add	r3, r2
 80008c2:	105b      	asrs	r3, r3, #1
 80008c4:	461a      	mov	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	b2ca      	uxtb	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e000      	b.n	80008d2 <draw_pixel+0xe6>
		return;
 80008d0:	bf00      	nop
	}
}
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000002 	.word	0x20000002
 80008e0:	20000000 	.word	0x20000000

080008e4 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <select_font+0x1c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000090 	.word	0x20000090

08000904 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4603      	mov	r3, r0
 8000914:	72fb      	strb	r3, [r7, #11]
 8000916:	460b      	mov	r3, r1
 8000918:	813b      	strh	r3, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <draw_char+0x12c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d07f      	beq.n	8000a26 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8000926:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <draw_char+0x12c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	7afa      	ldrb	r2, [r7, #11]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8000934:	4b3e      	ldr	r3, [pc, #248]	; (8000a30 <draw_char+0x12c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4413      	add	r3, r2
 8000940:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8000942:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <draw_char+0x12c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	795b      	ldrb	r3, [r3, #5]
 8000960:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000986:	e048      	b.n	8000a1a <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800098e:	e03a      	b.n	8000a06 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8000990:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d108      	bne.n	80009b4 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80009a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	84fa      	strh	r2, [r7, #38]	; 0x26
 80009a8:	461a      	mov	r2, r3
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 80009b4:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	da1a      	bge.n	80009f2 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 80009bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	893b      	ldrh	r3, [r7, #8]
 80009c4:	4413      	add	r3, r2
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4413      	add	r3, r2
 80009d0:	b299      	uxth	r1, r3
 80009d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4413      	add	r3, r2
 80009dc:	b29a      	uxth	r2, r3
 80009de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fefd 	bl	80007ec <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 80009f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80009fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a00:	3301      	adds	r3, #1
 8000a02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000a06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3bf      	bcc.n	8000990 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 8000a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a1e:	7dbb      	ldrb	r3, [r7, #22]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3b1      	bcc.n	8000988 <draw_char+0x84>
 8000a24:	e000      	b.n	8000a28 <draw_char+0x124>
		return;
 8000a26:	bf00      	nop
		}
	}
}
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000090 	.word	0x20000090

08000a34 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	460b      	mov	r3, r1
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4613      	mov	r3, r2
 8000a48:	80bb      	strh	r3, [r7, #4]
    while (*text)
 8000a4a:	e01b      	b.n	8000a84 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	88b8      	ldrh	r0, [r7, #4]
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	7e3b      	ldrb	r3, [r7, #24]
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff ff52 	bl	8000904 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <draw_text+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a6e:	3b20      	subs	r3, #32
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4413      	add	r3, r2
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
        text++;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
    while (*text)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1df      	bne.n	8000a4c <draw_text+0x18>
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000090 	.word	0x20000090

08000a9c <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 127);
 8000aac:	237f      	movs	r3, #127	; 0x7f
 8000aae:	2200      	movs	r2, #0
 8000ab0:	213f      	movs	r1, #63	; 0x3f
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff fe12 	bl	80006dc <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8000ab8:	883b      	ldrh	r3, [r7, #0]
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	461a      	mov	r2, r3
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fe33 	bl	8000736 <SSD1322_API_send_buffer>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	4802      	ldr	r0, [pc, #8]	; (8000aec <SSD1322_HW_drive_CS_low+0x14>)
 8000ae4:	f001 fa3a 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);


}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020400 	.word	0x40020400

08000af0 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <SSD1322_HW_drive_CS_high+0x14>)
 8000afc:	f001 fa2e 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40020400 	.word	0x40020400

08000b08 <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <SSD1322_HW_drive_DC_low+0x14>)
 8000b14:	f001 fa22 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020400 	.word	0x40020400

08000b20 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 1);
 8000b24:	2201      	movs	r2, #1
 8000b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <SSD1322_HW_drive_DC_high+0x14>)
 8000b2c:	f001 fa16 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020400 	.word	0x40020400

08000b38 <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b42:	4802      	ldr	r0, [pc, #8]	; (8000b4c <SSD1322_HW_drive_RESET_low+0x14>)
 8000b44:	f001 fa0a 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020400 	.word	0x40020400

08000b50 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4802      	ldr	r0, [pc, #8]	; (8000b64 <SSD1322_HW_drive_RESET_high+0x14>)
 8000b5c:	f001 f9fe 	bl	8001f5c <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40020400 	.word	0x40020400

08000b68 <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte_to_transmit, 1, 10);
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	230a      	movs	r3, #10
 8000b76:	2201      	movs	r2, #1
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <SSD1322_HW_SPI_send_byte+0x20>)
 8000b7a:	f002 fc13 	bl	80033a4 <HAL_SPI_Transmit>

	//HAL_SPI_Transmit(&hspi5, &byte_to_transmit, 1, 10);
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000f4 	.word	0x200000f4

08000b8c <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, array_to_transmit, array_size, 100);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <SSD1322_HW_SPI_send_array+0x20>)
 8000ba0:	f002 fc00 	bl	80033a4 <HAL_SPI_Transmit>

	//HAL_SPI_Transmit(&hspi5, array_to_transmit, array_size, 100);
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000f4 	.word	0x200000f4

08000bb0 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8000bb8:	20c8      	movs	r0, #200	; 0xc8
 8000bba:	f000 fefd 	bl	80019b8 <HAL_Delay>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af02      	add	r7, sp, #8
int main(void)
 8000bd2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000bd6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000bda:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bde:	f102 0218 	add.w	r2, r2, #24
 8000be2:	6013      	str	r3, [r2, #0]
	uint32_t count;
	int count1;
	char time[10];
	char date[10];

	uint8_t alarm =0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bea:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8000bee:	7013      	strb	r3, [r2, #0]
	uint8_t number;

	unsigned char mhour,mmin,msec;
	unsigned char mdate,mmonth,myear;

	unsigned char key = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bf6:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8000bfa:	7013      	strb	r3, [r2, #0]
	unsigned char val;

	unsigned int tim_buff;
	unsigned char int_count = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c02:	f102 0221 	add.w	r2, r2, #33	; 0x21
 8000c06:	7013      	strb	r3, [r2, #0]
	unsigned char scan_code[]={0x09,0x04};
 8000c08:	f240 4309 	movw	r3, #1033	; 0x409
 8000c0c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000c10:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000c14:	8013      	strh	r3, [r2, #0]
	unsigned char byte_rec = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c1c:	f102 0220 	add.w	r2, r2, #32
 8000c20:	7013      	strb	r3, [r2, #0]
	unsigned char data_b = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c28:	f102 021f 	add.w	r2, r2, #31
 8000c2c:	7013      	strb	r3, [r2, #0]
	unsigned char even_b = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c34:	f102 021e 	add.w	r2, r2, #30
 8000c38:	7013      	strb	r3, [r2, #0]
	unsigned char ir_code = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000c40:	f102 021d 	add.w	r2, r2, #29
 8000c44:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f000 fe45 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 f8f1 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 fae3 	bl	8001218 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000c52:	f000 fa2d 	bl	80010b0 <MX_SPI5_Init>
  MX_SPI2_Init();
 8000c56:	f000 f9f5 	bl	8001044 <MX_SPI2_Init>
  MX_RTC_Init();
 8000c5a:	f000 f999 	bl	8000f90 <MX_RTC_Init>
  MX_TIM4_Init();
 8000c5e:	f000 fa5d 	bl	800111c <MX_TIM4_Init>
  MX_I2C3_Init();
 8000c62:	f000 f967 	bl	8000f34 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000c66:	f000 faad 	bl	80011c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c6a:	213c      	movs	r1, #60	; 0x3c
 8000c6c:	4846      	ldr	r0, [pc, #280]	; (8000d88 <main+0x1c0>)
 8000c6e:	f002 fe0b 	bl	8003888 <HAL_TIM_Encoder_Start>
  /*==================================== DEMO CODE START ============================================*/

  	// Declare bytes array for a frame buffer.
  	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
  	uint8_t tx_buf[256 * 64 / 2];
  	uint8_t MSG[50] = {'\0'};
 8000c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c76:	3b24      	subs	r3, #36	; 0x24
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	222e      	movs	r2, #46	; 0x2e
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fcae 	bl	80045e4 <memset>
  	//Call initialization seqence for SSD1322
  	SSD1322_API_init();
 8000c88:	f7ff fc9c 	bl	80005c4 <SSD1322_API_init>
  	printf("hello\n");
 8000c8c:	483f      	ldr	r0, [pc, #252]	; (8000d8c <main+0x1c4>)
 8000c8e:	f003 fd37 	bl	8004700 <puts>


  	while (1)
  	{

  		printf("count1  = %d. \n",count1);
 8000c92:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c96:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	483c      	ldr	r0, [pc, #240]	; (8000d90 <main+0x1c8>)
 8000c9e:	f003 fca9 	bl	80045f4 <iprintf>
  		count1++;
 8000ca2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000ca6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000cb2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000cb6:	6013      	str	r3, [r2, #0]

  		get_time();
 8000cb8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cbc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cc0:	469c      	mov	ip, r3
 8000cc2:	f000 f871 	bl	8000da8 <get_time.10002>

  		set_buffer_size(256, 64);
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ccc:	f7ff fd4a 	bl	8000764 <set_buffer_size>
  		fill_buffer(tx_buf, 0);
 8000cd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd57 	bl	800078c <fill_buffer>
  		select_font(&FreeMono12pt7b);
 8000cde:	482d      	ldr	r0, [pc, #180]	; (8000d94 <main+0x1cc>)
 8000ce0:	f7ff fe00 	bl	80008e4 <select_font>



  		    	if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11))
 8000ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce8:	482b      	ldr	r0, [pc, #172]	; (8000d98 <main+0x1d0>)
 8000cea:	f001 f91f 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d01e      	beq.n	8000d32 <main+0x16a>
  		        {
  		    	    sprintf(tx_buf, "Encoder Switch Released, Encoder Ticks = %d\n\r", ((TIM4->CNT)>>2));
 8000cf4:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <main+0x1d4>)
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf8:	089a      	lsrs	r2, r3, #2
 8000cfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	4927      	ldr	r1, [pc, #156]	; (8000da0 <main+0x1d8>)
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fd04 	bl	8004710 <siprintf>
  		    	    //HAL_UART_Transmit(&huart4, MSG, sizeof(MSG), 100);
  		    	    draw_text(tx_buf, tx_buf, 10, 20, 15);
 8000d08:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000d0c:	3930      	subs	r1, #48	; 0x30
 8000d0e:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000d12:	3830      	subs	r0, #48	; 0x30
 8000d14:	230f      	movs	r3, #15
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2314      	movs	r3, #20
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	f7ff fe8a 	bl	8000a34 <draw_text>
  		    	    send_buffer_to_OLED(tx_buf, 0, 0);
 8000d20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d24:	3b30      	subs	r3, #48	; 0x30
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff feb6 	bl	8000a9c <send_buffer_to_OLED>
 8000d30:	e01d      	b.n	8000d6e <main+0x1a6>
  		        }
  		    	else
  		    	{
  		    	    sprintf(tx_buf, "Encoder Switch Pressed,  Encoder Ticks = %d\n\r", ((TIM4->CNT)>>2));
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <main+0x1d4>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	089a      	lsrs	r2, r3, #2
 8000d38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d3c:	3b30      	subs	r3, #48	; 0x30
 8000d3e:	4919      	ldr	r1, [pc, #100]	; (8000da4 <main+0x1dc>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 fce5 	bl	8004710 <siprintf>
  		    	    //HAL_UART_Transmit(&huart4, MSG, sizeof(MSG), 100);
  		    	    draw_text(tx_buf, tx_buf, 10, 20, 15);
 8000d46:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000d4a:	3930      	subs	r1, #48	; 0x30
 8000d4c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000d50:	3830      	subs	r0, #48	; 0x30
 8000d52:	230f      	movs	r3, #15
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2314      	movs	r3, #20
 8000d58:	220a      	movs	r2, #10
 8000d5a:	f7ff fe6b 	bl	8000a34 <draw_text>
  		    	    send_buffer_to_OLED(tx_buf, 0, 0);
 8000d5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d62:	3b30      	subs	r3, #48	; 0x30
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe97 	bl	8000a9c <send_buffer_to_OLED>
  		    	}
  		    	HAL_Delay(1000);
 8000d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d72:	f000 fe21 	bl	80019b8 <HAL_Delay>

  		get_time();
 8000d76:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d7a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000d7e:	469c      	mov	ip, r3
 8000d80:	f000 f812 	bl	8000da8 <get_time.10002>
  		printf("count1  = %d. \n",count1);
 8000d84:	e785      	b.n	8000c92 <main+0xca>
 8000d86:	bf00      	nop
 8000d88:	200001a4 	.word	0x200001a4
 8000d8c:	08005948 	.word	0x08005948
 8000d90:	08005950 	.word	0x08005950
 8000d94:	0800628c 	.word	0x0800628c
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40000800 	.word	0x40000800
 8000da0:	08005960 	.word	0x08005960
 8000da4:	08005990 	.word	0x08005990

08000da8 <get_time.10002>:
  {
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b08b      	sub	sp, #44	; 0x2c
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4664      	mov	r4, ip
 8000db0:	f8c7 c004 	str.w	ip, [r7, #4]
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4819      	ldr	r0, [pc, #100]	; (8000e24 <get_time.10002+0x7c>)
 8000dbe:	f002 f8a9 	bl	8002f14 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4816      	ldr	r0, [pc, #88]	; (8000e24 <get_time.10002+0x7c>)
 8000dcc:	f002 f9a7 	bl	800311e <HAL_RTC_GetDate>
    mhour = gTime.Hours;
 8000dd0:	7a3b      	ldrb	r3, [r7, #8]
 8000dd2:	7663      	strb	r3, [r4, #25]
    mmin = gTime.Minutes;
 8000dd4:	7a7b      	ldrb	r3, [r7, #9]
 8000dd6:	7623      	strb	r3, [r4, #24]
    msec = gTime.Seconds;
 8000dd8:	7abb      	ldrb	r3, [r7, #10]
 8000dda:	75e3      	strb	r3, [r4, #23]
    mdate = gDate.Date;
 8000ddc:	7fbb      	ldrb	r3, [r7, #30]
 8000dde:	75a3      	strb	r3, [r4, #22]
    mmonth = gDate.Month;
 8000de0:	7f7b      	ldrb	r3, [r7, #29]
 8000de2:	7563      	strb	r3, [r4, #21]
    myear = gDate.Year;
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
 8000de6:	7523      	strb	r3, [r4, #20]
    sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000de8:	f104 000a 	add.w	r0, r4, #10
 8000dec:	7a3b      	ldrb	r3, [r7, #8]
 8000dee:	461a      	mov	r2, r3
 8000df0:	7a7b      	ldrb	r3, [r7, #9]
 8000df2:	4619      	mov	r1, r3
 8000df4:	7abb      	ldrb	r3, [r7, #10]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	490b      	ldr	r1, [pc, #44]	; (8000e28 <get_time.10002+0x80>)
 8000dfc:	f003 fc88 	bl	8004710 <siprintf>
    sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000e00:	4620      	mov	r0, r4
 8000e02:	7fbb      	ldrb	r3, [r7, #30]
 8000e04:	461a      	mov	r2, r3
 8000e06:	7f7b      	ldrb	r3, [r7, #29]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	7ffb      	ldrb	r3, [r7, #31]
 8000e0c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	460b      	mov	r3, r1
 8000e14:	4905      	ldr	r1, [pc, #20]	; (8000e2c <get_time.10002+0x84>)
 8000e16:	f003 fc7b 	bl	8004710 <siprintf>
  }
 8000e1a:	bf00      	nop
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000224 	.word	0x20000224
 8000e28:	080059c0 	.word	0x080059c0
 8000e2c:	080059d0 	.word	0x080059d0

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09a      	sub	sp, #104	; 0x68
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e3a:	2230      	movs	r2, #48	; 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fbd0 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <SystemClock_Config+0xfc>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <SystemClock_Config+0xfc>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <SystemClock_Config+0xfc>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <SystemClock_Config+0x100>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a29      	ldr	r2, [pc, #164]	; (8000f30 <SystemClock_Config+0x100>)
 8000e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <SystemClock_Config+0x100>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000eb6:	2319      	movs	r3, #25
 8000eb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000eba:	2390      	movs	r3, #144	; 0x90
 8000ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 f9a4 	bl	8002218 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ed6:	f000 fa13 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fbfe 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000f02:	f000 f9fd 	bl	8001300 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f06:	2302      	movs	r3, #2
 8000f08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fdbf 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f20:	f000 f9ee 	bl	8001300 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3768      	adds	r7, #104	; 0x68
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_I2C3_Init+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_I2C3_Init+0x58>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f56:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_I2C3_Init+0x50>)
 8000f72:	f001 f80d 	bl	8001f90 <HAL_I2C_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f7c:	f000 f9c0 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000a0 	.word	0x200000a0
 8000f88:	40005c00 	.word	0x40005c00
 8000f8c:	000186a0 	.word	0x000186a0

08000f90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <MX_RTC_Init+0xac>)
 8000faa:	4a25      	ldr	r2, [pc, #148]	; (8001040 <MX_RTC_Init+0xb0>)
 8000fac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_RTC_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_RTC_Init+0xac>)
 8000fb6:	227f      	movs	r2, #127	; 0x7f
 8000fb8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_RTC_Init+0xac>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_RTC_Init+0xac>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_RTC_Init+0xac>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_RTC_Init+0xac>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <MX_RTC_Init+0xac>)
 8000fd4:	f001 fe50 	bl	8002c78 <HAL_RTC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000fde:	f000 f98f 	bl	8001300 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 8000fe2:	2319      	movs	r3, #25
 8000fe4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_RTC_Init+0xac>)
 8000ffe:	f001 fecc 	bl	8002d9a <HAL_RTC_SetTime>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 f97a 	bl	8001300 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800100c:	2301      	movs	r3, #1
 800100e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001010:	2301      	movs	r3, #1
 8001012:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 8001014:	2324      	movs	r3, #36	; 0x24
 8001016:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8001018:	2315      	movs	r3, #21
 800101a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_RTC_Init+0xac>)
 8001024:	f001 ffd4 	bl	8002fd0 <HAL_RTC_SetDate>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800102e:	f000 f967 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000224 	.word	0x20000224
 8001040:	40002800 	.word	0x40002800

08001044 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI2_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI2_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI2_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001064:	2202      	movs	r2, #2
 8001066:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI2_Init+0x64>)
 800106a:	2201      	movs	r2, #1
 800106c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001078:	2218      	movs	r2, #24
 800107a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI2_Init+0x64>)
 8001096:	f002 f921 	bl	80032dc <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 f92e 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000f4 	.word	0x200000f4
 80010ac:	40003800 	.word	0x40003800

080010b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI5_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_SPI5_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI5_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI5_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_SPI5_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI5_Init+0x64>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI5_Init+0x64>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI5_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI5_Init+0x64>)
 80010e4:	2218      	movs	r2, #24
 80010e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_SPI5_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI5_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_SPI5_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI5_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_SPI5_Init+0x64>)
 8001102:	f002 f8eb 	bl	80032dc <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 f8f8 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000014c 	.word	0x2000014c
 8001118:	40015000 	.word	0x40015000

0800111c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 fa5a 	bl	80045e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MX_TIM4_Init+0xa0>)
 800113a:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800113c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM4_Init+0xa0>)
 800114c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001150:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM4_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_TIM4_Init+0xa0>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115e:	2303      	movs	r3, #3
 8001160:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800116e:	230a      	movs	r3, #10
 8001170:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4619      	mov	r1, r3
 8001188:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_TIM4_Init+0xa0>)
 800118a:	f002 faeb 	bl	8003764 <HAL_TIM_Encoder_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 f8b4 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_TIM4_Init+0xa0>)
 80011a6:	f002 fd87 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011b0:	f000 f8a6 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	; 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200001a4 	.word	0x200001a4
 80011c0:	40000800 	.word	0x40000800

080011c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART1_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART1_UART_Init+0x4c>)
 80011fc:	f002 fdde 	bl	8003dbc <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 f87b 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001e4 	.word	0x200001e4
 8001214:	40011000 	.word	0x40011000

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_GPIO_Init+0xdc>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_GPIO_Init+0xdc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_GPIO_Init+0xdc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	21e2      	movs	r1, #226	; 0xe2
 8001286:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_GPIO_Init+0xe0>)
 8001288:	f000 fe68 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <MX_GPIO_Init+0xe4>)
 8001294:	f000 fe62 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_CS_Pin SPI5_DC_Pin SPI5_RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin;
 8001298:	23e2      	movs	r3, #226	; 0xe2
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MX_GPIO_Init+0xe0>)
 80012b0:	f000 fcb8 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_RESET_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin;
 80012b4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xe4>)
 80012ce:	f000 fca9 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_GPIO_Init+0xe0>)
 80012e8:	f000 fc9c 	bl	8001c24 <HAL_GPIO_Init>

}
 80012ec:	bf00      	nop
 80012ee:	3720      	adds	r7, #32
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_I2C_MspInit+0xc0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d14a      	bne.n	8001414 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b27      	ldr	r3, [pc, #156]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013c8:	2304      	movs	r3, #4
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 80013d4:	f000 fc26 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d8:	2310      	movs	r3, #16
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013dc:	2312      	movs	r3, #18
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80013e8:	2309      	movs	r3, #9
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <HAL_I2C_MspInit+0xcc>)
 80013f4:	f000 fc16 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 8001402:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40005c00 	.word	0x40005c00
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400

0800142c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_RTC_MspInit+0x24>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d102      	bne.n	8001444 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RTC_MspInit+0x28>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40002800 	.word	0x40002800
 8001454:	42470e3c 	.word	0x42470e3c

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_SPI_MspInit+0x10c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12d      	bne.n	80014d6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_SPI_MspInit+0x110>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a39      	ldr	r2, [pc, #228]	; (8001568 <HAL_SPI_MspInit+0x110>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_SPI_MspInit+0x110>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_SPI_MspInit+0x110>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80014b2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c4:	2305      	movs	r3, #5
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4827      	ldr	r0, [pc, #156]	; (800156c <HAL_SPI_MspInit+0x114>)
 80014d0:	f000 fba8 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80014d4:	e041      	b.n	800155a <HAL_SPI_MspInit+0x102>
  else if(hspi->Instance==SPI5)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_SPI_MspInit+0x118>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13c      	bne.n	800155a <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ee:	6453      	str	r3, [r2, #68]	; 0x44
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_SPI_MspInit+0x110>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_SPI_MspInit+0x110>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_SPI_MspInit+0x110>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8001528:	2306      	movs	r3, #6
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <HAL_SPI_MspInit+0x114>)
 8001534:	f000 fb76 	bl	8001c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001546:	2301      	movs	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800154a:	2306      	movs	r3, #6
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_SPI_MspInit+0x114>)
 8001556:	f000 fb65 	bl	8001c24 <HAL_GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40003800 	.word	0x40003800
 8001568:	40023800 	.word	0x40023800
 800156c:	40020400 	.word	0x40020400
 8001570:	40015000 	.word	0x40015000

08001574 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_TIM_Encoder_MspInit+0x94>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d133      	bne.n	80015fe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a14      	ldr	r2, [pc, #80]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_TIM_Encoder_MspInit+0x98>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_TIM_Encoder_MspInit+0x9c>)
 80015ea:	f000 fb1b 	bl	8001c24 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	201e      	movs	r0, #30
 80015f4:	f000 fadf 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015f8:	201e      	movs	r0, #30
 80015fa:	f000 faf8 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40000800 	.word	0x40000800
 800160c:	40023800 	.word	0x40023800
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_UART_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12c      	bne.n	8001690 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_MspInit+0x88>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_UART_MspInit+0x88>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x88>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_UART_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800166e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001680:	2307      	movs	r3, #7
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <HAL_UART_MspInit+0x8c>)
 800168c:	f000 faca 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40011000 	.word	0x40011000
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 f942 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM4_IRQHandler+0x10>)
 80016fe:	f002 f8fb 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001a4 	.word	0x200001a4

0800170c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e00a      	b.n	8001734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800171e:	f3af 8000 	nop.w
 8001722:	4601      	mov	r1, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf0      	blt.n	800171e <_read+0x12>
	}

return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e009      	b.n	800176c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf1      	blt.n	8001758 <_write+0x12>
	}
	return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_close>:

int _close(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a6:	605a      	str	r2, [r3, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f002 feba 	bl	8004590 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20020000 	.word	0x20020000
 8001848:	00000400 	.word	0x00000400
 800184c:	20000094 	.word	0x20000094
 8001850:	20000258 	.word	0x20000258

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <SystemInit+0x28>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <SystemInit+0x28>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <SystemInit+0x28>)
 800186a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800186e:	609a      	str	r2, [r3, #8]
#endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001886:	e003      	b.n	8001890 <LoopCopyDataInit>

08001888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800188a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800188c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800188e:	3104      	adds	r1, #4

08001890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001898:	d3f6      	bcc.n	8001888 <CopyDataInit>
  ldr  r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800189c:	e002      	b.n	80018a4 <LoopFillZerobss>

0800189e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800189e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018a0:	f842 3b04 	str.w	r3, [r2], #4

080018a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018a8:	d3f9      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018aa:	f7ff ffd3 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f002 fe75 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff f989 	bl	8000bc8 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018bc:	0800635c 	.word	0x0800635c
  ldr  r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018c4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018c8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80018cc:	20000258 	.word	0x20000258

080018d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_Init+0x40>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_Init+0x40>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x40>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f94f 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fd00 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f967 	bl	8001c0a <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 f92f 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000004 	.word	0x20000004
 8001970:	2000000c 	.word	0x2000000c
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20000244 	.word	0x20000244

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000244 	.word	0x20000244

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000000c 	.word	0x2000000c

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff3e 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff8e 	bl	8001af4 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5d 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff31 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e159      	b.n	8001ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8148 	bne.w	8001eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d00b      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xfc>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a2 	beq.w	8001eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x202>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_GPIO_Init+0x2f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x1fe>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_GPIO_Init+0x2f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x1fa>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_GPIO_Init+0x2fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x1f6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x1f2>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f aea2 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e12b      	b.n	80021fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff f9d0 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff4:	f000 fd28 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_I2C_Init+0x274>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d807      	bhi.n	8002014 <HAL_I2C_Init+0x84>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a80      	ldr	r2, [pc, #512]	; (8002208 <HAL_I2C_Init+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e006      	b.n	8002022 <HAL_I2C_Init+0x92>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a7d      	ldr	r2, [pc, #500]	; (800220c <HAL_I2C_Init+0x27c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	bf94      	ite	ls
 800201c:	2301      	movls	r3, #1
 800201e:	2300      	movhi	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0e7      	b.n	80021fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a78      	ldr	r2, [pc, #480]	; (8002210 <HAL_I2C_Init+0x280>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a6a      	ldr	r2, [pc, #424]	; (8002204 <HAL_I2C_Init+0x274>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d802      	bhi.n	8002064 <HAL_I2C_Init+0xd4>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	e009      	b.n	8002078 <HAL_I2C_Init+0xe8>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	4a69      	ldr	r2, [pc, #420]	; (8002214 <HAL_I2C_Init+0x284>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	3301      	adds	r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800208a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	495c      	ldr	r1, [pc, #368]	; (8002204 <HAL_I2C_Init+0x274>)
 8002094:	428b      	cmp	r3, r1
 8002096:	d819      	bhi.n	80020cc <HAL_I2C_Init+0x13c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020ac:	400b      	ands	r3, r1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_I2C_Init+0x138>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e59      	subs	r1, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	e051      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e04f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_I2C_Init+0x168>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e012      	b.n	800211e <HAL_I2C_Init+0x18e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x196>
 8002122:	2301      	movs	r3, #1
 8002124:	e022      	b.n	800216c <HAL_I2C_Init+0x1dc>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <HAL_I2C_Init+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e58      	subs	r0, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214a:	e00f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800219a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6911      	ldr	r1, [r2, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	000186a0 	.word	0x000186a0
 8002208:	001e847f 	.word	0x001e847f
 800220c:	003d08ff 	.word	0x003d08ff
 8002210:	431bde83 	.word	0x431bde83
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e25b      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d075      	beq.n	8002322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002236:	4ba3      	ldr	r3, [pc, #652]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d00c      	beq.n	800225c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002242:	4ba0      	ldr	r3, [pc, #640]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224a:	2b08      	cmp	r3, #8
 800224c:	d112      	bne.n	8002274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b9d      	ldr	r3, [pc, #628]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b99      	ldr	r3, [pc, #612]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d05b      	beq.n	8002320 <HAL_RCC_OscConfig+0x108>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d157      	bne.n	8002320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e236      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x74>
 800227e:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0xb0>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x98>
 8002296:	4b8b      	ldr	r3, [pc, #556]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a8a      	ldr	r2, [pc, #552]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a87      	ldr	r2, [pc, #540]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0xb0>
 80022b0:	4b84      	ldr	r3, [pc, #528]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a83      	ldr	r2, [pc, #524]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fb66 	bl	80019a0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fb62 	bl	80019a0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1fb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b76      	ldr	r3, [pc, #472]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0xc0>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fb52 	bl	80019a0 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff fb4e 	bl	80019a0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1e7      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0xe8>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d063      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232e:	4b65      	ldr	r3, [pc, #404]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002342:	2b08      	cmp	r3, #8
 8002344:	d11c      	bne.n	8002380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	4b5c      	ldr	r3, [pc, #368]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x152>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1bb      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b56      	ldr	r3, [pc, #344]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4952      	ldr	r1, [pc, #328]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e03a      	b.n	80023f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCC_OscConfig+0x2b0>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7ff fb07 	bl	80019a0 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002396:	f7ff fb03 	bl	80019a0 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e19c      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4940      	ldr	r1, [pc, #256]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x2b0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7ff fae6 	bl	80019a0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d8:	f7ff fae2 	bl	80019a0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e17b      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d030      	beq.n	8002464 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x2b4>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff fac6 	bl	80019a0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff fac2 	bl	80019a0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e15b      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x200>
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x2b4>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff faaf 	bl	80019a0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002446:	f7ff faab 	bl	80019a0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e144      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a0 	beq.w	80025b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_RCC_OscConfig+0x2b8>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff fa71 	bl	80019a0 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e011      	b.n	80024e6 <HAL_RCC_OscConfig+0x2ce>
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	42470000 	.word	0x42470000
 80024cc:	42470e80 	.word	0x42470e80
 80024d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7ff fa64 	bl	80019a0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0fd      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b81      	ldr	r3, [pc, #516]	; (80026ec <HAL_RCC_OscConfig+0x4d4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x2f0>
 80024fa:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a7c      	ldr	r2, [pc, #496]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x32a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x312>
 8002510:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a76      	ldr	r2, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	4b74      	ldr	r3, [pc, #464]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a73      	ldr	r2, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x32a>
 800252a:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a70      	ldr	r2, [pc, #448]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
 8002536:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a6d      	ldr	r2, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7ff fa29 	bl	80019a0 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fa25 	bl	80019a0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0bc      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x33a>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fa13 	bl	80019a0 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fa0f 	bl	80019a0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0a6      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a51      	ldr	r2, [pc, #324]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8092 	beq.w	80026e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d05c      	beq.n	8002682 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d141      	bne.n	8002654 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <HAL_RCC_OscConfig+0x4dc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff f9e3 	bl	80019a0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff f9df 	bl	80019a0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e078      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	019b      	lsls	r3, r3, #6
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4933      	ldr	r1, [pc, #204]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x4dc>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff f9b8 	bl	80019a0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff f9b4 	bl	80019a0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04d      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x41c>
 8002652:	e045      	b.n	80026e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4dc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff f9a1 	bl	80019a0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff f99d 	bl	80019a0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e036      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x44a>
 8002680:	e02e      	b.n	80026e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e029      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_RCC_OscConfig+0x4d8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d11c      	bne.n	80026dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d115      	bne.n	80026dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10d      	bne.n	80026dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40007000 	.word	0x40007000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470060 	.word	0x42470060

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cc      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90c      	bls.n	8002734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e067      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4934      	ldr	r1, [pc, #208]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff f8da 	bl	80019a0 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff f8d6 	bl	80019a0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d20c      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f83a 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	0800629c 	.word	0x0800629c
 80028bc:	20000004 	.word	0x20000004
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ca:	2100      	movs	r1, #0
 80028cc:	6079      	str	r1, [r7, #4]
 80028ce:	2100      	movs	r1, #0
 80028d0:	60f9      	str	r1, [r7, #12]
 80028d2:	2100      	movs	r1, #0
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028d6:	2100      	movs	r1, #0
 80028d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4952      	ldr	r1, [pc, #328]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 80028dc:	6889      	ldr	r1, [r1, #8]
 80028de:	f001 010c 	and.w	r1, r1, #12
 80028e2:	2908      	cmp	r1, #8
 80028e4:	d00d      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x3e>
 80028e6:	2908      	cmp	r1, #8
 80028e8:	f200 8094 	bhi.w	8002a14 <HAL_RCC_GetSysClockFreq+0x150>
 80028ec:	2900      	cmp	r1, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x32>
 80028f0:	2904      	cmp	r1, #4
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x38>
 80028f4:	e08e      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f6:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 80028f8:	60bb      	str	r3, [r7, #8]
       break;
 80028fa:	e08e      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fc:	4b4b      	ldr	r3, [pc, #300]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x168>)
 80028fe:	60bb      	str	r3, [r7, #8]
      break;
 8002900:	e08b      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002902:	4948      	ldr	r1, [pc, #288]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002904:	6849      	ldr	r1, [r1, #4]
 8002906:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800290a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290c:	4945      	ldr	r1, [pc, #276]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800290e:	6849      	ldr	r1, [r1, #4]
 8002910:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002914:	2900      	cmp	r1, #0
 8002916:	d024      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4942      	ldr	r1, [pc, #264]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800291a:	6849      	ldr	r1, [r1, #4]
 800291c:	0989      	lsrs	r1, r1, #6
 800291e:	4608      	mov	r0, r1
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002928:	f04f 0500 	mov.w	r5, #0
 800292c:	ea00 0204 	and.w	r2, r0, r4
 8002930:	ea01 0305 	and.w	r3, r1, r5
 8002934:	493d      	ldr	r1, [pc, #244]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x168>)
 8002936:	fb01 f003 	mul.w	r0, r1, r3
 800293a:	2100      	movs	r1, #0
 800293c:	fb01 f102 	mul.w	r1, r1, r2
 8002940:	1844      	adds	r4, r0, r1
 8002942:	493a      	ldr	r1, [pc, #232]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x168>)
 8002944:	fba2 0101 	umull	r0, r1, r2, r1
 8002948:	1863      	adds	r3, r4, r1
 800294a:	4619      	mov	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f7fd fc94 	bl	8000280 <__aeabi_uldivmod>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4613      	mov	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e04a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	461a      	mov	r2, r3
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	ea02 0400 	and.w	r4, r2, r0
 800297a:	ea03 0501 	and.w	r5, r3, r1
 800297e:	4620      	mov	r0, r4
 8002980:	4629      	mov	r1, r5
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	014b      	lsls	r3, r1, #5
 800298c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002990:	0142      	lsls	r2, r0, #5
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	1b00      	subs	r0, r0, r4
 8002998:	eb61 0105 	sbc.w	r1, r1, r5
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	018b      	lsls	r3, r1, #6
 80029a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029aa:	0182      	lsls	r2, r0, #6
 80029ac:	1a12      	subs	r2, r2, r0
 80029ae:	eb63 0301 	sbc.w	r3, r3, r1
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	00d9      	lsls	r1, r3, #3
 80029bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c0:	00d0      	lsls	r0, r2, #3
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	1912      	adds	r2, r2, r4
 80029c8:	eb45 0303 	adc.w	r3, r5, r3
 80029cc:	f04f 0000 	mov.w	r0, #0
 80029d0:	f04f 0100 	mov.w	r1, #0
 80029d4:	0299      	lsls	r1, r3, #10
 80029d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029da:	0290      	lsls	r0, r2, #10
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f7fd fc48 	bl	8000280 <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4613      	mov	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	60bb      	str	r3, [r7, #8]
      break;
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a16:	60bb      	str	r3, [r7, #8]
      break;
 8002a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bdb0      	pop	{r4, r5, r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	080062ac 	.word	0x080062ac

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	080062ac 	.word	0x080062ac

08002a98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d038      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac6:	f7fe ff6b 	bl	80019a0 <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ace:	f7fe ff67 	bl	80019a0 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0bd      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	019b      	lsls	r3, r3, #6
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	495a      	ldr	r1, [pc, #360]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe ff48 	bl	80019a0 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b14:	f7fe ff44 	bl	80019a0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e09a      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8083 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	4b48      	ldr	r3, [pc, #288]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a47      	ldr	r2, [pc, #284]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b5c:	4b43      	ldr	r3, [pc, #268]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe ff1a 	bl	80019a0 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe ff16 	bl	80019a0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e06c      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b82:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d02f      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d028      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bac:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d114      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fee4 	bl	80019a0 <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fee0 	bl	80019a0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e034      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	4911      	ldr	r1, [pc, #68]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
 8002c26:	e005      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	4909      	ldr	r1, [pc, #36]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7d1a      	ldrb	r2, [r3, #20]
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c58:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	42470068 	.word	0x42470068
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	42470e40 	.word	0x42470e40
 8002c74:	424711e0 	.word	0x424711e0

08002c78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e083      	b.n	8002d92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7f5b      	ldrb	r3, [r3, #29]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fbc6 	bl	800142c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	22ca      	movs	r2, #202	; 0xca
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2253      	movs	r2, #83	; 0x53
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 faa8 	bl	800320c <RTC_EnterInitMode>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e05e      	b.n	8002d92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68d2      	ldr	r2, [r2, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6919      	ldr	r1, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	041a      	lsls	r2, r3, #16
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa3a 	bl	80031bc <HAL_RTC_WaitForSynchro>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e018      	b.n	8002d92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d9a:	b590      	push	{r4, r7, lr}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	7f1b      	ldrb	r3, [r3, #28]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RTC_SetTime+0x1c>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0aa      	b.n	8002f0c <HAL_RTC_SetTime+0x172>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d126      	bne.n	8002e16 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fa3f 	bl	8003264 <RTC_ByteToBcd2>
 8002de6:	4603      	mov	r3, r0
 8002de8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fa38 	bl	8003264 <RTC_ByteToBcd2>
 8002df4:	4603      	mov	r3, r0
 8002df6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002df8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	789b      	ldrb	r3, [r3, #2]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa30 	bl	8003264 <RTC_ByteToBcd2>
 8002e04:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002e06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	78db      	ldrb	r3, [r3, #3]
 8002e0e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	e018      	b.n	8002e48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002e3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	78db      	ldrb	r3, [r3, #3]
 8002e42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	22ca      	movs	r2, #202	; 0xca
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2253      	movs	r2, #83	; 0x53
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f9d7 	bl	800320c <RTC_EnterInitMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00b      	beq.n	8002e7c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e047      	b.n	8002f0c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d111      	bne.n	8002ef6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f972 	bl	80031bc <HAL_RTC_WaitForSynchro>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00a      	b.n	8002f0c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ff      	movs	r2, #255	; 0xff
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11a      	bne.n	8002fc6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f983 	bl	80032a0 <RTC_Bcd2ToByte>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f97a 	bl	80032a0 <RTC_Bcd2ToByte>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f971 	bl	80032a0 <RTC_Bcd2ToByte>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	7f1b      	ldrb	r3, [r3, #28]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_RTC_SetDate+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e094      	b.n	8003116 <HAL_RTC_SetDate+0x146>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10e      	bne.n	800301c <HAL_RTC_SetDate+0x4c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	f023 0310 	bic.w	r3, r3, #16
 8003012:	b2db      	uxtb	r3, r3
 8003014:	330a      	adds	r3, #10
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11c      	bne.n	800305c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	78db      	ldrb	r3, [r3, #3]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f91c 	bl	8003264 <RTC_ByteToBcd2>
 800302c:	4603      	mov	r3, r0
 800302e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 f915 	bl	8003264 <RTC_ByteToBcd2>
 800303a:	4603      	mov	r3, r0
 800303c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800303e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	789b      	ldrb	r3, [r3, #2]
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f90d 	bl	8003264 <RTC_ByteToBcd2>
 800304a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800304c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e00e      	b.n	800307a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	78db      	ldrb	r3, [r3, #3]
 8003060:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003068:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800306e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	22ca      	movs	r2, #202	; 0xca
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2253      	movs	r2, #83	; 0x53
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f8be 	bl	800320c <RTC_EnterInitMode>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	22ff      	movs	r2, #255	; 0xff
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2204      	movs	r2, #4
 80030a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e033      	b.n	8003116 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f86d 	bl	80031bc <HAL_RTC_WaitForSynchro>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2204      	movs	r2, #4
 80030f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e00a      	b.n	8003116 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}

0800311e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800313c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	b2da      	uxtb	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	0b5b      	lsrs	r3, r3, #13
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11a      	bne.n	80031b2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f88d 	bl	80032a0 <RTC_Bcd2ToByte>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f884 	bl	80032a0 <RTC_Bcd2ToByte>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f87b 	bl	80032a0 <RTC_Bcd2ToByte>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fbe2 	bl	80019a0 <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031de:	e009      	b.n	80031f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031e0:	f7fe fbde 	bl	80019a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ee:	d901      	bls.n	80031f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e007      	b.n	8003204 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ee      	beq.n	80031e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f04f 32ff 	mov.w	r2, #4294967295
 800322e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003230:	f7fe fbb6 	bl	80019a0 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003236:	e009      	b.n	800324c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003238:	f7fe fbb2 	bl	80019a0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003246:	d901      	bls.n	800324c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e007      	b.n	800325c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003272:	e005      	b.n	8003280 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	3b0a      	subs	r3, #10
 800327e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2b09      	cmp	r3, #9
 8003284:	d8f6      	bhi.n	8003274 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	b2da      	uxtb	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4313      	orrs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4413      	add	r3, r2
 80032ce:	b2db      	uxtb	r3, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e056      	b.n	800339c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fe f8a5 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f003 0104 	and.w	r1, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800338a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_Transmit+0x22>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e11e      	b.n	8003604 <HAL_SPI_Transmit+0x260>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033ce:	f7fe fae7 	bl	80019a0 <HAL_GetTick>
 80033d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d002      	beq.n	80033ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
 80033e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e8:	e103      	b.n	80035f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x52>
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033fa:	e0fa      	b.n	80035f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2203      	movs	r2, #3
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003442:	d107      	bne.n	8003454 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003452:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d007      	beq.n	8003472 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	d14b      	bne.n	8003514 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0xe6>
 8003484:	8afb      	ldrh	r3, [r7, #22]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d13e      	bne.n	8003508 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034ae:	e02b      	b.n	8003508 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d112      	bne.n	80034e4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80034e2:	e011      	b.n	8003508 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e4:	f7fe fa5c 	bl	80019a0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d803      	bhi.n	80034fc <HAL_SPI_Transmit+0x158>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d102      	bne.n	8003502 <HAL_SPI_Transmit+0x15e>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003506:	e074      	b.n	80035f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ce      	bne.n	80034b0 <HAL_SPI_Transmit+0x10c>
 8003512:	e04c      	b.n	80035ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_SPI_Transmit+0x17e>
 800351c:	8afb      	ldrh	r3, [r7, #22]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d140      	bne.n	80035a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	7812      	ldrb	r2, [r2, #0]
 800352e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003548:	e02c      	b.n	80035a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b02      	cmp	r3, #2
 8003556:	d113      	bne.n	8003580 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	7812      	ldrb	r2, [r2, #0]
 8003564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	86da      	strh	r2, [r3, #54]	; 0x36
 800357e:	e011      	b.n	80035a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003580:	f7fe fa0e 	bl	80019a0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d803      	bhi.n	8003598 <HAL_SPI_Transmit+0x1f4>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d102      	bne.n	800359e <HAL_SPI_Transmit+0x1fa>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035a2:	e026      	b.n	80035f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1cd      	bne.n	800354a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f894 	bl	80036e0 <SPI_EndRxTxTransaction>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e000      	b.n	80035f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80035f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003602:	7ffb      	ldrb	r3, [r7, #31]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361c:	e04c      	b.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d048      	beq.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003626:	f7fe f9bb 	bl	80019a0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d902      	bls.n	800363c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d13d      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800364a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003654:	d111      	bne.n	800367a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	d004      	beq.n	800366a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d107      	bne.n	800367a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	d10f      	bne.n	80036a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e00f      	b.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d1a3      	bne.n	800361e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <SPI_EndRxTxTransaction+0x7c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <SPI_EndRxTxTransaction+0x80>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0d5b      	lsrs	r3, r3, #21
 80036f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370a:	d112      	bne.n	8003732 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff78 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3b01      	subs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d0f2      	beq.n	8003732 <SPI_EndRxTxTransaction+0x52>
 800374c:	e000      	b.n	8003750 <SPI_EndRxTxTransaction+0x70>
        break;
 800374e:	bf00      	nop
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000004 	.word	0x20000004
 8003760:	165e9f81 	.word	0x165e9f81

08003764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e083      	b.n	8003880 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd fef1 	bl	8001574 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a8:	f023 0307 	bic.w	r3, r3, #7
 80037ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f000 f9d7 	bl	8003b6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	4313      	orrs	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003804:	f023 030c 	bic.w	r3, r3, #12
 8003808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	4313      	orrs	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	011a      	lsls	r2, r3, #4
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	4313      	orrs	r3, r2
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4313      	orrs	r3, r2
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_TIM_Encoder_Start+0x18>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d008      	beq.n	80038b0 <HAL_TIM_Encoder_Start+0x28>
 800389e:	e00f      	b.n	80038c0 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f9df 	bl	8003c6c <TIM_CCxChannelCmd>
      break;
 80038ae:	e016      	b.n	80038de <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	2104      	movs	r1, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f9d7 	bl	8003c6c <TIM_CCxChannelCmd>
      break;
 80038be:	e00e      	b.n	80038de <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f9cf 	bl	8003c6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	2104      	movs	r1, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f9c8 	bl	8003c6c <TIM_CCxChannelCmd>
      break;
 80038dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8f8 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8ea 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8fb 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0204 	mvn.w	r2, #4
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8ce 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8c0 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8d1 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0208 	mvn.w	r2, #8
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8a4 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f896 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8a7 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d122      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d11b      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0210 	mvn.w	r2, #16
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2208      	movs	r2, #8
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f87a 	bl	8003b30 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f86c 	bl	8003b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f87d 	bl	8003b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10e      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0201 	mvn.w	r2, #1
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f846 	bl	8003b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f980 	bl	8003da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f842 	bl	8003b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0220 	mvn.w	r2, #32
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f94a 	bl	8003d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <TIM_Base_SetConfig+0xe8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <TIM_Base_SetConfig+0xec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <TIM_Base_SetConfig+0xf0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <TIM_Base_SetConfig+0xe8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <TIM_Base_SetConfig+0xec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <TIM_Base_SetConfig+0xf0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <TIM_Base_SetConfig+0xf4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <TIM_Base_SetConfig+0xf8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <TIM_Base_SetConfig+0xfc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	615a      	str	r2, [r3, #20]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40000c00 	.word	0x40000c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2201      	movs	r2, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e050      	b.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d013      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10c      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40014000 	.word	0x40014000

08003d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e03f      	b.n	8003e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fc16 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f829 	bl	8003e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	b0bd      	sub	sp, #244	; 0xf4
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	68d9      	ldr	r1, [r3, #12]
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	ea40 0301 	orr.w	r3, r0, r1
 8003e80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003eb0:	f021 010c 	bic.w	r1, r1, #12
 8003eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	6999      	ldr	r1, [r3, #24]
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	ea40 0301 	orr.w	r3, r0, r1
 8003ede:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	f040 81a5 	bne.w	8004238 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4bcd      	ldr	r3, [pc, #820]	; (800422c <UART_SetConfig+0x3d4>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d006      	beq.n	8003f08 <UART_SetConfig+0xb0>
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4bcb      	ldr	r3, [pc, #812]	; (8004230 <UART_SetConfig+0x3d8>)
 8003f02:	429a      	cmp	r2, r3
 8003f04:	f040 80cb 	bne.w	800409e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f08:	f7fe fdb2 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8003f0c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f14:	461c      	mov	r4, r3
 8003f16:	f04f 0500 	mov.w	r5, #0
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	1891      	adds	r1, r2, r2
 8003f20:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003f24:	415b      	adcs	r3, r3
 8003f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f2a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f2e:	1912      	adds	r2, r2, r4
 8003f30:	eb45 0303 	adc.w	r3, r5, r3
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	00d9      	lsls	r1, r3, #3
 8003f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f42:	00d0      	lsls	r0, r2, #3
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	1911      	adds	r1, r2, r4
 8003f4a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003f4e:	416b      	adcs	r3, r5
 8003f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	1891      	adds	r1, r2, r2
 8003f62:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003f66:	415b      	adcs	r3, r3
 8003f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f6c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003f70:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003f74:	f7fc f984 	bl	8000280 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4bad      	ldr	r3, [pc, #692]	; (8004234 <UART_SetConfig+0x3dc>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011e      	lsls	r6, r3, #4
 8003f86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	f04f 0500 	mov.w	r5, #0
 8003f90:	4622      	mov	r2, r4
 8003f92:	462b      	mov	r3, r5
 8003f94:	1891      	adds	r1, r2, r2
 8003f96:	67b9      	str	r1, [r7, #120]	; 0x78
 8003f98:	415b      	adcs	r3, r3
 8003f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003fa0:	1912      	adds	r2, r2, r4
 8003fa2:	eb45 0303 	adc.w	r3, r5, r3
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb4:	00d0      	lsls	r0, r2, #3
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	1911      	adds	r1, r2, r4
 8003fbc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003fc0:	416b      	adcs	r3, r5
 8003fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	1891      	adds	r1, r2, r2
 8003fd4:	6739      	str	r1, [r7, #112]	; 0x70
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	677b      	str	r3, [r7, #116]	; 0x74
 8003fda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003fde:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003fe2:	f7fc f94d 	bl	8000280 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4b92      	ldr	r3, [pc, #584]	; (8004234 <UART_SetConfig+0x3dc>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	3332      	adds	r3, #50	; 0x32
 8003ffe:	4a8d      	ldr	r2, [pc, #564]	; (8004234 <UART_SetConfig+0x3dc>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800400c:	441e      	add	r6, r3
 800400e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004012:	4618      	mov	r0, r3
 8004014:	f04f 0100 	mov.w	r1, #0
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	1894      	adds	r4, r2, r2
 800401e:	66bc      	str	r4, [r7, #104]	; 0x68
 8004020:	415b      	adcs	r3, r3
 8004022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004024:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004028:	1812      	adds	r2, r2, r0
 800402a:	eb41 0303 	adc.w	r3, r1, r3
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	f04f 0500 	mov.w	r5, #0
 8004036:	00dd      	lsls	r5, r3, #3
 8004038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800403c:	00d4      	lsls	r4, r2, #3
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	1814      	adds	r4, r2, r0
 8004044:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004048:	414b      	adcs	r3, r1
 800404a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	461a      	mov	r2, r3
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	1891      	adds	r1, r2, r2
 800405c:	6639      	str	r1, [r7, #96]	; 0x60
 800405e:	415b      	adcs	r3, r3
 8004060:	667b      	str	r3, [r7, #100]	; 0x64
 8004062:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004066:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800406a:	f7fc f909 	bl	8000280 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4b70      	ldr	r3, [pc, #448]	; (8004234 <UART_SetConfig+0x3dc>)
 8004074:	fba3 1302 	umull	r1, r3, r3, r2
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	2164      	movs	r1, #100	; 0x64
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3332      	adds	r3, #50	; 0x32
 8004086:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <UART_SetConfig+0x3dc>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	f003 0207 	and.w	r2, r3, #7
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4432      	add	r2, r6
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e26d      	b.n	800457a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409e:	f7fe fcd3 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80040a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040aa:	461c      	mov	r4, r3
 80040ac:	f04f 0500 	mov.w	r5, #0
 80040b0:	4622      	mov	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	1891      	adds	r1, r2, r2
 80040b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040b8:	415b      	adcs	r3, r3
 80040ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040c0:	1912      	adds	r2, r2, r4
 80040c2:	eb45 0303 	adc.w	r3, r5, r3
 80040c6:	f04f 0000 	mov.w	r0, #0
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	00d9      	lsls	r1, r3, #3
 80040d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040d4:	00d0      	lsls	r0, r2, #3
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	1911      	adds	r1, r2, r4
 80040dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80040e0:	416b      	adcs	r3, r5
 80040e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	461a      	mov	r2, r3
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	1891      	adds	r1, r2, r2
 80040f4:	6539      	str	r1, [r7, #80]	; 0x50
 80040f6:	415b      	adcs	r3, r3
 80040f8:	657b      	str	r3, [r7, #84]	; 0x54
 80040fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004102:	f7fc f8bd 	bl	8000280 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <UART_SetConfig+0x3dc>)
 800410c:	fba3 2302 	umull	r2, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	011e      	lsls	r6, r3, #4
 8004114:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004118:	461c      	mov	r4, r3
 800411a:	f04f 0500 	mov.w	r5, #0
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	1891      	adds	r1, r2, r2
 8004124:	64b9      	str	r1, [r7, #72]	; 0x48
 8004126:	415b      	adcs	r3, r3
 8004128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800412e:	1912      	adds	r2, r2, r4
 8004130:	eb45 0303 	adc.w	r3, r5, r3
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	00d9      	lsls	r1, r3, #3
 800413e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004142:	00d0      	lsls	r0, r2, #3
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	1911      	adds	r1, r2, r4
 800414a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800414e:	416b      	adcs	r3, r5
 8004150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	461a      	mov	r2, r3
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	1891      	adds	r1, r2, r2
 8004162:	6439      	str	r1, [r7, #64]	; 0x40
 8004164:	415b      	adcs	r3, r3
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004170:	f7fc f886 	bl	8000280 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <UART_SetConfig+0x3dc>)
 800417a:	fba3 1302 	umull	r1, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2164      	movs	r1, #100	; 0x64
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <UART_SetConfig+0x3dc>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800419a:	441e      	add	r6, r3
 800419c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041a0:	4618      	mov	r0, r3
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	1894      	adds	r4, r2, r2
 80041ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80041ae:	415b      	adcs	r3, r3
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b6:	1812      	adds	r2, r2, r0
 80041b8:	eb41 0303 	adc.w	r3, r1, r3
 80041bc:	f04f 0400 	mov.w	r4, #0
 80041c0:	f04f 0500 	mov.w	r5, #0
 80041c4:	00dd      	lsls	r5, r3, #3
 80041c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041ca:	00d4      	lsls	r4, r2, #3
 80041cc:	4622      	mov	r2, r4
 80041ce:	462b      	mov	r3, r5
 80041d0:	1814      	adds	r4, r2, r0
 80041d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80041d6:	414b      	adcs	r3, r1
 80041d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	1891      	adds	r1, r2, r2
 80041ea:	6339      	str	r1, [r7, #48]	; 0x30
 80041ec:	415b      	adcs	r3, r3
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
 80041f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041f8:	f7fc f842 	bl	8000280 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <UART_SetConfig+0x3dc>)
 8004202:	fba3 1302 	umull	r1, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2164      	movs	r1, #100	; 0x64
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	3332      	adds	r3, #50	; 0x32
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <UART_SetConfig+0x3dc>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f003 0207 	and.w	r2, r3, #7
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4432      	add	r2, r6
 8004228:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800422a:	e1a6      	b.n	800457a <UART_SetConfig+0x722>
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4bd1      	ldr	r3, [pc, #836]	; (8004584 <UART_SetConfig+0x72c>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d006      	beq.n	8004252 <UART_SetConfig+0x3fa>
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4bcf      	ldr	r3, [pc, #828]	; (8004588 <UART_SetConfig+0x730>)
 800424c:	429a      	cmp	r2, r3
 800424e:	f040 80ca 	bne.w	80043e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004252:	f7fe fc0d 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8004256:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800425e:	461c      	mov	r4, r3
 8004260:	f04f 0500 	mov.w	r5, #0
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	1891      	adds	r1, r2, r2
 800426a:	62b9      	str	r1, [r7, #40]	; 0x28
 800426c:	415b      	adcs	r3, r3
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004274:	1912      	adds	r2, r2, r4
 8004276:	eb45 0303 	adc.w	r3, r5, r3
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	00d9      	lsls	r1, r3, #3
 8004284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004288:	00d0      	lsls	r0, r2, #3
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	eb12 0a04 	adds.w	sl, r2, r4
 8004292:	eb43 0b05 	adc.w	fp, r3, r5
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042b0:	0082      	lsls	r2, r0, #2
 80042b2:	4650      	mov	r0, sl
 80042b4:	4659      	mov	r1, fp
 80042b6:	f7fb ffe3 	bl	8000280 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4bb3      	ldr	r3, [pc, #716]	; (800458c <UART_SetConfig+0x734>)
 80042c0:	fba3 2302 	umull	r2, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	011e      	lsls	r6, r3, #4
 80042c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042cc:	4618      	mov	r0, r3
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	1894      	adds	r4, r2, r2
 80042d8:	623c      	str	r4, [r7, #32]
 80042da:	415b      	adcs	r3, r3
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042e2:	1812      	adds	r2, r2, r0
 80042e4:	eb41 0303 	adc.w	r3, r1, r3
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	f04f 0500 	mov.w	r5, #0
 80042f0:	00dd      	lsls	r5, r3, #3
 80042f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042f6:	00d4      	lsls	r4, r2, #3
 80042f8:	4622      	mov	r2, r4
 80042fa:	462b      	mov	r3, r5
 80042fc:	1814      	adds	r4, r2, r0
 80042fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004302:	414b      	adcs	r3, r1
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	008b      	lsls	r3, r1, #2
 800431e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004322:	0082      	lsls	r2, r0, #2
 8004324:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004328:	f7fb ffaa 	bl	8000280 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <UART_SetConfig+0x734>)
 8004332:	fba3 1302 	umull	r1, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2164      	movs	r1, #100	; 0x64
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	3332      	adds	r3, #50	; 0x32
 8004344:	4a91      	ldr	r2, [pc, #580]	; (800458c <UART_SetConfig+0x734>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004350:	441e      	add	r6, r3
 8004352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004356:	4618      	mov	r0, r3
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	1894      	adds	r4, r2, r2
 8004362:	61bc      	str	r4, [r7, #24]
 8004364:	415b      	adcs	r3, r3
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436c:	1812      	adds	r2, r2, r0
 800436e:	eb41 0303 	adc.w	r3, r1, r3
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	f04f 0500 	mov.w	r5, #0
 800437a:	00dd      	lsls	r5, r3, #3
 800437c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004380:	00d4      	lsls	r4, r2, #3
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	1814      	adds	r4, r2, r0
 8004388:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800438c:	414b      	adcs	r3, r1
 800438e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4618      	mov	r0, r3
 800439a:	f04f 0100 	mov.w	r1, #0
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	008b      	lsls	r3, r1, #2
 80043a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ac:	0082      	lsls	r2, r0, #2
 80043ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80043b2:	f7fb ff65 	bl	8000280 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4b74      	ldr	r3, [pc, #464]	; (800458c <UART_SetConfig+0x734>)
 80043bc:	fba3 1302 	umull	r1, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	2164      	movs	r1, #100	; 0x64
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	3332      	adds	r3, #50	; 0x32
 80043ce:	4a6f      	ldr	r2, [pc, #444]	; (800458c <UART_SetConfig+0x734>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	f003 020f 	and.w	r2, r3, #15
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4432      	add	r2, r6
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	e0c9      	b.n	800457a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe fb2f 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80043ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043f2:	461c      	mov	r4, r3
 80043f4:	f04f 0500 	mov.w	r5, #0
 80043f8:	4622      	mov	r2, r4
 80043fa:	462b      	mov	r3, r5
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	6139      	str	r1, [r7, #16]
 8004400:	415b      	adcs	r3, r3
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004408:	1912      	adds	r2, r2, r4
 800440a:	eb45 0303 	adc.w	r3, r5, r3
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	00d9      	lsls	r1, r3, #3
 8004418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800441c:	00d0      	lsls	r0, r2, #3
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	eb12 0804 	adds.w	r8, r2, r4
 8004426:	eb43 0905 	adc.w	r9, r3, r5
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004444:	0082      	lsls	r2, r0, #2
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	f7fb ff19 	bl	8000280 <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4b4e      	ldr	r3, [pc, #312]	; (800458c <UART_SetConfig+0x734>)
 8004454:	fba3 2302 	umull	r2, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	011e      	lsls	r6, r3, #4
 800445c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004460:	4618      	mov	r0, r3
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	1894      	adds	r4, r2, r2
 800446c:	60bc      	str	r4, [r7, #8]
 800446e:	415b      	adcs	r3, r3
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004476:	1812      	adds	r2, r2, r0
 8004478:	eb41 0303 	adc.w	r3, r1, r3
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	f04f 0500 	mov.w	r5, #0
 8004484:	00dd      	lsls	r5, r3, #3
 8004486:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800448a:	00d4      	lsls	r4, r2, #3
 800448c:	4622      	mov	r2, r4
 800448e:	462b      	mov	r3, r5
 8004490:	1814      	adds	r4, r2, r0
 8004492:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004496:	414b      	adcs	r3, r1
 8004498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044b6:	0082      	lsls	r2, r0, #2
 80044b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044bc:	f7fb fee0 	bl	8000280 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <UART_SetConfig+0x734>)
 80044c6:	fba3 1302 	umull	r1, r3, r3, r2
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2164      	movs	r1, #100	; 0x64
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	3332      	adds	r3, #50	; 0x32
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <UART_SetConfig+0x734>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e4:	441e      	add	r6, r3
 80044e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	1894      	adds	r4, r2, r2
 80044f6:	603c      	str	r4, [r7, #0]
 80044f8:	415b      	adcs	r3, r3
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	1812      	adds	r2, r2, r0
 8004502:	eb41 0303 	adc.w	r3, r1, r3
 8004506:	f04f 0400 	mov.w	r4, #0
 800450a:	f04f 0500 	mov.w	r5, #0
 800450e:	00dd      	lsls	r5, r3, #3
 8004510:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004514:	00d4      	lsls	r4, r2, #3
 8004516:	4622      	mov	r2, r4
 8004518:	462b      	mov	r3, r5
 800451a:	1814      	adds	r4, r2, r0
 800451c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004520:	414b      	adcs	r3, r1
 8004522:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4618      	mov	r0, r3
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004540:	0082      	lsls	r2, r0, #2
 8004542:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004546:	f7fb fe9b 	bl	8000280 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <UART_SetConfig+0x734>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <UART_SetConfig+0x734>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 020f 	and.w	r2, r3, #15
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4432      	add	r2, r6
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	e7ff      	b.n	800457a <UART_SetConfig+0x722>
 800457a:	bf00      	nop
 800457c:	37f4      	adds	r7, #244	; 0xf4
 800457e:	46bd      	mov	sp, r7
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004584:	40011000 	.word	0x40011000
 8004588:	40011400 	.word	0x40011400
 800458c:	51eb851f 	.word	0x51eb851f

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	; (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f001 f9be 	bl	8005930 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08006354 	.word	0x08006354
 80045d8:	08006354 	.word	0x08006354
 80045dc:	08006354 	.word	0x08006354
 80045e0:	08006358 	.word	0x08006358

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <iprintf>:
 80045f4:	b40f      	push	{r0, r1, r2, r3}
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <iprintf+0x2c>)
 80045f8:	b513      	push	{r0, r1, r4, lr}
 80045fa:	681c      	ldr	r4, [r3, #0]
 80045fc:	b124      	cbz	r4, 8004608 <iprintf+0x14>
 80045fe:	69a3      	ldr	r3, [r4, #24]
 8004600:	b913      	cbnz	r3, 8004608 <iprintf+0x14>
 8004602:	4620      	mov	r0, r4
 8004604:	f000 fa7e 	bl	8004b04 <__sinit>
 8004608:	ab05      	add	r3, sp, #20
 800460a:	9a04      	ldr	r2, [sp, #16]
 800460c:	68a1      	ldr	r1, [r4, #8]
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fdab 	bl	800516c <_vfiprintf_r>
 8004616:	b002      	add	sp, #8
 8004618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800461c:	b004      	add	sp, #16
 800461e:	4770      	bx	lr
 8004620:	20000010 	.word	0x20000010

08004624 <_puts_r>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	460e      	mov	r6, r1
 8004628:	4605      	mov	r5, r0
 800462a:	b118      	cbz	r0, 8004634 <_puts_r+0x10>
 800462c:	6983      	ldr	r3, [r0, #24]
 800462e:	b90b      	cbnz	r3, 8004634 <_puts_r+0x10>
 8004630:	f000 fa68 	bl	8004b04 <__sinit>
 8004634:	69ab      	ldr	r3, [r5, #24]
 8004636:	68ac      	ldr	r4, [r5, #8]
 8004638:	b913      	cbnz	r3, 8004640 <_puts_r+0x1c>
 800463a:	4628      	mov	r0, r5
 800463c:	f000 fa62 	bl	8004b04 <__sinit>
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <_puts_r+0xd0>)
 8004642:	429c      	cmp	r4, r3
 8004644:	d120      	bne.n	8004688 <_puts_r+0x64>
 8004646:	686c      	ldr	r4, [r5, #4]
 8004648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464a:	07db      	lsls	r3, r3, #31
 800464c:	d405      	bmi.n	800465a <_puts_r+0x36>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	0598      	lsls	r0, r3, #22
 8004652:	d402      	bmi.n	800465a <_puts_r+0x36>
 8004654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004656:	f000 faf3 	bl	8004c40 <__retarget_lock_acquire_recursive>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	0719      	lsls	r1, r3, #28
 800465e:	d51d      	bpl.n	800469c <_puts_r+0x78>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	b1db      	cbz	r3, 800469c <_puts_r+0x78>
 8004664:	3e01      	subs	r6, #1
 8004666:	68a3      	ldr	r3, [r4, #8]
 8004668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
 8004670:	bb39      	cbnz	r1, 80046c2 <_puts_r+0x9e>
 8004672:	2b00      	cmp	r3, #0
 8004674:	da38      	bge.n	80046e8 <_puts_r+0xc4>
 8004676:	4622      	mov	r2, r4
 8004678:	210a      	movs	r1, #10
 800467a:	4628      	mov	r0, r5
 800467c:	f000 f868 	bl	8004750 <__swbuf_r>
 8004680:	3001      	adds	r0, #1
 8004682:	d011      	beq.n	80046a8 <_puts_r+0x84>
 8004684:	250a      	movs	r5, #10
 8004686:	e011      	b.n	80046ac <_puts_r+0x88>
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <_puts_r+0xd4>)
 800468a:	429c      	cmp	r4, r3
 800468c:	d101      	bne.n	8004692 <_puts_r+0x6e>
 800468e:	68ac      	ldr	r4, [r5, #8]
 8004690:	e7da      	b.n	8004648 <_puts_r+0x24>
 8004692:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <_puts_r+0xd8>)
 8004694:	429c      	cmp	r4, r3
 8004696:	bf08      	it	eq
 8004698:	68ec      	ldreq	r4, [r5, #12]
 800469a:	e7d5      	b.n	8004648 <_puts_r+0x24>
 800469c:	4621      	mov	r1, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 f8a8 	bl	80047f4 <__swsetup_r>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d0dd      	beq.n	8004664 <_puts_r+0x40>
 80046a8:	f04f 35ff 	mov.w	r5, #4294967295
 80046ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ae:	07da      	lsls	r2, r3, #31
 80046b0:	d405      	bmi.n	80046be <_puts_r+0x9a>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	059b      	lsls	r3, r3, #22
 80046b6:	d402      	bmi.n	80046be <_puts_r+0x9a>
 80046b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ba:	f000 fac2 	bl	8004c42 <__retarget_lock_release_recursive>
 80046be:	4628      	mov	r0, r5
 80046c0:	bd70      	pop	{r4, r5, r6, pc}
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da04      	bge.n	80046d0 <_puts_r+0xac>
 80046c6:	69a2      	ldr	r2, [r4, #24]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	dc06      	bgt.n	80046da <_puts_r+0xb6>
 80046cc:	290a      	cmp	r1, #10
 80046ce:	d004      	beq.n	80046da <_puts_r+0xb6>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	6022      	str	r2, [r4, #0]
 80046d6:	7019      	strb	r1, [r3, #0]
 80046d8:	e7c5      	b.n	8004666 <_puts_r+0x42>
 80046da:	4622      	mov	r2, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f837 	bl	8004750 <__swbuf_r>
 80046e2:	3001      	adds	r0, #1
 80046e4:	d1bf      	bne.n	8004666 <_puts_r+0x42>
 80046e6:	e7df      	b.n	80046a8 <_puts_r+0x84>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	250a      	movs	r5, #10
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	6022      	str	r2, [r4, #0]
 80046f0:	701d      	strb	r5, [r3, #0]
 80046f2:	e7db      	b.n	80046ac <_puts_r+0x88>
 80046f4:	080062d8 	.word	0x080062d8
 80046f8:	080062f8 	.word	0x080062f8
 80046fc:	080062b8 	.word	0x080062b8

08004700 <puts>:
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <puts+0xc>)
 8004702:	4601      	mov	r1, r0
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f7ff bf8d 	b.w	8004624 <_puts_r>
 800470a:	bf00      	nop
 800470c:	20000010 	.word	0x20000010

08004710 <siprintf>:
 8004710:	b40e      	push	{r1, r2, r3}
 8004712:	b500      	push	{lr}
 8004714:	b09c      	sub	sp, #112	; 0x70
 8004716:	ab1d      	add	r3, sp, #116	; 0x74
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	9006      	str	r0, [sp, #24]
 800471c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004720:	4809      	ldr	r0, [pc, #36]	; (8004748 <siprintf+0x38>)
 8004722:	9107      	str	r1, [sp, #28]
 8004724:	9104      	str	r1, [sp, #16]
 8004726:	4909      	ldr	r1, [pc, #36]	; (800474c <siprintf+0x3c>)
 8004728:	f853 2b04 	ldr.w	r2, [r3], #4
 800472c:	9105      	str	r1, [sp, #20]
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	a902      	add	r1, sp, #8
 8004734:	f000 fbf0 	bl	8004f18 <_svfiprintf_r>
 8004738:	9b02      	ldr	r3, [sp, #8]
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	b01c      	add	sp, #112	; 0x70
 8004740:	f85d eb04 	ldr.w	lr, [sp], #4
 8004744:	b003      	add	sp, #12
 8004746:	4770      	bx	lr
 8004748:	20000010 	.word	0x20000010
 800474c:	ffff0208 	.word	0xffff0208

08004750 <__swbuf_r>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	460e      	mov	r6, r1
 8004754:	4614      	mov	r4, r2
 8004756:	4605      	mov	r5, r0
 8004758:	b118      	cbz	r0, 8004762 <__swbuf_r+0x12>
 800475a:	6983      	ldr	r3, [r0, #24]
 800475c:	b90b      	cbnz	r3, 8004762 <__swbuf_r+0x12>
 800475e:	f000 f9d1 	bl	8004b04 <__sinit>
 8004762:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <__swbuf_r+0x98>)
 8004764:	429c      	cmp	r4, r3
 8004766:	d12b      	bne.n	80047c0 <__swbuf_r+0x70>
 8004768:	686c      	ldr	r4, [r5, #4]
 800476a:	69a3      	ldr	r3, [r4, #24]
 800476c:	60a3      	str	r3, [r4, #8]
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	071a      	lsls	r2, r3, #28
 8004772:	d52f      	bpl.n	80047d4 <__swbuf_r+0x84>
 8004774:	6923      	ldr	r3, [r4, #16]
 8004776:	b36b      	cbz	r3, 80047d4 <__swbuf_r+0x84>
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	6820      	ldr	r0, [r4, #0]
 800477c:	1ac0      	subs	r0, r0, r3
 800477e:	6963      	ldr	r3, [r4, #20]
 8004780:	b2f6      	uxtb	r6, r6
 8004782:	4283      	cmp	r3, r0
 8004784:	4637      	mov	r7, r6
 8004786:	dc04      	bgt.n	8004792 <__swbuf_r+0x42>
 8004788:	4621      	mov	r1, r4
 800478a:	4628      	mov	r0, r5
 800478c:	f000 f926 	bl	80049dc <_fflush_r>
 8004790:	bb30      	cbnz	r0, 80047e0 <__swbuf_r+0x90>
 8004792:	68a3      	ldr	r3, [r4, #8]
 8004794:	3b01      	subs	r3, #1
 8004796:	60a3      	str	r3, [r4, #8]
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	6022      	str	r2, [r4, #0]
 800479e:	701e      	strb	r6, [r3, #0]
 80047a0:	6963      	ldr	r3, [r4, #20]
 80047a2:	3001      	adds	r0, #1
 80047a4:	4283      	cmp	r3, r0
 80047a6:	d004      	beq.n	80047b2 <__swbuf_r+0x62>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	07db      	lsls	r3, r3, #31
 80047ac:	d506      	bpl.n	80047bc <__swbuf_r+0x6c>
 80047ae:	2e0a      	cmp	r6, #10
 80047b0:	d104      	bne.n	80047bc <__swbuf_r+0x6c>
 80047b2:	4621      	mov	r1, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f911 	bl	80049dc <_fflush_r>
 80047ba:	b988      	cbnz	r0, 80047e0 <__swbuf_r+0x90>
 80047bc:	4638      	mov	r0, r7
 80047be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <__swbuf_r+0x9c>)
 80047c2:	429c      	cmp	r4, r3
 80047c4:	d101      	bne.n	80047ca <__swbuf_r+0x7a>
 80047c6:	68ac      	ldr	r4, [r5, #8]
 80047c8:	e7cf      	b.n	800476a <__swbuf_r+0x1a>
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <__swbuf_r+0xa0>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	bf08      	it	eq
 80047d0:	68ec      	ldreq	r4, [r5, #12]
 80047d2:	e7ca      	b.n	800476a <__swbuf_r+0x1a>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 f80c 	bl	80047f4 <__swsetup_r>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d0cb      	beq.n	8004778 <__swbuf_r+0x28>
 80047e0:	f04f 37ff 	mov.w	r7, #4294967295
 80047e4:	e7ea      	b.n	80047bc <__swbuf_r+0x6c>
 80047e6:	bf00      	nop
 80047e8:	080062d8 	.word	0x080062d8
 80047ec:	080062f8 	.word	0x080062f8
 80047f0:	080062b8 	.word	0x080062b8

080047f4 <__swsetup_r>:
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <__swsetup_r+0xcc>)
 80047f6:	b570      	push	{r4, r5, r6, lr}
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	4606      	mov	r6, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	b125      	cbz	r5, 800480a <__swsetup_r+0x16>
 8004800:	69ab      	ldr	r3, [r5, #24]
 8004802:	b913      	cbnz	r3, 800480a <__swsetup_r+0x16>
 8004804:	4628      	mov	r0, r5
 8004806:	f000 f97d 	bl	8004b04 <__sinit>
 800480a:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <__swsetup_r+0xd0>)
 800480c:	429c      	cmp	r4, r3
 800480e:	d10f      	bne.n	8004830 <__swsetup_r+0x3c>
 8004810:	686c      	ldr	r4, [r5, #4]
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004818:	0719      	lsls	r1, r3, #28
 800481a:	d42c      	bmi.n	8004876 <__swsetup_r+0x82>
 800481c:	06dd      	lsls	r5, r3, #27
 800481e:	d411      	bmi.n	8004844 <__swsetup_r+0x50>
 8004820:	2309      	movs	r3, #9
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e03e      	b.n	80048ae <__swsetup_r+0xba>
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <__swsetup_r+0xd4>)
 8004832:	429c      	cmp	r4, r3
 8004834:	d101      	bne.n	800483a <__swsetup_r+0x46>
 8004836:	68ac      	ldr	r4, [r5, #8]
 8004838:	e7eb      	b.n	8004812 <__swsetup_r+0x1e>
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <__swsetup_r+0xd8>)
 800483c:	429c      	cmp	r4, r3
 800483e:	bf08      	it	eq
 8004840:	68ec      	ldreq	r4, [r5, #12]
 8004842:	e7e6      	b.n	8004812 <__swsetup_r+0x1e>
 8004844:	0758      	lsls	r0, r3, #29
 8004846:	d512      	bpl.n	800486e <__swsetup_r+0x7a>
 8004848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484a:	b141      	cbz	r1, 800485e <__swsetup_r+0x6a>
 800484c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__swsetup_r+0x66>
 8004854:	4630      	mov	r0, r6
 8004856:	f000 fa59 	bl	8004d0c <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	; 0x34
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b94b      	cbnz	r3, 800488e <__swsetup_r+0x9a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d003      	beq.n	800488e <__swsetup_r+0x9a>
 8004886:	4621      	mov	r1, r4
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f9ff 	bl	8004c8c <__smakebuf_r>
 800488e:	89a0      	ldrh	r0, [r4, #12]
 8004890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004894:	f010 0301 	ands.w	r3, r0, #1
 8004898:	d00a      	beq.n	80048b0 <__swsetup_r+0xbc>
 800489a:	2300      	movs	r3, #0
 800489c:	60a3      	str	r3, [r4, #8]
 800489e:	6963      	ldr	r3, [r4, #20]
 80048a0:	425b      	negs	r3, r3
 80048a2:	61a3      	str	r3, [r4, #24]
 80048a4:	6923      	ldr	r3, [r4, #16]
 80048a6:	b943      	cbnz	r3, 80048ba <__swsetup_r+0xc6>
 80048a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048ac:	d1ba      	bne.n	8004824 <__swsetup_r+0x30>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	0781      	lsls	r1, r0, #30
 80048b2:	bf58      	it	pl
 80048b4:	6963      	ldrpl	r3, [r4, #20]
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	e7f4      	b.n	80048a4 <__swsetup_r+0xb0>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e7f7      	b.n	80048ae <__swsetup_r+0xba>
 80048be:	bf00      	nop
 80048c0:	20000010 	.word	0x20000010
 80048c4:	080062d8 	.word	0x080062d8
 80048c8:	080062f8 	.word	0x080062f8
 80048cc:	080062b8 	.word	0x080062b8

080048d0 <__sflush_r>:
 80048d0:	898a      	ldrh	r2, [r1, #12]
 80048d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	4605      	mov	r5, r0
 80048d8:	0710      	lsls	r0, r2, #28
 80048da:	460c      	mov	r4, r1
 80048dc:	d458      	bmi.n	8004990 <__sflush_r+0xc0>
 80048de:	684b      	ldr	r3, [r1, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc05      	bgt.n	80048f0 <__sflush_r+0x20>
 80048e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dc02      	bgt.n	80048f0 <__sflush_r+0x20>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f2:	2e00      	cmp	r6, #0
 80048f4:	d0f9      	beq.n	80048ea <__sflush_r+0x1a>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048fc:	682f      	ldr	r7, [r5, #0]
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	d032      	beq.n	8004968 <__sflush_r+0x98>
 8004902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	075a      	lsls	r2, r3, #29
 8004908:	d505      	bpl.n	8004916 <__sflush_r+0x46>
 800490a:	6863      	ldr	r3, [r4, #4]
 800490c:	1ac0      	subs	r0, r0, r3
 800490e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004910:	b10b      	cbz	r3, 8004916 <__sflush_r+0x46>
 8004912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004914:	1ac0      	subs	r0, r0, r3
 8004916:	2300      	movs	r3, #0
 8004918:	4602      	mov	r2, r0
 800491a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491c:	6a21      	ldr	r1, [r4, #32]
 800491e:	4628      	mov	r0, r5
 8004920:	47b0      	blx	r6
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	d106      	bne.n	8004936 <__sflush_r+0x66>
 8004928:	6829      	ldr	r1, [r5, #0]
 800492a:	291d      	cmp	r1, #29
 800492c:	d82c      	bhi.n	8004988 <__sflush_r+0xb8>
 800492e:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <__sflush_r+0x108>)
 8004930:	40ca      	lsrs	r2, r1
 8004932:	07d6      	lsls	r6, r2, #31
 8004934:	d528      	bpl.n	8004988 <__sflush_r+0xb8>
 8004936:	2200      	movs	r2, #0
 8004938:	6062      	str	r2, [r4, #4]
 800493a:	04d9      	lsls	r1, r3, #19
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	6022      	str	r2, [r4, #0]
 8004940:	d504      	bpl.n	800494c <__sflush_r+0x7c>
 8004942:	1c42      	adds	r2, r0, #1
 8004944:	d101      	bne.n	800494a <__sflush_r+0x7a>
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	b903      	cbnz	r3, 800494c <__sflush_r+0x7c>
 800494a:	6560      	str	r0, [r4, #84]	; 0x54
 800494c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800494e:	602f      	str	r7, [r5, #0]
 8004950:	2900      	cmp	r1, #0
 8004952:	d0ca      	beq.n	80048ea <__sflush_r+0x1a>
 8004954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004958:	4299      	cmp	r1, r3
 800495a:	d002      	beq.n	8004962 <__sflush_r+0x92>
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f9d5 	bl	8004d0c <_free_r>
 8004962:	2000      	movs	r0, #0
 8004964:	6360      	str	r0, [r4, #52]	; 0x34
 8004966:	e7c1      	b.n	80048ec <__sflush_r+0x1c>
 8004968:	6a21      	ldr	r1, [r4, #32]
 800496a:	2301      	movs	r3, #1
 800496c:	4628      	mov	r0, r5
 800496e:	47b0      	blx	r6
 8004970:	1c41      	adds	r1, r0, #1
 8004972:	d1c7      	bne.n	8004904 <__sflush_r+0x34>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0c4      	beq.n	8004904 <__sflush_r+0x34>
 800497a:	2b1d      	cmp	r3, #29
 800497c:	d001      	beq.n	8004982 <__sflush_r+0xb2>
 800497e:	2b16      	cmp	r3, #22
 8004980:	d101      	bne.n	8004986 <__sflush_r+0xb6>
 8004982:	602f      	str	r7, [r5, #0]
 8004984:	e7b1      	b.n	80048ea <__sflush_r+0x1a>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	e7ad      	b.n	80048ec <__sflush_r+0x1c>
 8004990:	690f      	ldr	r7, [r1, #16]
 8004992:	2f00      	cmp	r7, #0
 8004994:	d0a9      	beq.n	80048ea <__sflush_r+0x1a>
 8004996:	0793      	lsls	r3, r2, #30
 8004998:	680e      	ldr	r6, [r1, #0]
 800499a:	bf08      	it	eq
 800499c:	694b      	ldreq	r3, [r1, #20]
 800499e:	600f      	str	r7, [r1, #0]
 80049a0:	bf18      	it	ne
 80049a2:	2300      	movne	r3, #0
 80049a4:	eba6 0807 	sub.w	r8, r6, r7
 80049a8:	608b      	str	r3, [r1, #8]
 80049aa:	f1b8 0f00 	cmp.w	r8, #0
 80049ae:	dd9c      	ble.n	80048ea <__sflush_r+0x1a>
 80049b0:	6a21      	ldr	r1, [r4, #32]
 80049b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049b4:	4643      	mov	r3, r8
 80049b6:	463a      	mov	r2, r7
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b0      	blx	r6
 80049bc:	2800      	cmp	r0, #0
 80049be:	dc06      	bgt.n	80049ce <__sflush_r+0xfe>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	e78e      	b.n	80048ec <__sflush_r+0x1c>
 80049ce:	4407      	add	r7, r0
 80049d0:	eba8 0800 	sub.w	r8, r8, r0
 80049d4:	e7e9      	b.n	80049aa <__sflush_r+0xda>
 80049d6:	bf00      	nop
 80049d8:	20400001 	.word	0x20400001

080049dc <_fflush_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	690b      	ldr	r3, [r1, #16]
 80049e0:	4605      	mov	r5, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	b913      	cbnz	r3, 80049ec <_fflush_r+0x10>
 80049e6:	2500      	movs	r5, #0
 80049e8:	4628      	mov	r0, r5
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	b118      	cbz	r0, 80049f6 <_fflush_r+0x1a>
 80049ee:	6983      	ldr	r3, [r0, #24]
 80049f0:	b90b      	cbnz	r3, 80049f6 <_fflush_r+0x1a>
 80049f2:	f000 f887 	bl	8004b04 <__sinit>
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <_fflush_r+0x6c>)
 80049f8:	429c      	cmp	r4, r3
 80049fa:	d11b      	bne.n	8004a34 <_fflush_r+0x58>
 80049fc:	686c      	ldr	r4, [r5, #4]
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ef      	beq.n	80049e6 <_fflush_r+0xa>
 8004a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a08:	07d0      	lsls	r0, r2, #31
 8004a0a:	d404      	bmi.n	8004a16 <_fflush_r+0x3a>
 8004a0c:	0599      	lsls	r1, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_fflush_r+0x3a>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f000 f915 	bl	8004c40 <__retarget_lock_acquire_recursive>
 8004a16:	4628      	mov	r0, r5
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f7ff ff59 	bl	80048d0 <__sflush_r>
 8004a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a20:	07da      	lsls	r2, r3, #31
 8004a22:	4605      	mov	r5, r0
 8004a24:	d4e0      	bmi.n	80049e8 <_fflush_r+0xc>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	059b      	lsls	r3, r3, #22
 8004a2a:	d4dd      	bmi.n	80049e8 <_fflush_r+0xc>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a2e:	f000 f908 	bl	8004c42 <__retarget_lock_release_recursive>
 8004a32:	e7d9      	b.n	80049e8 <_fflush_r+0xc>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_fflush_r+0x70>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <_fflush_r+0x62>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7df      	b.n	80049fe <_fflush_r+0x22>
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <_fflush_r+0x74>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7da      	b.n	80049fe <_fflush_r+0x22>
 8004a48:	080062d8 	.word	0x080062d8
 8004a4c:	080062f8 	.word	0x080062f8
 8004a50:	080062b8 	.word	0x080062b8

08004a54 <std>:
 8004a54:	2300      	movs	r3, #0
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a62:	6083      	str	r3, [r0, #8]
 8004a64:	8181      	strh	r1, [r0, #12]
 8004a66:	6643      	str	r3, [r0, #100]	; 0x64
 8004a68:	81c2      	strh	r2, [r0, #14]
 8004a6a:	6183      	str	r3, [r0, #24]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	2208      	movs	r2, #8
 8004a70:	305c      	adds	r0, #92	; 0x5c
 8004a72:	f7ff fdb7 	bl	80045e4 <memset>
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x38>)
 8004a78:	6263      	str	r3, [r4, #36]	; 0x24
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x3c>)
 8004a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <std+0x40>)
 8004a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <std+0x44>)
 8004a84:	6224      	str	r4, [r4, #32]
 8004a86:	6323      	str	r3, [r4, #48]	; 0x30
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08005715 	.word	0x08005715
 8004a90:	08005737 	.word	0x08005737
 8004a94:	0800576f 	.word	0x0800576f
 8004a98:	08005793 	.word	0x08005793

08004a9c <_cleanup_r>:
 8004a9c:	4901      	ldr	r1, [pc, #4]	; (8004aa4 <_cleanup_r+0x8>)
 8004a9e:	f000 b8af 	b.w	8004c00 <_fwalk_reent>
 8004aa2:	bf00      	nop
 8004aa4:	080049dd 	.word	0x080049dd

08004aa8 <__sfmoreglue>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	1e4a      	subs	r2, r1, #1
 8004aac:	2568      	movs	r5, #104	; 0x68
 8004aae:	4355      	muls	r5, r2
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ab6:	f000 f979 	bl	8004dac <_malloc_r>
 8004aba:	4604      	mov	r4, r0
 8004abc:	b140      	cbz	r0, 8004ad0 <__sfmoreglue+0x28>
 8004abe:	2100      	movs	r1, #0
 8004ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8004ac4:	300c      	adds	r0, #12
 8004ac6:	60a0      	str	r0, [r4, #8]
 8004ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004acc:	f7ff fd8a 	bl	80045e4 <memset>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}

08004ad4 <__sfp_lock_acquire>:
 8004ad4:	4801      	ldr	r0, [pc, #4]	; (8004adc <__sfp_lock_acquire+0x8>)
 8004ad6:	f000 b8b3 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004ada:	bf00      	nop
 8004adc:	20000250 	.word	0x20000250

08004ae0 <__sfp_lock_release>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__sfp_lock_release+0x8>)
 8004ae2:	f000 b8ae 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	20000250 	.word	0x20000250

08004aec <__sinit_lock_acquire>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sinit_lock_acquire+0x8>)
 8004aee:	f000 b8a7 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	2000024b 	.word	0x2000024b

08004af8 <__sinit_lock_release>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__sinit_lock_release+0x8>)
 8004afa:	f000 b8a2 	b.w	8004c42 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	2000024b 	.word	0x2000024b

08004b04 <__sinit>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
 8004b08:	f7ff fff0 	bl	8004aec <__sinit_lock_acquire>
 8004b0c:	69a3      	ldr	r3, [r4, #24]
 8004b0e:	b11b      	cbz	r3, 8004b18 <__sinit+0x14>
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f7ff bff0 	b.w	8004af8 <__sinit_lock_release>
 8004b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <__sinit+0x68>)
 8004b20:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <__sinit+0x6c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	bf04      	itt	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	61a3      	streq	r3, [r4, #24]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f820 	bl	8004b74 <__sfp>
 8004b34:	6060      	str	r0, [r4, #4]
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 f81c 	bl	8004b74 <__sfp>
 8004b3c:	60a0      	str	r0, [r4, #8]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 f818 	bl	8004b74 <__sfp>
 8004b44:	2200      	movs	r2, #0
 8004b46:	60e0      	str	r0, [r4, #12]
 8004b48:	2104      	movs	r1, #4
 8004b4a:	6860      	ldr	r0, [r4, #4]
 8004b4c:	f7ff ff82 	bl	8004a54 <std>
 8004b50:	68a0      	ldr	r0, [r4, #8]
 8004b52:	2201      	movs	r2, #1
 8004b54:	2109      	movs	r1, #9
 8004b56:	f7ff ff7d 	bl	8004a54 <std>
 8004b5a:	68e0      	ldr	r0, [r4, #12]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	2112      	movs	r1, #18
 8004b60:	f7ff ff78 	bl	8004a54 <std>
 8004b64:	2301      	movs	r3, #1
 8004b66:	61a3      	str	r3, [r4, #24]
 8004b68:	e7d2      	b.n	8004b10 <__sinit+0xc>
 8004b6a:	bf00      	nop
 8004b6c:	080062b4 	.word	0x080062b4
 8004b70:	08004a9d 	.word	0x08004a9d

08004b74 <__sfp>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	4607      	mov	r7, r0
 8004b78:	f7ff ffac 	bl	8004ad4 <__sfp_lock_acquire>
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <__sfp+0x84>)
 8004b7e:	681e      	ldr	r6, [r3, #0]
 8004b80:	69b3      	ldr	r3, [r6, #24]
 8004b82:	b913      	cbnz	r3, 8004b8a <__sfp+0x16>
 8004b84:	4630      	mov	r0, r6
 8004b86:	f7ff ffbd 	bl	8004b04 <__sinit>
 8004b8a:	3648      	adds	r6, #72	; 0x48
 8004b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	d503      	bpl.n	8004b9c <__sfp+0x28>
 8004b94:	6833      	ldr	r3, [r6, #0]
 8004b96:	b30b      	cbz	r3, 8004bdc <__sfp+0x68>
 8004b98:	6836      	ldr	r6, [r6, #0]
 8004b9a:	e7f7      	b.n	8004b8c <__sfp+0x18>
 8004b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ba0:	b9d5      	cbnz	r5, 8004bd8 <__sfp+0x64>
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <__sfp+0x88>)
 8004ba4:	60e3      	str	r3, [r4, #12]
 8004ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004baa:	6665      	str	r5, [r4, #100]	; 0x64
 8004bac:	f000 f847 	bl	8004c3e <__retarget_lock_init_recursive>
 8004bb0:	f7ff ff96 	bl	8004ae0 <__sfp_lock_release>
 8004bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bbc:	6025      	str	r5, [r4, #0]
 8004bbe:	61a5      	str	r5, [r4, #24]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bc8:	f7ff fd0c 	bl	80045e4 <memset>
 8004bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd8:	3468      	adds	r4, #104	; 0x68
 8004bda:	e7d9      	b.n	8004b90 <__sfp+0x1c>
 8004bdc:	2104      	movs	r1, #4
 8004bde:	4638      	mov	r0, r7
 8004be0:	f7ff ff62 	bl	8004aa8 <__sfmoreglue>
 8004be4:	4604      	mov	r4, r0
 8004be6:	6030      	str	r0, [r6, #0]
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d1d5      	bne.n	8004b98 <__sfp+0x24>
 8004bec:	f7ff ff78 	bl	8004ae0 <__sfp_lock_release>
 8004bf0:	230c      	movs	r3, #12
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	e7ee      	b.n	8004bd4 <__sfp+0x60>
 8004bf6:	bf00      	nop
 8004bf8:	080062b4 	.word	0x080062b4
 8004bfc:	ffff0001 	.word	0xffff0001

08004c00 <_fwalk_reent>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4606      	mov	r6, r0
 8004c06:	4688      	mov	r8, r1
 8004c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c0c:	2700      	movs	r7, #0
 8004c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c12:	f1b9 0901 	subs.w	r9, r9, #1
 8004c16:	d505      	bpl.n	8004c24 <_fwalk_reent+0x24>
 8004c18:	6824      	ldr	r4, [r4, #0]
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d1f7      	bne.n	8004c0e <_fwalk_reent+0xe>
 8004c1e:	4638      	mov	r0, r7
 8004c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c24:	89ab      	ldrh	r3, [r5, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d907      	bls.n	8004c3a <_fwalk_reent+0x3a>
 8004c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	d003      	beq.n	8004c3a <_fwalk_reent+0x3a>
 8004c32:	4629      	mov	r1, r5
 8004c34:	4630      	mov	r0, r6
 8004c36:	47c0      	blx	r8
 8004c38:	4307      	orrs	r7, r0
 8004c3a:	3568      	adds	r5, #104	; 0x68
 8004c3c:	e7e9      	b.n	8004c12 <_fwalk_reent+0x12>

08004c3e <__retarget_lock_init_recursive>:
 8004c3e:	4770      	bx	lr

08004c40 <__retarget_lock_acquire_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__retarget_lock_release_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <__swhatbuf_r>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	460e      	mov	r6, r1
 8004c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	b096      	sub	sp, #88	; 0x58
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	da07      	bge.n	8004c66 <__swhatbuf_r+0x22>
 8004c56:	2300      	movs	r3, #0
 8004c58:	602b      	str	r3, [r5, #0]
 8004c5a:	89b3      	ldrh	r3, [r6, #12]
 8004c5c:	061a      	lsls	r2, r3, #24
 8004c5e:	d410      	bmi.n	8004c82 <__swhatbuf_r+0x3e>
 8004c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c64:	e00e      	b.n	8004c84 <__swhatbuf_r+0x40>
 8004c66:	466a      	mov	r2, sp
 8004c68:	f000 fdba 	bl	80057e0 <_fstat_r>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	dbf2      	blt.n	8004c56 <__swhatbuf_r+0x12>
 8004c70:	9a01      	ldr	r2, [sp, #4]
 8004c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c7a:	425a      	negs	r2, r3
 8004c7c:	415a      	adcs	r2, r3
 8004c7e:	602a      	str	r2, [r5, #0]
 8004c80:	e7ee      	b.n	8004c60 <__swhatbuf_r+0x1c>
 8004c82:	2340      	movs	r3, #64	; 0x40
 8004c84:	2000      	movs	r0, #0
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	b016      	add	sp, #88	; 0x58
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}

08004c8c <__smakebuf_r>:
 8004c8c:	898b      	ldrh	r3, [r1, #12]
 8004c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c90:	079d      	lsls	r5, r3, #30
 8004c92:	4606      	mov	r6, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	d507      	bpl.n	8004ca8 <__smakebuf_r+0x1c>
 8004c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	6163      	str	r3, [r4, #20]
 8004ca4:	b002      	add	sp, #8
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	ab01      	add	r3, sp, #4
 8004caa:	466a      	mov	r2, sp
 8004cac:	f7ff ffca 	bl	8004c44 <__swhatbuf_r>
 8004cb0:	9900      	ldr	r1, [sp, #0]
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f879 	bl	8004dac <_malloc_r>
 8004cba:	b948      	cbnz	r0, 8004cd0 <__smakebuf_r+0x44>
 8004cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc0:	059a      	lsls	r2, r3, #22
 8004cc2:	d4ef      	bmi.n	8004ca4 <__smakebuf_r+0x18>
 8004cc4:	f023 0303 	bic.w	r3, r3, #3
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	81a3      	strh	r3, [r4, #12]
 8004cce:	e7e3      	b.n	8004c98 <__smakebuf_r+0xc>
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <__smakebuf_r+0x7c>)
 8004cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	9b00      	ldr	r3, [sp, #0]
 8004ce0:	6163      	str	r3, [r4, #20]
 8004ce2:	9b01      	ldr	r3, [sp, #4]
 8004ce4:	6120      	str	r0, [r4, #16]
 8004ce6:	b15b      	cbz	r3, 8004d00 <__smakebuf_r+0x74>
 8004ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 fd89 	bl	8005804 <_isatty_r>
 8004cf2:	b128      	cbz	r0, 8004d00 <__smakebuf_r+0x74>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	89a0      	ldrh	r0, [r4, #12]
 8004d02:	4305      	orrs	r5, r0
 8004d04:	81a5      	strh	r5, [r4, #12]
 8004d06:	e7cd      	b.n	8004ca4 <__smakebuf_r+0x18>
 8004d08:	08004a9d 	.word	0x08004a9d

08004d0c <_free_r>:
 8004d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	d048      	beq.n	8004da4 <_free_r+0x98>
 8004d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d16:	9001      	str	r0, [sp, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d1e:	bfb8      	it	lt
 8004d20:	18e4      	addlt	r4, r4, r3
 8004d22:	f000 fdb9 	bl	8005898 <__malloc_lock>
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <_free_r+0x9c>)
 8004d28:	9801      	ldr	r0, [sp, #4]
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	b933      	cbnz	r3, 8004d3e <_free_r+0x32>
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	6014      	str	r4, [r2, #0]
 8004d34:	b003      	add	sp, #12
 8004d36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d3a:	f000 bdb3 	b.w	80058a4 <__malloc_unlock>
 8004d3e:	42a3      	cmp	r3, r4
 8004d40:	d90b      	bls.n	8004d5a <_free_r+0x4e>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	1862      	adds	r2, r4, r1
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bf04      	itt	eq
 8004d4a:	681a      	ldreq	r2, [r3, #0]
 8004d4c:	685b      	ldreq	r3, [r3, #4]
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	bf04      	itt	eq
 8004d52:	1852      	addeq	r2, r2, r1
 8004d54:	6022      	streq	r2, [r4, #0]
 8004d56:	602c      	str	r4, [r5, #0]
 8004d58:	e7ec      	b.n	8004d34 <_free_r+0x28>
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b10b      	cbz	r3, 8004d64 <_free_r+0x58>
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	d9fa      	bls.n	8004d5a <_free_r+0x4e>
 8004d64:	6811      	ldr	r1, [r2, #0]
 8004d66:	1855      	adds	r5, r2, r1
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	d10b      	bne.n	8004d84 <_free_r+0x78>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	4421      	add	r1, r4
 8004d70:	1854      	adds	r4, r2, r1
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	d1dd      	bne.n	8004d34 <_free_r+0x28>
 8004d78:	681c      	ldr	r4, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	6053      	str	r3, [r2, #4]
 8004d7e:	4421      	add	r1, r4
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	e7d7      	b.n	8004d34 <_free_r+0x28>
 8004d84:	d902      	bls.n	8004d8c <_free_r+0x80>
 8004d86:	230c      	movs	r3, #12
 8004d88:	6003      	str	r3, [r0, #0]
 8004d8a:	e7d3      	b.n	8004d34 <_free_r+0x28>
 8004d8c:	6825      	ldr	r5, [r4, #0]
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	428b      	cmp	r3, r1
 8004d92:	bf04      	itt	eq
 8004d94:	6819      	ldreq	r1, [r3, #0]
 8004d96:	685b      	ldreq	r3, [r3, #4]
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	bf04      	itt	eq
 8004d9c:	1949      	addeq	r1, r1, r5
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	6054      	str	r4, [r2, #4]
 8004da2:	e7c7      	b.n	8004d34 <_free_r+0x28>
 8004da4:	b003      	add	sp, #12
 8004da6:	bd30      	pop	{r4, r5, pc}
 8004da8:	20000098 	.word	0x20000098

08004dac <_malloc_r>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	1ccd      	adds	r5, r1, #3
 8004db0:	f025 0503 	bic.w	r5, r5, #3
 8004db4:	3508      	adds	r5, #8
 8004db6:	2d0c      	cmp	r5, #12
 8004db8:	bf38      	it	cc
 8004dba:	250c      	movcc	r5, #12
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	db01      	blt.n	8004dc6 <_malloc_r+0x1a>
 8004dc2:	42a9      	cmp	r1, r5
 8004dc4:	d903      	bls.n	8004dce <_malloc_r+0x22>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	6033      	str	r3, [r6, #0]
 8004dca:	2000      	movs	r0, #0
 8004dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dce:	f000 fd63 	bl	8005898 <__malloc_lock>
 8004dd2:	4921      	ldr	r1, [pc, #132]	; (8004e58 <_malloc_r+0xac>)
 8004dd4:	680a      	ldr	r2, [r1, #0]
 8004dd6:	4614      	mov	r4, r2
 8004dd8:	b99c      	cbnz	r4, 8004e02 <_malloc_r+0x56>
 8004dda:	4f20      	ldr	r7, [pc, #128]	; (8004e5c <_malloc_r+0xb0>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b923      	cbnz	r3, 8004dea <_malloc_r+0x3e>
 8004de0:	4621      	mov	r1, r4
 8004de2:	4630      	mov	r0, r6
 8004de4:	f000 fc86 	bl	80056f4 <_sbrk_r>
 8004de8:	6038      	str	r0, [r7, #0]
 8004dea:	4629      	mov	r1, r5
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 fc81 	bl	80056f4 <_sbrk_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	d123      	bne.n	8004e3e <_malloc_r+0x92>
 8004df6:	230c      	movs	r3, #12
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f000 fd52 	bl	80058a4 <__malloc_unlock>
 8004e00:	e7e3      	b.n	8004dca <_malloc_r+0x1e>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	1b5b      	subs	r3, r3, r5
 8004e06:	d417      	bmi.n	8004e38 <_malloc_r+0x8c>
 8004e08:	2b0b      	cmp	r3, #11
 8004e0a:	d903      	bls.n	8004e14 <_malloc_r+0x68>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	441c      	add	r4, r3
 8004e10:	6025      	str	r5, [r4, #0]
 8004e12:	e004      	b.n	8004e1e <_malloc_r+0x72>
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	42a2      	cmp	r2, r4
 8004e18:	bf0c      	ite	eq
 8004e1a:	600b      	streq	r3, [r1, #0]
 8004e1c:	6053      	strne	r3, [r2, #4]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 fd40 	bl	80058a4 <__malloc_unlock>
 8004e24:	f104 000b 	add.w	r0, r4, #11
 8004e28:	1d23      	adds	r3, r4, #4
 8004e2a:	f020 0007 	bic.w	r0, r0, #7
 8004e2e:	1ac2      	subs	r2, r0, r3
 8004e30:	d0cc      	beq.n	8004dcc <_malloc_r+0x20>
 8004e32:	1a1b      	subs	r3, r3, r0
 8004e34:	50a3      	str	r3, [r4, r2]
 8004e36:	e7c9      	b.n	8004dcc <_malloc_r+0x20>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	6864      	ldr	r4, [r4, #4]
 8004e3c:	e7cc      	b.n	8004dd8 <_malloc_r+0x2c>
 8004e3e:	1cc4      	adds	r4, r0, #3
 8004e40:	f024 0403 	bic.w	r4, r4, #3
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d0e3      	beq.n	8004e10 <_malloc_r+0x64>
 8004e48:	1a21      	subs	r1, r4, r0
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f000 fc52 	bl	80056f4 <_sbrk_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1dd      	bne.n	8004e10 <_malloc_r+0x64>
 8004e54:	e7cf      	b.n	8004df6 <_malloc_r+0x4a>
 8004e56:	bf00      	nop
 8004e58:	20000098 	.word	0x20000098
 8004e5c:	2000009c 	.word	0x2000009c

08004e60 <__ssputs_r>:
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	688e      	ldr	r6, [r1, #8]
 8004e66:	429e      	cmp	r6, r3
 8004e68:	4682      	mov	sl, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4690      	mov	r8, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	d838      	bhi.n	8004ee4 <__ssputs_r+0x84>
 8004e72:	898a      	ldrh	r2, [r1, #12]
 8004e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e78:	d032      	beq.n	8004ee0 <__ssputs_r+0x80>
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	6909      	ldr	r1, [r1, #16]
 8004e7e:	eba5 0901 	sub.w	r9, r5, r1
 8004e82:	6965      	ldr	r5, [r4, #20]
 8004e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	444b      	add	r3, r9
 8004e90:	106d      	asrs	r5, r5, #1
 8004e92:	429d      	cmp	r5, r3
 8004e94:	bf38      	it	cc
 8004e96:	461d      	movcc	r5, r3
 8004e98:	0553      	lsls	r3, r2, #21
 8004e9a:	d531      	bpl.n	8004f00 <__ssputs_r+0xa0>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7ff ff85 	bl	8004dac <_malloc_r>
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	b950      	cbnz	r0, 8004ebc <__ssputs_r+0x5c>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	f8ca 3000 	str.w	r3, [sl]
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	464a      	mov	r2, r9
 8004ec0:	f000 fcc2 	bl	8005848 <memcpy>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	6126      	str	r6, [r4, #16]
 8004ed2:	6165      	str	r5, [r4, #20]
 8004ed4:	444e      	add	r6, r9
 8004ed6:	eba5 0509 	sub.w	r5, r5, r9
 8004eda:	6026      	str	r6, [r4, #0]
 8004edc:	60a5      	str	r5, [r4, #8]
 8004ede:	463e      	mov	r6, r7
 8004ee0:	42be      	cmp	r6, r7
 8004ee2:	d900      	bls.n	8004ee6 <__ssputs_r+0x86>
 8004ee4:	463e      	mov	r6, r7
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	4641      	mov	r1, r8
 8004eec:	f000 fcba 	bl	8005864 <memmove>
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	1b9b      	subs	r3, r3, r6
 8004ef6:	4432      	add	r2, r6
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6022      	str	r2, [r4, #0]
 8004efc:	2000      	movs	r0, #0
 8004efe:	e7db      	b.n	8004eb8 <__ssputs_r+0x58>
 8004f00:	462a      	mov	r2, r5
 8004f02:	f000 fcd5 	bl	80058b0 <_realloc_r>
 8004f06:	4606      	mov	r6, r0
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1e1      	bne.n	8004ed0 <__ssputs_r+0x70>
 8004f0c:	6921      	ldr	r1, [r4, #16]
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f7ff fefc 	bl	8004d0c <_free_r>
 8004f14:	e7c7      	b.n	8004ea6 <__ssputs_r+0x46>
	...

08004f18 <_svfiprintf_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4698      	mov	r8, r3
 8004f1e:	898b      	ldrh	r3, [r1, #12]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	b09d      	sub	sp, #116	; 0x74
 8004f24:	4607      	mov	r7, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	d50e      	bpl.n	8004f4a <_svfiprintf_r+0x32>
 8004f2c:	690b      	ldr	r3, [r1, #16]
 8004f2e:	b963      	cbnz	r3, 8004f4a <_svfiprintf_r+0x32>
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	f7ff ff3b 	bl	8004dac <_malloc_r>
 8004f36:	6028      	str	r0, [r5, #0]
 8004f38:	6128      	str	r0, [r5, #16]
 8004f3a:	b920      	cbnz	r0, 8004f46 <_svfiprintf_r+0x2e>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e0d1      	b.n	80050ea <_svfiprintf_r+0x1d2>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	616b      	str	r3, [r5, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	2320      	movs	r3, #32
 8004f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f58:	2330      	movs	r3, #48	; 0x30
 8004f5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005104 <_svfiprintf_r+0x1ec>
 8004f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f62:	f04f 0901 	mov.w	r9, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	469a      	mov	sl, r3
 8004f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6e:	b10a      	cbz	r2, 8004f74 <_svfiprintf_r+0x5c>
 8004f70:	2a25      	cmp	r2, #37	; 0x25
 8004f72:	d1f9      	bne.n	8004f68 <_svfiprintf_r+0x50>
 8004f74:	ebba 0b04 	subs.w	fp, sl, r4
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x7a>
 8004f7a:	465b      	mov	r3, fp
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff6d 	bl	8004e60 <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80aa 	beq.w	80050e0 <_svfiprintf_r+0x1c8>
 8004f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f8e:	445a      	add	r2, fp
 8004f90:	9209      	str	r2, [sp, #36]	; 0x24
 8004f92:	f89a 3000 	ldrb.w	r3, [sl]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a2 	beq.w	80050e0 <_svfiprintf_r+0x1c8>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa6:	f10a 0a01 	add.w	sl, sl, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb4:	4654      	mov	r4, sl
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbc:	4851      	ldr	r0, [pc, #324]	; (8005104 <_svfiprintf_r+0x1ec>)
 8004fbe:	f7fb f90f 	bl	80001e0 <memchr>
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	b9d8      	cbnz	r0, 8004ffe <_svfiprintf_r+0xe6>
 8004fc6:	06d0      	lsls	r0, r2, #27
 8004fc8:	bf44      	itt	mi
 8004fca:	2320      	movmi	r3, #32
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd0:	0711      	lsls	r1, r2, #28
 8004fd2:	bf44      	itt	mi
 8004fd4:	232b      	movmi	r3, #43	; 0x2b
 8004fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fda:	f89a 3000 	ldrb.w	r3, [sl]
 8004fde:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe0:	d015      	beq.n	800500e <_svfiprintf_r+0xf6>
 8004fe2:	9a07      	ldr	r2, [sp, #28]
 8004fe4:	4654      	mov	r4, sl
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4621      	mov	r1, r4
 8004fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff2:	3b30      	subs	r3, #48	; 0x30
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d94e      	bls.n	8005096 <_svfiprintf_r+0x17e>
 8004ff8:	b1b0      	cbz	r0, 8005028 <_svfiprintf_r+0x110>
 8004ffa:	9207      	str	r2, [sp, #28]
 8004ffc:	e014      	b.n	8005028 <_svfiprintf_r+0x110>
 8004ffe:	eba0 0308 	sub.w	r3, r0, r8
 8005002:	fa09 f303 	lsl.w	r3, r9, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	46a2      	mov	sl, r4
 800500c:	e7d2      	b.n	8004fb4 <_svfiprintf_r+0x9c>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9103      	str	r1, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbb      	ittet	lt
 800501a:	425b      	neglt	r3, r3
 800501c:	f042 0202 	orrlt.w	r2, r2, #2
 8005020:	9307      	strge	r3, [sp, #28]
 8005022:	9307      	strlt	r3, [sp, #28]
 8005024:	bfb8      	it	lt
 8005026:	9204      	strlt	r2, [sp, #16]
 8005028:	7823      	ldrb	r3, [r4, #0]
 800502a:	2b2e      	cmp	r3, #46	; 0x2e
 800502c:	d10c      	bne.n	8005048 <_svfiprintf_r+0x130>
 800502e:	7863      	ldrb	r3, [r4, #1]
 8005030:	2b2a      	cmp	r3, #42	; 0x2a
 8005032:	d135      	bne.n	80050a0 <_svfiprintf_r+0x188>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfb8      	it	lt
 8005040:	f04f 33ff 	movlt.w	r3, #4294967295
 8005044:	3402      	adds	r4, #2
 8005046:	9305      	str	r3, [sp, #20]
 8005048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005114 <_svfiprintf_r+0x1fc>
 800504c:	7821      	ldrb	r1, [r4, #0]
 800504e:	2203      	movs	r2, #3
 8005050:	4650      	mov	r0, sl
 8005052:	f7fb f8c5 	bl	80001e0 <memchr>
 8005056:	b140      	cbz	r0, 800506a <_svfiprintf_r+0x152>
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	eba0 000a 	sub.w	r0, r0, sl
 800505e:	fa03 f000 	lsl.w	r0, r3, r0
 8005062:	9b04      	ldr	r3, [sp, #16]
 8005064:	4303      	orrs	r3, r0
 8005066:	3401      	adds	r4, #1
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506e:	4826      	ldr	r0, [pc, #152]	; (8005108 <_svfiprintf_r+0x1f0>)
 8005070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005074:	2206      	movs	r2, #6
 8005076:	f7fb f8b3 	bl	80001e0 <memchr>
 800507a:	2800      	cmp	r0, #0
 800507c:	d038      	beq.n	80050f0 <_svfiprintf_r+0x1d8>
 800507e:	4b23      	ldr	r3, [pc, #140]	; (800510c <_svfiprintf_r+0x1f4>)
 8005080:	bb1b      	cbnz	r3, 80050ca <_svfiprintf_r+0x1b2>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	3307      	adds	r3, #7
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	3308      	adds	r3, #8
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005090:	4433      	add	r3, r6
 8005092:	9309      	str	r3, [sp, #36]	; 0x24
 8005094:	e767      	b.n	8004f66 <_svfiprintf_r+0x4e>
 8005096:	fb0c 3202 	mla	r2, ip, r2, r3
 800509a:	460c      	mov	r4, r1
 800509c:	2001      	movs	r0, #1
 800509e:	e7a5      	b.n	8004fec <_svfiprintf_r+0xd4>
 80050a0:	2300      	movs	r3, #0
 80050a2:	3401      	adds	r4, #1
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0c0a 	mov.w	ip, #10
 80050ac:	4620      	mov	r0, r4
 80050ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b2:	3a30      	subs	r2, #48	; 0x30
 80050b4:	2a09      	cmp	r2, #9
 80050b6:	d903      	bls.n	80050c0 <_svfiprintf_r+0x1a8>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0c5      	beq.n	8005048 <_svfiprintf_r+0x130>
 80050bc:	9105      	str	r1, [sp, #20]
 80050be:	e7c3      	b.n	8005048 <_svfiprintf_r+0x130>
 80050c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c4:	4604      	mov	r4, r0
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7f0      	b.n	80050ac <_svfiprintf_r+0x194>
 80050ca:	ab03      	add	r3, sp, #12
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <_svfiprintf_r+0x1f8>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	4638      	mov	r0, r7
 80050d6:	f3af 8000 	nop.w
 80050da:	1c42      	adds	r2, r0, #1
 80050dc:	4606      	mov	r6, r0
 80050de:	d1d6      	bne.n	800508e <_svfiprintf_r+0x176>
 80050e0:	89ab      	ldrh	r3, [r5, #12]
 80050e2:	065b      	lsls	r3, r3, #25
 80050e4:	f53f af2c 	bmi.w	8004f40 <_svfiprintf_r+0x28>
 80050e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ea:	b01d      	add	sp, #116	; 0x74
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	ab03      	add	r3, sp, #12
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	462a      	mov	r2, r5
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_svfiprintf_r+0x1f8>)
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	4638      	mov	r0, r7
 80050fc:	f000 f9d4 	bl	80054a8 <_printf_i>
 8005100:	e7eb      	b.n	80050da <_svfiprintf_r+0x1c2>
 8005102:	bf00      	nop
 8005104:	08006318 	.word	0x08006318
 8005108:	08006322 	.word	0x08006322
 800510c:	00000000 	.word	0x00000000
 8005110:	08004e61 	.word	0x08004e61
 8005114:	0800631e 	.word	0x0800631e

08005118 <__sfputc_r>:
 8005118:	6893      	ldr	r3, [r2, #8]
 800511a:	3b01      	subs	r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	b410      	push	{r4}
 8005120:	6093      	str	r3, [r2, #8]
 8005122:	da08      	bge.n	8005136 <__sfputc_r+0x1e>
 8005124:	6994      	ldr	r4, [r2, #24]
 8005126:	42a3      	cmp	r3, r4
 8005128:	db01      	blt.n	800512e <__sfputc_r+0x16>
 800512a:	290a      	cmp	r1, #10
 800512c:	d103      	bne.n	8005136 <__sfputc_r+0x1e>
 800512e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005132:	f7ff bb0d 	b.w	8004750 <__swbuf_r>
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	1c58      	adds	r0, r3, #1
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	7019      	strb	r1, [r3, #0]
 800513e:	4608      	mov	r0, r1
 8005140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005144:	4770      	bx	lr

08005146 <__sfputs_r>:
 8005146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005148:	4606      	mov	r6, r0
 800514a:	460f      	mov	r7, r1
 800514c:	4614      	mov	r4, r2
 800514e:	18d5      	adds	r5, r2, r3
 8005150:	42ac      	cmp	r4, r5
 8005152:	d101      	bne.n	8005158 <__sfputs_r+0x12>
 8005154:	2000      	movs	r0, #0
 8005156:	e007      	b.n	8005168 <__sfputs_r+0x22>
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	463a      	mov	r2, r7
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ffda 	bl	8005118 <__sfputc_r>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d1f3      	bne.n	8005150 <__sfputs_r+0xa>
 8005168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800516c <_vfiprintf_r>:
 800516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005170:	460d      	mov	r5, r1
 8005172:	b09d      	sub	sp, #116	; 0x74
 8005174:	4614      	mov	r4, r2
 8005176:	4698      	mov	r8, r3
 8005178:	4606      	mov	r6, r0
 800517a:	b118      	cbz	r0, 8005184 <_vfiprintf_r+0x18>
 800517c:	6983      	ldr	r3, [r0, #24]
 800517e:	b90b      	cbnz	r3, 8005184 <_vfiprintf_r+0x18>
 8005180:	f7ff fcc0 	bl	8004b04 <__sinit>
 8005184:	4b89      	ldr	r3, [pc, #548]	; (80053ac <_vfiprintf_r+0x240>)
 8005186:	429d      	cmp	r5, r3
 8005188:	d11b      	bne.n	80051c2 <_vfiprintf_r+0x56>
 800518a:	6875      	ldr	r5, [r6, #4]
 800518c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800518e:	07d9      	lsls	r1, r3, #31
 8005190:	d405      	bmi.n	800519e <_vfiprintf_r+0x32>
 8005192:	89ab      	ldrh	r3, [r5, #12]
 8005194:	059a      	lsls	r2, r3, #22
 8005196:	d402      	bmi.n	800519e <_vfiprintf_r+0x32>
 8005198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519a:	f7ff fd51 	bl	8004c40 <__retarget_lock_acquire_recursive>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	071b      	lsls	r3, r3, #28
 80051a2:	d501      	bpl.n	80051a8 <_vfiprintf_r+0x3c>
 80051a4:	692b      	ldr	r3, [r5, #16]
 80051a6:	b9eb      	cbnz	r3, 80051e4 <_vfiprintf_r+0x78>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7ff fb22 	bl	80047f4 <__swsetup_r>
 80051b0:	b1c0      	cbz	r0, 80051e4 <_vfiprintf_r+0x78>
 80051b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b4:	07dc      	lsls	r4, r3, #31
 80051b6:	d50e      	bpl.n	80051d6 <_vfiprintf_r+0x6a>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	b01d      	add	sp, #116	; 0x74
 80051be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c2:	4b7b      	ldr	r3, [pc, #492]	; (80053b0 <_vfiprintf_r+0x244>)
 80051c4:	429d      	cmp	r5, r3
 80051c6:	d101      	bne.n	80051cc <_vfiprintf_r+0x60>
 80051c8:	68b5      	ldr	r5, [r6, #8]
 80051ca:	e7df      	b.n	800518c <_vfiprintf_r+0x20>
 80051cc:	4b79      	ldr	r3, [pc, #484]	; (80053b4 <_vfiprintf_r+0x248>)
 80051ce:	429d      	cmp	r5, r3
 80051d0:	bf08      	it	eq
 80051d2:	68f5      	ldreq	r5, [r6, #12]
 80051d4:	e7da      	b.n	800518c <_vfiprintf_r+0x20>
 80051d6:	89ab      	ldrh	r3, [r5, #12]
 80051d8:	0598      	lsls	r0, r3, #22
 80051da:	d4ed      	bmi.n	80051b8 <_vfiprintf_r+0x4c>
 80051dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051de:	f7ff fd30 	bl	8004c42 <__retarget_lock_release_recursive>
 80051e2:	e7e9      	b.n	80051b8 <_vfiprintf_r+0x4c>
 80051e4:	2300      	movs	r3, #0
 80051e6:	9309      	str	r3, [sp, #36]	; 0x24
 80051e8:	2320      	movs	r3, #32
 80051ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f2:	2330      	movs	r3, #48	; 0x30
 80051f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053b8 <_vfiprintf_r+0x24c>
 80051f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051fc:	f04f 0901 	mov.w	r9, #1
 8005200:	4623      	mov	r3, r4
 8005202:	469a      	mov	sl, r3
 8005204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005208:	b10a      	cbz	r2, 800520e <_vfiprintf_r+0xa2>
 800520a:	2a25      	cmp	r2, #37	; 0x25
 800520c:	d1f9      	bne.n	8005202 <_vfiprintf_r+0x96>
 800520e:	ebba 0b04 	subs.w	fp, sl, r4
 8005212:	d00b      	beq.n	800522c <_vfiprintf_r+0xc0>
 8005214:	465b      	mov	r3, fp
 8005216:	4622      	mov	r2, r4
 8005218:	4629      	mov	r1, r5
 800521a:	4630      	mov	r0, r6
 800521c:	f7ff ff93 	bl	8005146 <__sfputs_r>
 8005220:	3001      	adds	r0, #1
 8005222:	f000 80aa 	beq.w	800537a <_vfiprintf_r+0x20e>
 8005226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005228:	445a      	add	r2, fp
 800522a:	9209      	str	r2, [sp, #36]	; 0x24
 800522c:	f89a 3000 	ldrb.w	r3, [sl]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80a2 	beq.w	800537a <_vfiprintf_r+0x20e>
 8005236:	2300      	movs	r3, #0
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005240:	f10a 0a01 	add.w	sl, sl, #1
 8005244:	9304      	str	r3, [sp, #16]
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800524c:	931a      	str	r3, [sp, #104]	; 0x68
 800524e:	4654      	mov	r4, sl
 8005250:	2205      	movs	r2, #5
 8005252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005256:	4858      	ldr	r0, [pc, #352]	; (80053b8 <_vfiprintf_r+0x24c>)
 8005258:	f7fa ffc2 	bl	80001e0 <memchr>
 800525c:	9a04      	ldr	r2, [sp, #16]
 800525e:	b9d8      	cbnz	r0, 8005298 <_vfiprintf_r+0x12c>
 8005260:	06d1      	lsls	r1, r2, #27
 8005262:	bf44      	itt	mi
 8005264:	2320      	movmi	r3, #32
 8005266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526a:	0713      	lsls	r3, r2, #28
 800526c:	bf44      	itt	mi
 800526e:	232b      	movmi	r3, #43	; 0x2b
 8005270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005274:	f89a 3000 	ldrb.w	r3, [sl]
 8005278:	2b2a      	cmp	r3, #42	; 0x2a
 800527a:	d015      	beq.n	80052a8 <_vfiprintf_r+0x13c>
 800527c:	9a07      	ldr	r2, [sp, #28]
 800527e:	4654      	mov	r4, sl
 8005280:	2000      	movs	r0, #0
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4621      	mov	r1, r4
 8005288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800528c:	3b30      	subs	r3, #48	; 0x30
 800528e:	2b09      	cmp	r3, #9
 8005290:	d94e      	bls.n	8005330 <_vfiprintf_r+0x1c4>
 8005292:	b1b0      	cbz	r0, 80052c2 <_vfiprintf_r+0x156>
 8005294:	9207      	str	r2, [sp, #28]
 8005296:	e014      	b.n	80052c2 <_vfiprintf_r+0x156>
 8005298:	eba0 0308 	sub.w	r3, r0, r8
 800529c:	fa09 f303 	lsl.w	r3, r9, r3
 80052a0:	4313      	orrs	r3, r2
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	46a2      	mov	sl, r4
 80052a6:	e7d2      	b.n	800524e <_vfiprintf_r+0xe2>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	1d19      	adds	r1, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	9103      	str	r1, [sp, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bfbb      	ittet	lt
 80052b4:	425b      	neglt	r3, r3
 80052b6:	f042 0202 	orrlt.w	r2, r2, #2
 80052ba:	9307      	strge	r3, [sp, #28]
 80052bc:	9307      	strlt	r3, [sp, #28]
 80052be:	bfb8      	it	lt
 80052c0:	9204      	strlt	r2, [sp, #16]
 80052c2:	7823      	ldrb	r3, [r4, #0]
 80052c4:	2b2e      	cmp	r3, #46	; 0x2e
 80052c6:	d10c      	bne.n	80052e2 <_vfiprintf_r+0x176>
 80052c8:	7863      	ldrb	r3, [r4, #1]
 80052ca:	2b2a      	cmp	r3, #42	; 0x2a
 80052cc:	d135      	bne.n	800533a <_vfiprintf_r+0x1ce>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	1d1a      	adds	r2, r3, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	9203      	str	r2, [sp, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfb8      	it	lt
 80052da:	f04f 33ff 	movlt.w	r3, #4294967295
 80052de:	3402      	adds	r4, #2
 80052e0:	9305      	str	r3, [sp, #20]
 80052e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053c8 <_vfiprintf_r+0x25c>
 80052e6:	7821      	ldrb	r1, [r4, #0]
 80052e8:	2203      	movs	r2, #3
 80052ea:	4650      	mov	r0, sl
 80052ec:	f7fa ff78 	bl	80001e0 <memchr>
 80052f0:	b140      	cbz	r0, 8005304 <_vfiprintf_r+0x198>
 80052f2:	2340      	movs	r3, #64	; 0x40
 80052f4:	eba0 000a 	sub.w	r0, r0, sl
 80052f8:	fa03 f000 	lsl.w	r0, r3, r0
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	4303      	orrs	r3, r0
 8005300:	3401      	adds	r4, #1
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005308:	482c      	ldr	r0, [pc, #176]	; (80053bc <_vfiprintf_r+0x250>)
 800530a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530e:	2206      	movs	r2, #6
 8005310:	f7fa ff66 	bl	80001e0 <memchr>
 8005314:	2800      	cmp	r0, #0
 8005316:	d03f      	beq.n	8005398 <_vfiprintf_r+0x22c>
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <_vfiprintf_r+0x254>)
 800531a:	bb1b      	cbnz	r3, 8005364 <_vfiprintf_r+0x1f8>
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	3307      	adds	r3, #7
 8005320:	f023 0307 	bic.w	r3, r3, #7
 8005324:	3308      	adds	r3, #8
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532a:	443b      	add	r3, r7
 800532c:	9309      	str	r3, [sp, #36]	; 0x24
 800532e:	e767      	b.n	8005200 <_vfiprintf_r+0x94>
 8005330:	fb0c 3202 	mla	r2, ip, r2, r3
 8005334:	460c      	mov	r4, r1
 8005336:	2001      	movs	r0, #1
 8005338:	e7a5      	b.n	8005286 <_vfiprintf_r+0x11a>
 800533a:	2300      	movs	r3, #0
 800533c:	3401      	adds	r4, #1
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	4619      	mov	r1, r3
 8005342:	f04f 0c0a 	mov.w	ip, #10
 8005346:	4620      	mov	r0, r4
 8005348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534c:	3a30      	subs	r2, #48	; 0x30
 800534e:	2a09      	cmp	r2, #9
 8005350:	d903      	bls.n	800535a <_vfiprintf_r+0x1ee>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0c5      	beq.n	80052e2 <_vfiprintf_r+0x176>
 8005356:	9105      	str	r1, [sp, #20]
 8005358:	e7c3      	b.n	80052e2 <_vfiprintf_r+0x176>
 800535a:	fb0c 2101 	mla	r1, ip, r1, r2
 800535e:	4604      	mov	r4, r0
 8005360:	2301      	movs	r3, #1
 8005362:	e7f0      	b.n	8005346 <_vfiprintf_r+0x1da>
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	462a      	mov	r2, r5
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <_vfiprintf_r+0x258>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	4630      	mov	r0, r6
 8005370:	f3af 8000 	nop.w
 8005374:	4607      	mov	r7, r0
 8005376:	1c78      	adds	r0, r7, #1
 8005378:	d1d6      	bne.n	8005328 <_vfiprintf_r+0x1bc>
 800537a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800537c:	07d9      	lsls	r1, r3, #31
 800537e:	d405      	bmi.n	800538c <_vfiprintf_r+0x220>
 8005380:	89ab      	ldrh	r3, [r5, #12]
 8005382:	059a      	lsls	r2, r3, #22
 8005384:	d402      	bmi.n	800538c <_vfiprintf_r+0x220>
 8005386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005388:	f7ff fc5b 	bl	8004c42 <__retarget_lock_release_recursive>
 800538c:	89ab      	ldrh	r3, [r5, #12]
 800538e:	065b      	lsls	r3, r3, #25
 8005390:	f53f af12 	bmi.w	80051b8 <_vfiprintf_r+0x4c>
 8005394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005396:	e711      	b.n	80051bc <_vfiprintf_r+0x50>
 8005398:	ab03      	add	r3, sp, #12
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	462a      	mov	r2, r5
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <_vfiprintf_r+0x258>)
 80053a0:	a904      	add	r1, sp, #16
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 f880 	bl	80054a8 <_printf_i>
 80053a8:	e7e4      	b.n	8005374 <_vfiprintf_r+0x208>
 80053aa:	bf00      	nop
 80053ac:	080062d8 	.word	0x080062d8
 80053b0:	080062f8 	.word	0x080062f8
 80053b4:	080062b8 	.word	0x080062b8
 80053b8:	08006318 	.word	0x08006318
 80053bc:	08006322 	.word	0x08006322
 80053c0:	00000000 	.word	0x00000000
 80053c4:	08005147 	.word	0x08005147
 80053c8:	0800631e 	.word	0x0800631e

080053cc <_printf_common>:
 80053cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	4616      	mov	r6, r2
 80053d2:	4699      	mov	r9, r3
 80053d4:	688a      	ldr	r2, [r1, #8]
 80053d6:	690b      	ldr	r3, [r1, #16]
 80053d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053dc:	4293      	cmp	r3, r2
 80053de:	bfb8      	it	lt
 80053e0:	4613      	movlt	r3, r2
 80053e2:	6033      	str	r3, [r6, #0]
 80053e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053e8:	4607      	mov	r7, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	b10a      	cbz	r2, 80053f2 <_printf_common+0x26>
 80053ee:	3301      	adds	r3, #1
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	0699      	lsls	r1, r3, #26
 80053f6:	bf42      	ittt	mi
 80053f8:	6833      	ldrmi	r3, [r6, #0]
 80053fa:	3302      	addmi	r3, #2
 80053fc:	6033      	strmi	r3, [r6, #0]
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	f015 0506 	ands.w	r5, r5, #6
 8005404:	d106      	bne.n	8005414 <_printf_common+0x48>
 8005406:	f104 0a19 	add.w	sl, r4, #25
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	6832      	ldr	r2, [r6, #0]
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	42ab      	cmp	r3, r5
 8005412:	dc26      	bgt.n	8005462 <_printf_common+0x96>
 8005414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005418:	1e13      	subs	r3, r2, #0
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	bf18      	it	ne
 800541e:	2301      	movne	r3, #1
 8005420:	0692      	lsls	r2, r2, #26
 8005422:	d42b      	bmi.n	800547c <_printf_common+0xb0>
 8005424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005428:	4649      	mov	r1, r9
 800542a:	4638      	mov	r0, r7
 800542c:	47c0      	blx	r8
 800542e:	3001      	adds	r0, #1
 8005430:	d01e      	beq.n	8005470 <_printf_common+0xa4>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	68e5      	ldr	r5, [r4, #12]
 8005436:	6832      	ldr	r2, [r6, #0]
 8005438:	f003 0306 	and.w	r3, r3, #6
 800543c:	2b04      	cmp	r3, #4
 800543e:	bf08      	it	eq
 8005440:	1aad      	subeq	r5, r5, r2
 8005442:	68a3      	ldr	r3, [r4, #8]
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	bf0c      	ite	eq
 8005448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800544c:	2500      	movne	r5, #0
 800544e:	4293      	cmp	r3, r2
 8005450:	bfc4      	itt	gt
 8005452:	1a9b      	subgt	r3, r3, r2
 8005454:	18ed      	addgt	r5, r5, r3
 8005456:	2600      	movs	r6, #0
 8005458:	341a      	adds	r4, #26
 800545a:	42b5      	cmp	r5, r6
 800545c:	d11a      	bne.n	8005494 <_printf_common+0xc8>
 800545e:	2000      	movs	r0, #0
 8005460:	e008      	b.n	8005474 <_printf_common+0xa8>
 8005462:	2301      	movs	r3, #1
 8005464:	4652      	mov	r2, sl
 8005466:	4649      	mov	r1, r9
 8005468:	4638      	mov	r0, r7
 800546a:	47c0      	blx	r8
 800546c:	3001      	adds	r0, #1
 800546e:	d103      	bne.n	8005478 <_printf_common+0xac>
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005478:	3501      	adds	r5, #1
 800547a:	e7c6      	b.n	800540a <_printf_common+0x3e>
 800547c:	18e1      	adds	r1, r4, r3
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	2030      	movs	r0, #48	; 0x30
 8005482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005486:	4422      	add	r2, r4
 8005488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800548c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005490:	3302      	adds	r3, #2
 8005492:	e7c7      	b.n	8005424 <_printf_common+0x58>
 8005494:	2301      	movs	r3, #1
 8005496:	4622      	mov	r2, r4
 8005498:	4649      	mov	r1, r9
 800549a:	4638      	mov	r0, r7
 800549c:	47c0      	blx	r8
 800549e:	3001      	adds	r0, #1
 80054a0:	d0e6      	beq.n	8005470 <_printf_common+0xa4>
 80054a2:	3601      	adds	r6, #1
 80054a4:	e7d9      	b.n	800545a <_printf_common+0x8e>
	...

080054a8 <_printf_i>:
 80054a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ac:	460c      	mov	r4, r1
 80054ae:	4691      	mov	r9, r2
 80054b0:	7e27      	ldrb	r7, [r4, #24]
 80054b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054b4:	2f78      	cmp	r7, #120	; 0x78
 80054b6:	4680      	mov	r8, r0
 80054b8:	469a      	mov	sl, r3
 80054ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054be:	d807      	bhi.n	80054d0 <_printf_i+0x28>
 80054c0:	2f62      	cmp	r7, #98	; 0x62
 80054c2:	d80a      	bhi.n	80054da <_printf_i+0x32>
 80054c4:	2f00      	cmp	r7, #0
 80054c6:	f000 80d8 	beq.w	800567a <_printf_i+0x1d2>
 80054ca:	2f58      	cmp	r7, #88	; 0x58
 80054cc:	f000 80a3 	beq.w	8005616 <_printf_i+0x16e>
 80054d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054d8:	e03a      	b.n	8005550 <_printf_i+0xa8>
 80054da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054de:	2b15      	cmp	r3, #21
 80054e0:	d8f6      	bhi.n	80054d0 <_printf_i+0x28>
 80054e2:	a001      	add	r0, pc, #4	; (adr r0, 80054e8 <_printf_i+0x40>)
 80054e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054e8:	08005541 	.word	0x08005541
 80054ec:	08005555 	.word	0x08005555
 80054f0:	080054d1 	.word	0x080054d1
 80054f4:	080054d1 	.word	0x080054d1
 80054f8:	080054d1 	.word	0x080054d1
 80054fc:	080054d1 	.word	0x080054d1
 8005500:	08005555 	.word	0x08005555
 8005504:	080054d1 	.word	0x080054d1
 8005508:	080054d1 	.word	0x080054d1
 800550c:	080054d1 	.word	0x080054d1
 8005510:	080054d1 	.word	0x080054d1
 8005514:	08005661 	.word	0x08005661
 8005518:	08005585 	.word	0x08005585
 800551c:	08005643 	.word	0x08005643
 8005520:	080054d1 	.word	0x080054d1
 8005524:	080054d1 	.word	0x080054d1
 8005528:	08005683 	.word	0x08005683
 800552c:	080054d1 	.word	0x080054d1
 8005530:	08005585 	.word	0x08005585
 8005534:	080054d1 	.word	0x080054d1
 8005538:	080054d1 	.word	0x080054d1
 800553c:	0800564b 	.word	0x0800564b
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	1d1a      	adds	r2, r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	600a      	str	r2, [r1, #0]
 8005548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800554c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005550:	2301      	movs	r3, #1
 8005552:	e0a3      	b.n	800569c <_printf_i+0x1f4>
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	6808      	ldr	r0, [r1, #0]
 8005558:	062e      	lsls	r6, r5, #24
 800555a:	f100 0304 	add.w	r3, r0, #4
 800555e:	d50a      	bpl.n	8005576 <_printf_i+0xce>
 8005560:	6805      	ldr	r5, [r0, #0]
 8005562:	600b      	str	r3, [r1, #0]
 8005564:	2d00      	cmp	r5, #0
 8005566:	da03      	bge.n	8005570 <_printf_i+0xc8>
 8005568:	232d      	movs	r3, #45	; 0x2d
 800556a:	426d      	negs	r5, r5
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005570:	485e      	ldr	r0, [pc, #376]	; (80056ec <_printf_i+0x244>)
 8005572:	230a      	movs	r3, #10
 8005574:	e019      	b.n	80055aa <_printf_i+0x102>
 8005576:	f015 0f40 	tst.w	r5, #64	; 0x40
 800557a:	6805      	ldr	r5, [r0, #0]
 800557c:	600b      	str	r3, [r1, #0]
 800557e:	bf18      	it	ne
 8005580:	b22d      	sxthne	r5, r5
 8005582:	e7ef      	b.n	8005564 <_printf_i+0xbc>
 8005584:	680b      	ldr	r3, [r1, #0]
 8005586:	6825      	ldr	r5, [r4, #0]
 8005588:	1d18      	adds	r0, r3, #4
 800558a:	6008      	str	r0, [r1, #0]
 800558c:	0628      	lsls	r0, r5, #24
 800558e:	d501      	bpl.n	8005594 <_printf_i+0xec>
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	e002      	b.n	800559a <_printf_i+0xf2>
 8005594:	0669      	lsls	r1, r5, #25
 8005596:	d5fb      	bpl.n	8005590 <_printf_i+0xe8>
 8005598:	881d      	ldrh	r5, [r3, #0]
 800559a:	4854      	ldr	r0, [pc, #336]	; (80056ec <_printf_i+0x244>)
 800559c:	2f6f      	cmp	r7, #111	; 0x6f
 800559e:	bf0c      	ite	eq
 80055a0:	2308      	moveq	r3, #8
 80055a2:	230a      	movne	r3, #10
 80055a4:	2100      	movs	r1, #0
 80055a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055aa:	6866      	ldr	r6, [r4, #4]
 80055ac:	60a6      	str	r6, [r4, #8]
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	bfa2      	ittt	ge
 80055b2:	6821      	ldrge	r1, [r4, #0]
 80055b4:	f021 0104 	bicge.w	r1, r1, #4
 80055b8:	6021      	strge	r1, [r4, #0]
 80055ba:	b90d      	cbnz	r5, 80055c0 <_printf_i+0x118>
 80055bc:	2e00      	cmp	r6, #0
 80055be:	d04d      	beq.n	800565c <_printf_i+0x1b4>
 80055c0:	4616      	mov	r6, r2
 80055c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80055c6:	fb03 5711 	mls	r7, r3, r1, r5
 80055ca:	5dc7      	ldrb	r7, [r0, r7]
 80055cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055d0:	462f      	mov	r7, r5
 80055d2:	42bb      	cmp	r3, r7
 80055d4:	460d      	mov	r5, r1
 80055d6:	d9f4      	bls.n	80055c2 <_printf_i+0x11a>
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d10b      	bne.n	80055f4 <_printf_i+0x14c>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	07df      	lsls	r7, r3, #31
 80055e0:	d508      	bpl.n	80055f4 <_printf_i+0x14c>
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	6861      	ldr	r1, [r4, #4]
 80055e6:	4299      	cmp	r1, r3
 80055e8:	bfde      	ittt	le
 80055ea:	2330      	movle	r3, #48	; 0x30
 80055ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055f4:	1b92      	subs	r2, r2, r6
 80055f6:	6122      	str	r2, [r4, #16]
 80055f8:	f8cd a000 	str.w	sl, [sp]
 80055fc:	464b      	mov	r3, r9
 80055fe:	aa03      	add	r2, sp, #12
 8005600:	4621      	mov	r1, r4
 8005602:	4640      	mov	r0, r8
 8005604:	f7ff fee2 	bl	80053cc <_printf_common>
 8005608:	3001      	adds	r0, #1
 800560a:	d14c      	bne.n	80056a6 <_printf_i+0x1fe>
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	b004      	add	sp, #16
 8005612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005616:	4835      	ldr	r0, [pc, #212]	; (80056ec <_printf_i+0x244>)
 8005618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	680e      	ldr	r6, [r1, #0]
 8005620:	061f      	lsls	r7, r3, #24
 8005622:	f856 5b04 	ldr.w	r5, [r6], #4
 8005626:	600e      	str	r6, [r1, #0]
 8005628:	d514      	bpl.n	8005654 <_printf_i+0x1ac>
 800562a:	07d9      	lsls	r1, r3, #31
 800562c:	bf44      	itt	mi
 800562e:	f043 0320 	orrmi.w	r3, r3, #32
 8005632:	6023      	strmi	r3, [r4, #0]
 8005634:	b91d      	cbnz	r5, 800563e <_printf_i+0x196>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	f023 0320 	bic.w	r3, r3, #32
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	2310      	movs	r3, #16
 8005640:	e7b0      	b.n	80055a4 <_printf_i+0xfc>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	2378      	movs	r3, #120	; 0x78
 800564c:	4828      	ldr	r0, [pc, #160]	; (80056f0 <_printf_i+0x248>)
 800564e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005652:	e7e3      	b.n	800561c <_printf_i+0x174>
 8005654:	065e      	lsls	r6, r3, #25
 8005656:	bf48      	it	mi
 8005658:	b2ad      	uxthmi	r5, r5
 800565a:	e7e6      	b.n	800562a <_printf_i+0x182>
 800565c:	4616      	mov	r6, r2
 800565e:	e7bb      	b.n	80055d8 <_printf_i+0x130>
 8005660:	680b      	ldr	r3, [r1, #0]
 8005662:	6826      	ldr	r6, [r4, #0]
 8005664:	6960      	ldr	r0, [r4, #20]
 8005666:	1d1d      	adds	r5, r3, #4
 8005668:	600d      	str	r5, [r1, #0]
 800566a:	0635      	lsls	r5, r6, #24
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	d501      	bpl.n	8005674 <_printf_i+0x1cc>
 8005670:	6018      	str	r0, [r3, #0]
 8005672:	e002      	b.n	800567a <_printf_i+0x1d2>
 8005674:	0671      	lsls	r1, r6, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0x1c8>
 8005678:	8018      	strh	r0, [r3, #0]
 800567a:	2300      	movs	r3, #0
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	4616      	mov	r6, r2
 8005680:	e7ba      	b.n	80055f8 <_printf_i+0x150>
 8005682:	680b      	ldr	r3, [r1, #0]
 8005684:	1d1a      	adds	r2, r3, #4
 8005686:	600a      	str	r2, [r1, #0]
 8005688:	681e      	ldr	r6, [r3, #0]
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	2100      	movs	r1, #0
 800568e:	4630      	mov	r0, r6
 8005690:	f7fa fda6 	bl	80001e0 <memchr>
 8005694:	b108      	cbz	r0, 800569a <_printf_i+0x1f2>
 8005696:	1b80      	subs	r0, r0, r6
 8005698:	6060      	str	r0, [r4, #4]
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	6123      	str	r3, [r4, #16]
 800569e:	2300      	movs	r3, #0
 80056a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a4:	e7a8      	b.n	80055f8 <_printf_i+0x150>
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	4632      	mov	r2, r6
 80056aa:	4649      	mov	r1, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	47d0      	blx	sl
 80056b0:	3001      	adds	r0, #1
 80056b2:	d0ab      	beq.n	800560c <_printf_i+0x164>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	079b      	lsls	r3, r3, #30
 80056b8:	d413      	bmi.n	80056e2 <_printf_i+0x23a>
 80056ba:	68e0      	ldr	r0, [r4, #12]
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	4298      	cmp	r0, r3
 80056c0:	bfb8      	it	lt
 80056c2:	4618      	movlt	r0, r3
 80056c4:	e7a4      	b.n	8005610 <_printf_i+0x168>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4632      	mov	r2, r6
 80056ca:	4649      	mov	r1, r9
 80056cc:	4640      	mov	r0, r8
 80056ce:	47d0      	blx	sl
 80056d0:	3001      	adds	r0, #1
 80056d2:	d09b      	beq.n	800560c <_printf_i+0x164>
 80056d4:	3501      	adds	r5, #1
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	9903      	ldr	r1, [sp, #12]
 80056da:	1a5b      	subs	r3, r3, r1
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dcf2      	bgt.n	80056c6 <_printf_i+0x21e>
 80056e0:	e7eb      	b.n	80056ba <_printf_i+0x212>
 80056e2:	2500      	movs	r5, #0
 80056e4:	f104 0619 	add.w	r6, r4, #25
 80056e8:	e7f5      	b.n	80056d6 <_printf_i+0x22e>
 80056ea:	bf00      	nop
 80056ec:	08006329 	.word	0x08006329
 80056f0:	0800633a 	.word	0x0800633a

080056f4 <_sbrk_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	; (8005710 <_sbrk_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fc f872 	bl	80017e8 <_sbrk>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_sbrk_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_sbrk_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000254 	.word	0x20000254

08005714 <__sread>:
 8005714:	b510      	push	{r4, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800571c:	f000 f8ee 	bl	80058fc <_read_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	bfab      	itete	ge
 8005724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005726:	89a3      	ldrhlt	r3, [r4, #12]
 8005728:	181b      	addge	r3, r3, r0
 800572a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800572e:	bfac      	ite	ge
 8005730:	6563      	strge	r3, [r4, #84]	; 0x54
 8005732:	81a3      	strhlt	r3, [r4, #12]
 8005734:	bd10      	pop	{r4, pc}

08005736 <__swrite>:
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	461f      	mov	r7, r3
 800573c:	898b      	ldrh	r3, [r1, #12]
 800573e:	05db      	lsls	r3, r3, #23
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	4616      	mov	r6, r2
 8005746:	d505      	bpl.n	8005754 <__swrite+0x1e>
 8005748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574c:	2302      	movs	r3, #2
 800574e:	2200      	movs	r2, #0
 8005750:	f000 f868 	bl	8005824 <_lseek_r>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	4628      	mov	r0, r5
 8005766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576a:	f000 b817 	b.w	800579c <_write_r>

0800576e <__sseek>:
 800576e:	b510      	push	{r4, lr}
 8005770:	460c      	mov	r4, r1
 8005772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005776:	f000 f855 	bl	8005824 <_lseek_r>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	bf15      	itete	ne
 8005780:	6560      	strne	r0, [r4, #84]	; 0x54
 8005782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800578a:	81a3      	strheq	r3, [r4, #12]
 800578c:	bf18      	it	ne
 800578e:	81a3      	strhne	r3, [r4, #12]
 8005790:	bd10      	pop	{r4, pc}

08005792 <__sclose>:
 8005792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005796:	f000 b813 	b.w	80057c0 <_close_r>
	...

0800579c <_write_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4d07      	ldr	r5, [pc, #28]	; (80057bc <_write_r+0x20>)
 80057a0:	4604      	mov	r4, r0
 80057a2:	4608      	mov	r0, r1
 80057a4:	4611      	mov	r1, r2
 80057a6:	2200      	movs	r2, #0
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f7fb ffcb 	bl	8001746 <_write>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_write_r+0x1e>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_write_r+0x1e>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	20000254 	.word	0x20000254

080057c0 <_close_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d06      	ldr	r5, [pc, #24]	; (80057dc <_close_r+0x1c>)
 80057c4:	2300      	movs	r3, #0
 80057c6:	4604      	mov	r4, r0
 80057c8:	4608      	mov	r0, r1
 80057ca:	602b      	str	r3, [r5, #0]
 80057cc:	f7fb ffd7 	bl	800177e <_close>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_close_r+0x1a>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_close_r+0x1a>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20000254 	.word	0x20000254

080057e0 <_fstat_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d07      	ldr	r5, [pc, #28]	; (8005800 <_fstat_r+0x20>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	f7fb ffd2 	bl	8001796 <_fstat>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d102      	bne.n	80057fc <_fstat_r+0x1c>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	b103      	cbz	r3, 80057fc <_fstat_r+0x1c>
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	bd38      	pop	{r3, r4, r5, pc}
 80057fe:	bf00      	nop
 8005800:	20000254 	.word	0x20000254

08005804 <_isatty_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_isatty_r+0x1c>)
 8005808:	2300      	movs	r3, #0
 800580a:	4604      	mov	r4, r0
 800580c:	4608      	mov	r0, r1
 800580e:	602b      	str	r3, [r5, #0]
 8005810:	f7fb ffd1 	bl	80017b6 <_isatty>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_isatty_r+0x1a>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_isatty_r+0x1a>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000254 	.word	0x20000254

08005824 <_lseek_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d07      	ldr	r5, [pc, #28]	; (8005844 <_lseek_r+0x20>)
 8005828:	4604      	mov	r4, r0
 800582a:	4608      	mov	r0, r1
 800582c:	4611      	mov	r1, r2
 800582e:	2200      	movs	r2, #0
 8005830:	602a      	str	r2, [r5, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f7fb ffca 	bl	80017cc <_lseek>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_lseek_r+0x1e>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_lseek_r+0x1e>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000254 	.word	0x20000254

08005848 <memcpy>:
 8005848:	440a      	add	r2, r1
 800584a:	4291      	cmp	r1, r2
 800584c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005850:	d100      	bne.n	8005854 <memcpy+0xc>
 8005852:	4770      	bx	lr
 8005854:	b510      	push	{r4, lr}
 8005856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800585a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800585e:	4291      	cmp	r1, r2
 8005860:	d1f9      	bne.n	8005856 <memcpy+0xe>
 8005862:	bd10      	pop	{r4, pc}

08005864 <memmove>:
 8005864:	4288      	cmp	r0, r1
 8005866:	b510      	push	{r4, lr}
 8005868:	eb01 0402 	add.w	r4, r1, r2
 800586c:	d902      	bls.n	8005874 <memmove+0x10>
 800586e:	4284      	cmp	r4, r0
 8005870:	4623      	mov	r3, r4
 8005872:	d807      	bhi.n	8005884 <memmove+0x20>
 8005874:	1e43      	subs	r3, r0, #1
 8005876:	42a1      	cmp	r1, r4
 8005878:	d008      	beq.n	800588c <memmove+0x28>
 800587a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800587e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005882:	e7f8      	b.n	8005876 <memmove+0x12>
 8005884:	4402      	add	r2, r0
 8005886:	4601      	mov	r1, r0
 8005888:	428a      	cmp	r2, r1
 800588a:	d100      	bne.n	800588e <memmove+0x2a>
 800588c:	bd10      	pop	{r4, pc}
 800588e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005896:	e7f7      	b.n	8005888 <memmove+0x24>

08005898 <__malloc_lock>:
 8005898:	4801      	ldr	r0, [pc, #4]	; (80058a0 <__malloc_lock+0x8>)
 800589a:	f7ff b9d1 	b.w	8004c40 <__retarget_lock_acquire_recursive>
 800589e:	bf00      	nop
 80058a0:	2000024c 	.word	0x2000024c

080058a4 <__malloc_unlock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_unlock+0x8>)
 80058a6:	f7ff b9cc 	b.w	8004c42 <__retarget_lock_release_recursive>
 80058aa:	bf00      	nop
 80058ac:	2000024c 	.word	0x2000024c

080058b0 <_realloc_r>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	4607      	mov	r7, r0
 80058b4:	4614      	mov	r4, r2
 80058b6:	460e      	mov	r6, r1
 80058b8:	b921      	cbnz	r1, 80058c4 <_realloc_r+0x14>
 80058ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058be:	4611      	mov	r1, r2
 80058c0:	f7ff ba74 	b.w	8004dac <_malloc_r>
 80058c4:	b922      	cbnz	r2, 80058d0 <_realloc_r+0x20>
 80058c6:	f7ff fa21 	bl	8004d0c <_free_r>
 80058ca:	4625      	mov	r5, r4
 80058cc:	4628      	mov	r0, r5
 80058ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d0:	f000 f826 	bl	8005920 <_malloc_usable_size_r>
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d20f      	bcs.n	80058f8 <_realloc_r+0x48>
 80058d8:	4621      	mov	r1, r4
 80058da:	4638      	mov	r0, r7
 80058dc:	f7ff fa66 	bl	8004dac <_malloc_r>
 80058e0:	4605      	mov	r5, r0
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0f2      	beq.n	80058cc <_realloc_r+0x1c>
 80058e6:	4631      	mov	r1, r6
 80058e8:	4622      	mov	r2, r4
 80058ea:	f7ff ffad 	bl	8005848 <memcpy>
 80058ee:	4631      	mov	r1, r6
 80058f0:	4638      	mov	r0, r7
 80058f2:	f7ff fa0b 	bl	8004d0c <_free_r>
 80058f6:	e7e9      	b.n	80058cc <_realloc_r+0x1c>
 80058f8:	4635      	mov	r5, r6
 80058fa:	e7e7      	b.n	80058cc <_realloc_r+0x1c>

080058fc <_read_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d07      	ldr	r5, [pc, #28]	; (800591c <_read_r+0x20>)
 8005900:	4604      	mov	r4, r0
 8005902:	4608      	mov	r0, r1
 8005904:	4611      	mov	r1, r2
 8005906:	2200      	movs	r2, #0
 8005908:	602a      	str	r2, [r5, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f7fb fefe 	bl	800170c <_read>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_read_r+0x1e>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	b103      	cbz	r3, 800591a <_read_r+0x1e>
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20000254 	.word	0x20000254

08005920 <_malloc_usable_size_r>:
 8005920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005924:	1f18      	subs	r0, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	bfbc      	itt	lt
 800592a:	580b      	ldrlt	r3, [r1, r0]
 800592c:	18c0      	addlt	r0, r0, r3
 800592e:	4770      	bx	lr

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
