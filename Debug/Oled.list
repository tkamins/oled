
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002118  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d8  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b88  08002b88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b90  08002b90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000010  08002ba8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002ba8  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a3c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c8  00000000  00000000  00027a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000680  00000000  00000000  00029790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000156d2  00000000  00000000  00029e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000671e  00000000  00000000  0003f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000847d2  00000000  00000000  00045c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca3d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be0  00000000  00000000  000ca450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002298 	.word	0x08002298

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002298 	.word	0x08002298

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 80004e2:	f000 faab 	bl	8000a3c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 80004e6:	f000 fac1 	bl	8000a6c <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 faed 	bl	8000acc <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 80004f2:	f000 faaf 	bl	8000a54 <SSD1322_HW_drive_CS_high>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8000508:	f000 fa98 	bl	8000a3c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800050c:	f000 faba 	bl	8000a84 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 fada 	bl	8000acc <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8000518:	f000 fa9c 	bl	8000a54 <SSD1322_HW_drive_CS_high>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 8000528:	f000 fab8 	bl	8000a9c <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 800052c:	2001      	movs	r0, #1
 800052e:	f000 faf1 	bl	8000b14 <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 8000532:	f000 fabf 	bl	8000ab4 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 8000536:	2032      	movs	r0, #50	; 0x32
 8000538:	f000 faec 	bl	8000b14 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 800053c:	20fd      	movs	r0, #253	; 0xfd
 800053e:	f7ff ffcb 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 8000542:	2012      	movs	r0, #18
 8000544:	f7ff ffdb 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 8000548:	20ae      	movs	r0, #174	; 0xae
 800054a:	f7ff ffc5 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 800054e:	20b3      	movs	r0, #179	; 0xb3
 8000550:	f7ff ffc2 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 8000554:	2091      	movs	r0, #145	; 0x91
 8000556:	f7ff ffd2 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 800055a:	20ca      	movs	r0, #202	; 0xca
 800055c:	f7ff ffbc 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 8000560:	203f      	movs	r0, #63	; 0x3f
 8000562:	f7ff ffcc 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 8000566:	20a2      	movs	r0, #162	; 0xa2
 8000568:	f7ff ffb6 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffc6 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 8000572:	20a1      	movs	r0, #161	; 0xa1
 8000574:	f7ff ffb0 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff ffc0 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 800057e:	20a0      	movs	r0, #160	; 0xa0
 8000580:	f7ff ffaa 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 8000584:	2014      	movs	r0, #20
 8000586:	f7ff ffba 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_data(0x11);
 800058a:	2011      	movs	r0, #17
 800058c:	f7ff ffb7 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 8000590:	20b5      	movs	r0, #181	; 0xb5
 8000592:	f7ff ffa1 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ffb1 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 800059c:	20ab      	movs	r0, #171	; 0xab
 800059e:	f7ff ff9b 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ffab 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 80005a8:	20b4      	movs	r0, #180	; 0xb4
 80005aa:	f7ff ff95 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 80005ae:	20a0      	movs	r0, #160	; 0xa0
 80005b0:	f7ff ffa5 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 80005b4:	20fd      	movs	r0, #253	; 0xfd
 80005b6:	f7ff ffa2 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 80005ba:	20c1      	movs	r0, #193	; 0xc1
 80005bc:	f7ff ff8c 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 80005c0:	20ff      	movs	r0, #255	; 0xff
 80005c2:	f7ff ff9c 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 80005c6:	20c7      	movs	r0, #199	; 0xc7
 80005c8:	f7ff ff86 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 80005cc:	200f      	movs	r0, #15
 80005ce:	f7ff ff96 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 80005d2:	20b9      	movs	r0, #185	; 0xb9
 80005d4:	f7ff ff80 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 80005d8:	20b1      	movs	r0, #177	; 0xb1
 80005da:	f7ff ff7d 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 80005de:	20e2      	movs	r0, #226	; 0xe2
 80005e0:	f7ff ff8d 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 80005e4:	20d1      	movs	r0, #209	; 0xd1
 80005e6:	f7ff ff77 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 80005ea:	2082      	movs	r0, #130	; 0x82
 80005ec:	f7ff ff87 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_data(0x20);
 80005f0:	2020      	movs	r0, #32
 80005f2:	f7ff ff84 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 80005f6:	20bb      	movs	r0, #187	; 0xbb
 80005f8:	f7ff ff6e 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 80005fc:	201f      	movs	r0, #31
 80005fe:	f7ff ff7e 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 8000602:	20b6      	movs	r0, #182	; 0xb6
 8000604:	f7ff ff68 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 8000608:	2008      	movs	r0, #8
 800060a:	f7ff ff78 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 800060e:	20be      	movs	r0, #190	; 0xbe
 8000610:	f7ff ff62 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 8000614:	2007      	movs	r0, #7
 8000616:	f7ff ff72 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 800061a:	20a6      	movs	r0, #166	; 0xa6
 800061c:	f7ff ff5c 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 8000620:	20a9      	movs	r0, #169	; 0xa9
 8000622:	f7ff ff59 	bl	80004d8 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fa74 	bl	8000b14 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 800062c:	20af      	movs	r0, #175	; 0xaf
 800062e:	f7ff ff53 	bl	80004d8 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 8000632:	2032      	movs	r0, #50	; 0x32
 8000634:	f000 fa6e 	bl	8000b14 <SSD1322_HW_msDelay>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4604      	mov	r4, r0
 8000644:	4608      	mov	r0, r1
 8000646:	4611      	mov	r1, r2
 8000648:	461a      	mov	r2, r3
 800064a:	4623      	mov	r3, r4
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	4603      	mov	r3, r0
 8000650:	71bb      	strb	r3, [r7, #6]
 8000652:	460b      	mov	r3, r1
 8000654:	717b      	strb	r3, [r7, #5]
 8000656:	4613      	mov	r3, r2
 8000658:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 800065a:	2015      	movs	r0, #21
 800065c:	f7ff ff3c 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(28+start_column);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	331c      	adds	r3, #28
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff49 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_data(28+end_column);
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	331c      	adds	r3, #28
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff43 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8000678:	2075      	movs	r0, #117	; 0x75
 800067a:	f7ff ff2d 	bl	80004d8 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff3c 	bl	80004fe <SSD1322_API_data>
	SSD1322_API_data(end_row);
 8000686:	793b      	ldrb	r3, [r7, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff38 	bl	80004fe <SSD1322_API_data>
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 80006a0:	205c      	movs	r0, #92	; 0x5c
 80006a2:	f7ff ff19 	bl	80004d8 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 80006a6:	f000 f9c9 	bl	8000a3c <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 80006aa:	f000 f9eb 	bl	8000a84 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 80006ae:	6839      	ldr	r1, [r7, #0]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fa1d 	bl	8000af0 <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 80006b6:	f000 f9cd 	bl	8000a54 <SSD1322_HW_drive_CS_high>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <set_buffer_size>:
 *  		   new y size of a buffer in pixels
 */


void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	80fb      	strh	r3, [r7, #6]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <set_buffer_size+0x24>)
 80006d6:	88bb      	ldrh	r3, [r7, #4]
 80006d8:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000

080006ec <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000702:	4313      	orrs	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <fill_buffer+0x54>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <fill_buffer+0x58>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	fb03 f302 	mul.w	r3, r3, r2
 8000716:	0fda      	lsrs	r2, r3, #31
 8000718:	4413      	add	r3, r2
 800071a:	105b      	asrs	r3, r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 800071e:	e004      	b.n	800072a <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	7afa      	ldrb	r2, [r7, #11]
 8000728:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	60fa      	str	r2, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f5      	bne.n	8000720 <fill_buffer+0x34>
	}
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000000 	.word	0x20000000
 8000744:	20000002 	.word	0x20000002

08000748 <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	4608      	mov	r0, r1
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	4603      	mov	r3, r0
 8000758:	817b      	strh	r3, [r7, #10]
 800075a:	460b      	mov	r3, r1
 800075c:	813b      	strh	r3, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8000762:	897a      	ldrh	r2, [r7, #10]
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <draw_pixel+0xf4>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	429a      	cmp	r2, r3
 800076c:	dc60      	bgt.n	8000830 <draw_pixel+0xe8>
 800076e:	893a      	ldrh	r2, [r7, #8]
 8000770:	4b33      	ldr	r3, [pc, #204]	; (8000840 <draw_pixel+0xf8>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	3b01      	subs	r3, #1
 8000776:	429a      	cmp	r2, r3
 8000778:	dc5a      	bgt.n	8000830 <draw_pixel+0xe8>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 800077a:	893b      	ldrh	r3, [r7, #8]
 800077c:	4a2f      	ldr	r2, [pc, #188]	; (800083c <draw_pixel+0xf4>)
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	fb02 f203 	mul.w	r2, r2, r3
 8000784:	897b      	ldrh	r3, [r7, #10]
 8000786:	4413      	add	r3, r2
 8000788:	2b00      	cmp	r3, #0
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	bfb8      	it	lt
 8000790:	425b      	neglt	r3, r3
 8000792:	2b01      	cmp	r3, #1
 8000794:	d125      	bne.n	80007e2 <draw_pixel+0x9a>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8000796:	893b      	ldrh	r3, [r7, #8]
 8000798:	4a28      	ldr	r2, [pc, #160]	; (800083c <draw_pixel+0xf4>)
 800079a:	8812      	ldrh	r2, [r2, #0]
 800079c:	fb02 f203 	mul.w	r2, r2, r3
 80007a0:	897b      	ldrh	r3, [r7, #10]
 80007a2:	4413      	add	r3, r2
 80007a4:	0fda      	lsrs	r2, r3, #31
 80007a6:	4413      	add	r3, r2
 80007a8:	105b      	asrs	r3, r3, #1
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	f023 030f 	bic.w	r3, r3, #15
 80007b8:	b25a      	sxtb	r2, r3
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	4313      	orrs	r3, r2
 80007c0:	b259      	sxtb	r1, r3
 80007c2:	893b      	ldrh	r3, [r7, #8]
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <draw_pixel+0xf4>)
 80007c6:	8812      	ldrh	r2, [r2, #0]
 80007c8:	fb02 f203 	mul.w	r2, r2, r3
 80007cc:	897b      	ldrh	r3, [r7, #10]
 80007ce:	4413      	add	r3, r2
 80007d0:	0fda      	lsrs	r2, r3, #31
 80007d2:	4413      	add	r3, r2
 80007d4:	105b      	asrs	r3, r3, #1
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	b2ca      	uxtb	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e027      	b.n	8000832 <draw_pixel+0xea>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 80007e2:	893b      	ldrh	r3, [r7, #8]
 80007e4:	4a15      	ldr	r2, [pc, #84]	; (800083c <draw_pixel+0xf4>)
 80007e6:	8812      	ldrh	r2, [r2, #0]
 80007e8:	fb02 f203 	mul.w	r2, r2, r3
 80007ec:	897b      	ldrh	r3, [r7, #10]
 80007ee:	4413      	add	r3, r2
 80007f0:	0fda      	lsrs	r2, r3, #31
 80007f2:	4413      	add	r3, r2
 80007f4:	105b      	asrs	r3, r3, #1
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	b25a      	sxtb	r2, r3
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b259      	sxtb	r1, r3
 8000810:	893b      	ldrh	r3, [r7, #8]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <draw_pixel+0xf4>)
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	fb02 f203 	mul.w	r2, r2, r3
 800081a:	897b      	ldrh	r3, [r7, #10]
 800081c:	4413      	add	r3, r2
 800081e:	0fda      	lsrs	r2, r3, #31
 8000820:	4413      	add	r3, r2
 8000822:	105b      	asrs	r3, r3, #1
 8000824:	461a      	mov	r2, r3
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e000      	b.n	8000832 <draw_pixel+0xea>
		return;
 8000830:	bf00      	nop
	}
}
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000002 	.word	0x20000002
 8000840:	20000000 	.word	0x20000000

08000844 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <select_font+0x1c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2000002c 	.word	0x2000002c

08000864 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4603      	mov	r3, r0
 8000874:	72fb      	strb	r3, [r7, #11]
 8000876:	460b      	mov	r3, r1
 8000878:	813b      	strh	r3, [r7, #8]
 800087a:	4613      	mov	r3, r2
 800087c:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 800087e:	4b44      	ldr	r3, [pc, #272]	; (8000990 <draw_char+0x12c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d07f      	beq.n	8000986 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <draw_char+0x12c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	891b      	ldrh	r3, [r3, #8]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	7afa      	ldrb	r2, [r7, #11]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8000894:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <draw_char+0x12c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	685a      	ldr	r2, [r3, #4]
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	4413      	add	r3, r2
 80008a0:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 80008a2:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <draw_char+0x12c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	789b      	ldrb	r3, [r3, #2]
 80008b4:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	78db      	ldrb	r3, [r3, #3]
 80008ba:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	799b      	ldrb	r3, [r3, #6]
 80008c6:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80008e6:	e048      	b.n	800097a <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80008ee:	e03a      	b.n	8000966 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 80008f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d108      	bne.n	8000914 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8000902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	84fa      	strh	r2, [r7, #38]	; 0x26
 8000908:	461a      	mov	r2, r3
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 8000914:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000918:	2b00      	cmp	r3, #0
 800091a:	da1a      	bge.n	8000952 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 800091c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000920:	b29a      	uxth	r2, r3
 8000922:	893b      	ldrh	r3, [r7, #8]
 8000924:	4413      	add	r3, r2
 8000926:	b29a      	uxth	r2, r3
 8000928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800092c:	b29b      	uxth	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	b299      	uxth	r1, r3
 8000932:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000936:	b29a      	uxth	r2, r3
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	4413      	add	r3, r2
 800093c:	b29a      	uxth	r2, r3
 800093e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000942:	b29b      	uxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b29a      	uxth	r2, r3
 8000948:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff fefb 	bl	8000748 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 8000952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 800095c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000960:	3301      	adds	r3, #1
 8000962:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3bf      	bcc.n	80008f0 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 8000970:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000974:	3301      	adds	r3, #1
 8000976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800097a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800097e:	7dbb      	ldrb	r3, [r7, #22]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3b1      	bcc.n	80008e8 <draw_char+0x84>
 8000984:	e000      	b.n	8000988 <draw_char+0x124>
		return;
 8000986:	bf00      	nop
		}
	}
}
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000002c 	.word	0x2000002c

08000994 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4613      	mov	r3, r2
 80009a8:	80bb      	strh	r3, [r7, #4]
    while (*text)
 80009aa:	e01b      	b.n	80009e4 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	7819      	ldrb	r1, [r3, #0]
 80009b0:	88b8      	ldrh	r0, [r7, #4]
 80009b2:	88fa      	ldrh	r2, [r7, #6]
 80009b4:	7e3b      	ldrb	r3, [r7, #24]
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	4603      	mov	r3, r0
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff52 	bl	8000864 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <draw_text+0x60>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80009ce:	3b20      	subs	r3, #32
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	4413      	add	r3, r2
 80009d4:	791b      	ldrb	r3, [r3, #4]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	4413      	add	r3, r2
 80009dc:	80fb      	strh	r3, [r7, #6]
        text++;
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	3301      	adds	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
    while (*text)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1df      	bne.n	80009ac <draw_text+0x18>
    }
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000002c 	.word	0x2000002c

080009f8 <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	460b      	mov	r3, r1
 8000a02:	807b      	strh	r3, [r7, #2]
 8000a04:	4613      	mov	r3, r2
 8000a06:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 127);
 8000a08:	237f      	movs	r3, #127	; 0x7f
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	213f      	movs	r1, #63	; 0x3f
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fe14 	bl	800063c <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8000a14:	883b      	ldrh	r3, [r7, #0]
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	0fda      	lsrs	r2, r3, #31
 8000a1a:	4413      	add	r3, r2
 8000a1c:	105b      	asrs	r3, r3, #1
 8000a1e:	461a      	mov	r2, r3
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	4413      	add	r3, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe32 	bl	8000696 <SSD1322_API_send_buffer>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <SSD1322_HW_drive_CS_low+0x14>)
 8000a46:	f000 fd95 	bl	8001574 <HAL_GPIO_WritePin>


}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000

08000a54 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <SSD1322_HW_drive_CS_high+0x14>)
 8000a5e:	f000 fd89 	bl	8001574 <HAL_GPIO_WritePin>

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2120      	movs	r1, #32
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <SSD1322_HW_drive_DC_low+0x14>)
 8000a76:	f000 fd7d 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000

08000a84 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <SSD1322_HW_drive_DC_high+0x14>)
 8000a8e:	f000 fd71 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40020000 	.word	0x40020000

08000a9c <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <SSD1322_HW_drive_RESET_low+0x14>)
 8000aa6:	f000 fd65 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2140      	movs	r1, #64	; 0x40
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <SSD1322_HW_drive_RESET_high+0x14>)
 8000abe:	f000 fd59 	bl	8001574 <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40020000 	.word	0x40020000

08000acc <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi5, &byte_to_transmit, 1, 10);
 8000ad6:	1df9      	adds	r1, r7, #7
 8000ad8:	230a      	movs	r3, #10
 8000ada:	2201      	movs	r2, #1
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <SSD1322_HW_SPI_send_byte+0x20>)
 8000ade:	f001 f9cf 	bl	8001e80 <HAL_SPI_Transmit>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000030 	.word	0x20000030

08000af0 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi5, array_to_transmit, array_size, 100);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	2364      	movs	r3, #100	; 0x64
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <SSD1322_HW_SPI_send_array+0x20>)
 8000b04:	f001 f9bc 	bl	8001e80 <HAL_SPI_Transmit>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000030 	.word	0x20000030

08000b14 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8000b1c:	20c8      	movs	r0, #200	; 0xc8
 8000b1e:	f000 fa9f 	bl	8001060 <HAL_Delay>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000b32:	b082      	sub	sp, #8
 8000b34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 fa21 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f841 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 f8dd 	bl	8000cfc <MX_GPIO_Init>
  MX_SPI5_Init();
 8000b42:	f000 f8a5 	bl	8000c90 <MX_SPI5_Init>
  	// Declare bytes array for a frame buffer.
  	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
  	uint8_t tx_buf[256 * 64 / 2];

  	//Call initialization seqence for SSD1322
  	SSD1322_API_init();
 8000b46:	f7ff fced 	bl	8000524 <SSD1322_API_init>

  	while (1)
  	{
  		//Set frame buffer size in pixels - it is used to avoid writing to memory outside frame buffer.
  		//Normally it has to only be done once on initialization, but buffer size is changed near the end of while(1);
  		HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <main+0x88>)
 8000b50:	f000 fd10 	bl	8001574 <HAL_GPIO_WritePin>

  		set_buffer_size(256, 64);
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b5a:	f7ff fdb3 	bl	80006c4 <set_buffer_size>
  		fill_buffer(tx_buf, 0);
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdc2 	bl	80006ec <fill_buffer>
  		send_buffer_to_OLED(tx_buf, 0, 0);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff42 	bl	80009f8 <send_buffer_to_OLED>
  		select_font(&FreeMono12pt7b);
 8000b74:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <main+0x8c>)
 8000b76:	f7ff fe65 	bl	8000844 <select_font>
  		draw_text(tx_buf, "Lorem ipsum", 10, 20, 15);
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2314      	movs	r3, #20
 8000b82:	220a      	movs	r2, #10
 8000b84:	490d      	ldr	r1, [pc, #52]	; (8000bbc <main+0x90>)
 8000b86:	f7ff ff05 	bl	8000994 <draw_text>
  		send_buffer_to_OLED(tx_buf, 0, 0);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff31 	bl	80009f8 <send_buffer_to_OLED>
  		HAL_Delay(1000);
 8000b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9a:	f000 fa61 	bl	8001060 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <main+0x88>)
 8000ba4:	f000 fce6 	bl	8001574 <HAL_GPIO_WritePin>
  		HAL_Delay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bac:	f000 fa58 	bl	8001060 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOA, LED_Pin, 1);
 8000bb0:	e7cb      	b.n	8000b4a <main+0x1e>
 8000bb2:	bf00      	nop
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	08002b68 	.word	0x08002b68
 8000bbc:	080022b0 	.word	0x080022b0

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	2230      	movs	r2, #48	; 0x30
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fb5a 	bl	8002288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <SystemClock_Config+0xc8>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <SystemClock_Config+0xcc>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c30:	2308      	movs	r3, #8
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fcaf 	bl	80015a8 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c50:	f000 f896 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2103      	movs	r1, #3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 ff09 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c7c:	f000 f880 	bl	8000d80 <Error_Handler>
  }
}
 8000c80:	bf00      	nop
 8000c82:	3750      	adds	r7, #80	; 0x50
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_SPI5_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cc4:	2218      	movs	r2, #24
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_SPI5_Init+0x64>)
 8000ce2:	f001 f869 	bl	8001db8 <HAL_SPI_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cec:	f000 f848 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	40015000 	.word	0x40015000

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_GPIO_Init+0x7c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	21e2      	movs	r1, #226	; 0xe2
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0x80>)
 8000d50:	f000 fc10 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_CS_Pin SPI5_DC_Pin SPI5_RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin;
 8000d54:	23e2      	movs	r3, #226	; 0xe2
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_GPIO_Init+0x80>)
 8000d6c:	f000 fa80 	bl	8001270 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <Error_Handler+0x6>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_SPI_MspInit+0xc0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d14a      	bne.n	8000e90 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PB0     ------> SPI5_SCK
    PA10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_SPI_MspInit+0xc8>)
 8000e6a:	f000 fa01 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000e80:	2306      	movs	r3, #6
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_SPI_MspInit+0xcc>)
 8000e8c:	f000 f9f0 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40015000 	.word	0x40015000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f894 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <SystemInit+0x28>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <SystemInit+0x28>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SystemInit+0x28>)
 8000f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f16:	609a      	str	r2, [r3, #8]
#endif
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
  ldr  r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f48:	f842 3b04 	str.w	r3, [r2], #4

08000f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f52:	f7ff ffd3 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f001 f973 	bl	8002240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fde7 	bl	8000b2c <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f64:	08002b98 	.word	0x08002b98
  ldr  r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f6c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000f70:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000f74:	2000008c 	.word	0x2000008c

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f92f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff feea 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f939 	bl	8001256 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f90f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000004 	.word	0x20000004
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000088 	.word	0x20000088

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000088 	.word	0x20000088

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e159      	b.n	8001540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8148 	bne.w	800153a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d00b      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	2b11      	cmp	r3, #17
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0xfc>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x2e4>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	4a55      	ldr	r2, [pc, #340]	; (8001554 <HAL_GPIO_Init+0x2e4>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001404:	6453      	str	r3, [r2, #68]	; 0x44
 8001406:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_GPIO_Init+0x2e4>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a51      	ldr	r2, [pc, #324]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a48      	ldr	r2, [pc, #288]	; (800155c <HAL_GPIO_Init+0x2ec>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x202>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_GPIO_Init+0x2f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1fe>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a46      	ldr	r2, [pc, #280]	; (8001564 <HAL_GPIO_Init+0x2f4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1fa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_GPIO_Init+0x2f8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a44      	ldr	r2, [pc, #272]	; (800156c <HAL_GPIO_Init+0x2fc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1f2>
 800145e:	2304      	movs	r3, #4
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001462:	2307      	movs	r3, #7
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x2e8>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <HAL_GPIO_Init+0x300>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <HAL_GPIO_Init+0x300>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e0:	4a23      	ldr	r2, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x300>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_GPIO_Init+0x300>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x300>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f aea2 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e25b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d00c      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b99      	ldr	r3, [pc, #612]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e236      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b91      	ldr	r3, [pc, #580]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a90      	ldr	r2, [pc, #576]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b84      	ldr	r3, [pc, #528]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a83      	ldr	r2, [pc, #524]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a80      	ldr	r2, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fcf2 	bl	8001048 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fcee 	bl	8001048 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1fb      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fcde 	bl	8001048 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fcda 	bl	8001048 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1e7      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b62      	ldr	r3, [pc, #392]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1bb      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4952      	ldr	r1, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b4f      	ldr	r3, [pc, #316]	; (8001858 <HAL_RCC_OscConfig+0x2b0>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fc93 	bl	8001048 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fc8f 	bl	8001048 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e19c      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4940      	ldr	r1, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x2b0>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fc72 	bl	8001048 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fc6e 	bl	8001048 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e17b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d030      	beq.n	80017f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x2b4>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fc52 	bl	8001048 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc4e 	bl	8001048 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e15b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
 80017c6:	e015      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x2b4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fc3b 	bl	8001048 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc37 	bl	8001048 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e144      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a0 	beq.w	8001942 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d121      	bne.n	8001882 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fbfd 	bl	8001048 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e011      	b.n	8001876 <HAL_RCC_OscConfig+0x2ce>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
 8001860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff fbf0 	bl	8001048 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0fd      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	e01c      	b.n	80018d2 <HAL_RCC_OscConfig+0x32a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018a0:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a76      	ldr	r2, [pc, #472]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x32a>
 80018ba:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a70      	ldr	r2, [pc, #448]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	4b6e      	ldr	r3, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d015      	beq.n	8001906 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fbb5 	bl	8001048 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fbb1 	bl	8001048 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0bc      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ee      	beq.n	80018e2 <HAL_RCC_OscConfig+0x33a>
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb9f 	bl	8001048 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fb9b 	bl	8001048 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0a6      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800193c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8092 	beq.w	8001a70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d05c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d141      	bne.n	80019e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fb6f 	bl	8001048 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fb6b 	bl	8001048 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e078      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	4933      	ldr	r1, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b6:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fb44 	bl	8001048 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff fb40 	bl	8001048 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e04d      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 80019e2:	e045      	b.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fb2d 	bl	8001048 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fb29 	bl	8001048 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e036      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x44a>
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e029      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d115      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470060 	.word	0x42470060

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0cc      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d044      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e067      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4934      	ldr	r1, [pc, #208]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff fa66 	bl	8001048 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff fa62 	bl	8001048 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20c      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	fa21 f303 	lsr.w	r3, r1, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9c6 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08002b78 	.word	0x08002b78
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6a:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d007      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x32>
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d008      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x38>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 808d 	bne.w	8001d9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c82:	60bb      	str	r3, [r7, #8]
       break;
 8001c84:	e08c      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c88:	60bb      	str	r3, [r7, #8]
      break;
 8001c8a:	e089      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c96:	4b45      	ldr	r3, [pc, #276]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	f04f 0400 	mov.w	r4, #0
 8001cac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	ea03 0501 	and.w	r5, r3, r1
 8001cb8:	ea04 0602 	and.w	r6, r4, r2
 8001cbc:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cbe:	fb02 f106 	mul.w	r1, r2, r6
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	fb02 f205 	mul.w	r2, r2, r5
 8001cc8:	440a      	add	r2, r1
 8001cca:	493a      	ldr	r1, [pc, #232]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ccc:	fba5 0101 	umull	r0, r1, r5, r1
 8001cd0:	1853      	adds	r3, r2, r1
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f04f 0400 	mov.w	r4, #0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	f7fe fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e049      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	f04f 0400 	mov.w	r4, #0
 8001cf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	ea03 0501 	and.w	r5, r3, r1
 8001d00:	ea04 0602 	and.w	r6, r4, r2
 8001d04:	4629      	mov	r1, r5
 8001d06:	4632      	mov	r2, r6
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f04f 0400 	mov.w	r4, #0
 8001d10:	0154      	lsls	r4, r2, #5
 8001d12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d16:	014b      	lsls	r3, r1, #5
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	1b49      	subs	r1, r1, r5
 8001d1e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	f04f 0400 	mov.w	r4, #0
 8001d2a:	0194      	lsls	r4, r2, #6
 8001d2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d30:	018b      	lsls	r3, r1, #6
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	eb64 0402 	sbc.w	r4, r4, r2
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	00e2      	lsls	r2, r4, #3
 8001d42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d46:	00d9      	lsls	r1, r3, #3
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4614      	mov	r4, r2
 8001d4c:	195b      	adds	r3, r3, r5
 8001d4e:	eb44 0406 	adc.w	r4, r4, r6
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	02a2      	lsls	r2, r4, #10
 8001d5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d60:	0299      	lsls	r1, r3, #10
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	f7fe fa30 	bl	80001d8 <__aeabi_uldivmod>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0x158>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	60bb      	str	r3, [r7, #8]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d9c:	60bb      	str	r3, [r7, #8]
      break;
 8001d9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da0:	68bb      	ldr	r3, [r7, #8]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	017d7840 	.word	0x017d7840

08001db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e056      	b.n	8001e78 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7fe fff7 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	f003 0104 	and.w	r1, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_SPI_Transmit+0x22>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e11e      	b.n	80020e0 <HAL_SPI_Transmit+0x260>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eaa:	f7ff f8cd 	bl	8001048 <HAL_GetTick>
 8001eae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d002      	beq.n	8001ec6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec4:	e103      	b.n	80020ce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_SPI_Transmit+0x52>
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ed6:	e0fa      	b.n	80020ce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2203      	movs	r2, #3
 8001edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1e:	d107      	bne.n	8001f30 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d007      	beq.n	8001f4e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f56:	d14b      	bne.n	8001ff0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_SPI_Transmit+0xe6>
 8001f60:	8afb      	ldrh	r3, [r7, #22]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d13e      	bne.n	8001fe4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	1c9a      	adds	r2, r3, #2
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f8a:	e02b      	b.n	8001fe4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d112      	bne.n	8001fc0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fbe:	e011      	b.n	8001fe4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc0:	f7ff f842 	bl	8001048 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d803      	bhi.n	8001fd8 <HAL_SPI_Transmit+0x158>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d102      	bne.n	8001fde <HAL_SPI_Transmit+0x15e>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fe2:	e074      	b.n	80020ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ce      	bne.n	8001f8c <HAL_SPI_Transmit+0x10c>
 8001fee:	e04c      	b.n	800208a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_SPI_Transmit+0x17e>
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d140      	bne.n	8002080 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	330c      	adds	r3, #12
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002024:	e02c      	b.n	8002080 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d113      	bne.n	800205c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	330c      	adds	r3, #12
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	86da      	strh	r2, [r3, #54]	; 0x36
 800205a:	e011      	b.n	8002080 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205c:	f7fe fff4 	bl	8001048 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d803      	bhi.n	8002074 <HAL_SPI_Transmit+0x1f4>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d102      	bne.n	800207a <HAL_SPI_Transmit+0x1fa>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800207e:	e026      	b.n	80020ce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1cd      	bne.n	8002026 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f894 	bl	80021bc <SPI_EndRxTxTransaction>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	77fb      	strb	r3, [r7, #31]
 80020ca:	e000      	b.n	80020ce <HAL_SPI_Transmit+0x24e>
  }

error:
 80020cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020de:	7ffb      	ldrb	r3, [r7, #31]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020f8:	e04c      	b.n	8002194 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d048      	beq.n	8002194 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002102:	f7fe ffa1 	bl	8001048 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d902      	bls.n	8002118 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d13d      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002126:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002130:	d111      	bne.n	8002156 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213a:	d004      	beq.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002144:	d107      	bne.n	8002156 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002154:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215e:	d10f      	bne.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800217e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e00f      	b.n	80021b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4013      	ands	r3, r2
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d1a3      	bne.n	80020fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <SPI_EndRxTxTransaction+0x7c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <SPI_EndRxTxTransaction+0x80>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0d5b      	lsrs	r3, r3, #21
 80021d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021e6:	d112      	bne.n	800220e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff ff78 	bl	80020e8 <SPI_WaitFlagStateUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3b01      	subs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d0f2      	beq.n	800220e <SPI_EndRxTxTransaction+0x52>
 8002228:	e000      	b.n	800222c <SPI_EndRxTxTransaction+0x70>
        break;
 800222a:	bf00      	nop
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000004 	.word	0x20000004
 800223c:	165e9f81 	.word	0x165e9f81

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	4e0d      	ldr	r6, [pc, #52]	; (8002278 <__libc_init_array+0x38>)
 8002244:	4c0d      	ldr	r4, [pc, #52]	; (800227c <__libc_init_array+0x3c>)
 8002246:	1ba4      	subs	r4, r4, r6
 8002248:	10a4      	asrs	r4, r4, #2
 800224a:	2500      	movs	r5, #0
 800224c:	42a5      	cmp	r5, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	4e0b      	ldr	r6, [pc, #44]	; (8002280 <__libc_init_array+0x40>)
 8002252:	4c0c      	ldr	r4, [pc, #48]	; (8002284 <__libc_init_array+0x44>)
 8002254:	f000 f820 	bl	8002298 <_init>
 8002258:	1ba4      	subs	r4, r4, r6
 800225a:	10a4      	asrs	r4, r4, #2
 800225c:	2500      	movs	r5, #0
 800225e:	42a5      	cmp	r5, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002268:	4798      	blx	r3
 800226a:	3501      	adds	r5, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002272:	4798      	blx	r3
 8002274:	3501      	adds	r5, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	08002b90 	.word	0x08002b90
 800227c:	08002b90 	.word	0x08002b90
 8002280:	08002b90 	.word	0x08002b90
 8002284:	08002b94 	.word	0x08002b94

08002288 <memset>:
 8002288:	4402      	add	r2, r0
 800228a:	4603      	mov	r3, r0
 800228c:	4293      	cmp	r3, r2
 800228e:	d100      	bne.n	8002292 <memset+0xa>
 8002290:	4770      	bx	lr
 8002292:	f803 1b01 	strb.w	r1, [r3], #1
 8002296:	e7f9      	b.n	800228c <memset+0x4>

08002298 <_init>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	bf00      	nop
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr

080022a4 <_fini>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	bf00      	nop
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr
