
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000115c  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ec  080069ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f4  080069f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080069fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08006a0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08006a0c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d365  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e19  00000000  00000000  0002d3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017170  00000000  00000000  00030be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a44e  00000000  00000000  00047d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091ca9  00000000  00000000  000521a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3e4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a50  00000000  00000000  000e3ecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005878 	.word	0x08005878

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005878 	.word	0x08005878

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <SSD1322_API_command>:
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
 8000e6e:	f001 faed 	bl	800244c <SSD1322_HW_drive_CS_low>
 8000e72:	f001 fb03 	bl	800247c <SSD1322_HW_drive_DC_low>
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fb2f 	bl	80024dc <SSD1322_HW_SPI_send_byte>
 8000e7e:	f001 faf1 	bl	8002464 <SSD1322_HW_drive_CS_high>
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <SSD1322_API_data>:
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	f001 fada 	bl	800244c <SSD1322_HW_drive_CS_low>
 8000e98:	f001 fafc 	bl	8002494 <SSD1322_HW_drive_DC_high>
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fb1c 	bl	80024dc <SSD1322_HW_SPI_send_byte>
 8000ea4:	f001 fade 	bl	8002464 <SSD1322_HW_drive_CS_high>
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SSD1322_API_init>:
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	f001 fafa 	bl	80024ac <SSD1322_HW_drive_RESET_low>
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f001 fb33 	bl	8002524 <SSD1322_HW_msDelay>
 8000ebe:	f001 fb01 	bl	80024c4 <SSD1322_HW_drive_RESET_high>
 8000ec2:	2032      	movs	r0, #50	; 0x32
 8000ec4:	f001 fb2e 	bl	8002524 <SSD1322_HW_msDelay>
 8000ec8:	20fd      	movs	r0, #253	; 0xfd
 8000eca:	f7ff ffcb 	bl	8000e64 <SSD1322_API_command>
 8000ece:	2012      	movs	r0, #18
 8000ed0:	f7ff ffdb 	bl	8000e8a <SSD1322_API_data>
 8000ed4:	20ae      	movs	r0, #174	; 0xae
 8000ed6:	f7ff ffc5 	bl	8000e64 <SSD1322_API_command>
 8000eda:	20b3      	movs	r0, #179	; 0xb3
 8000edc:	f7ff ffc2 	bl	8000e64 <SSD1322_API_command>
 8000ee0:	2091      	movs	r0, #145	; 0x91
 8000ee2:	f7ff ffd2 	bl	8000e8a <SSD1322_API_data>
 8000ee6:	20ca      	movs	r0, #202	; 0xca
 8000ee8:	f7ff ffbc 	bl	8000e64 <SSD1322_API_command>
 8000eec:	203f      	movs	r0, #63	; 0x3f
 8000eee:	f7ff ffcc 	bl	8000e8a <SSD1322_API_data>
 8000ef2:	20a2      	movs	r0, #162	; 0xa2
 8000ef4:	f7ff ffb6 	bl	8000e64 <SSD1322_API_command>
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffc6 	bl	8000e8a <SSD1322_API_data>
 8000efe:	20a1      	movs	r0, #161	; 0xa1
 8000f00:	f7ff ffb0 	bl	8000e64 <SSD1322_API_command>
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff ffc0 	bl	8000e8a <SSD1322_API_data>
 8000f0a:	20a0      	movs	r0, #160	; 0xa0
 8000f0c:	f7ff ffaa 	bl	8000e64 <SSD1322_API_command>
 8000f10:	2014      	movs	r0, #20
 8000f12:	f7ff ffba 	bl	8000e8a <SSD1322_API_data>
 8000f16:	2011      	movs	r0, #17
 8000f18:	f7ff ffb7 	bl	8000e8a <SSD1322_API_data>
 8000f1c:	20b5      	movs	r0, #181	; 0xb5
 8000f1e:	f7ff ffa1 	bl	8000e64 <SSD1322_API_command>
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ffb1 	bl	8000e8a <SSD1322_API_data>
 8000f28:	20ab      	movs	r0, #171	; 0xab
 8000f2a:	f7ff ff9b 	bl	8000e64 <SSD1322_API_command>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f7ff ffab 	bl	8000e8a <SSD1322_API_data>
 8000f34:	20b4      	movs	r0, #180	; 0xb4
 8000f36:	f7ff ff95 	bl	8000e64 <SSD1322_API_command>
 8000f3a:	20a0      	movs	r0, #160	; 0xa0
 8000f3c:	f7ff ffa5 	bl	8000e8a <SSD1322_API_data>
 8000f40:	20fd      	movs	r0, #253	; 0xfd
 8000f42:	f7ff ffa2 	bl	8000e8a <SSD1322_API_data>
 8000f46:	20c1      	movs	r0, #193	; 0xc1
 8000f48:	f7ff ff8c 	bl	8000e64 <SSD1322_API_command>
 8000f4c:	20ff      	movs	r0, #255	; 0xff
 8000f4e:	f7ff ff9c 	bl	8000e8a <SSD1322_API_data>
 8000f52:	20c7      	movs	r0, #199	; 0xc7
 8000f54:	f7ff ff86 	bl	8000e64 <SSD1322_API_command>
 8000f58:	200f      	movs	r0, #15
 8000f5a:	f7ff ff96 	bl	8000e8a <SSD1322_API_data>
 8000f5e:	20b9      	movs	r0, #185	; 0xb9
 8000f60:	f7ff ff80 	bl	8000e64 <SSD1322_API_command>
 8000f64:	20b1      	movs	r0, #177	; 0xb1
 8000f66:	f7ff ff7d 	bl	8000e64 <SSD1322_API_command>
 8000f6a:	20e2      	movs	r0, #226	; 0xe2
 8000f6c:	f7ff ff8d 	bl	8000e8a <SSD1322_API_data>
 8000f70:	20d1      	movs	r0, #209	; 0xd1
 8000f72:	f7ff ff77 	bl	8000e64 <SSD1322_API_command>
 8000f76:	2082      	movs	r0, #130	; 0x82
 8000f78:	f7ff ff87 	bl	8000e8a <SSD1322_API_data>
 8000f7c:	2020      	movs	r0, #32
 8000f7e:	f7ff ff84 	bl	8000e8a <SSD1322_API_data>
 8000f82:	20bb      	movs	r0, #187	; 0xbb
 8000f84:	f7ff ff6e 	bl	8000e64 <SSD1322_API_command>
 8000f88:	201f      	movs	r0, #31
 8000f8a:	f7ff ff7e 	bl	8000e8a <SSD1322_API_data>
 8000f8e:	20b6      	movs	r0, #182	; 0xb6
 8000f90:	f7ff ff68 	bl	8000e64 <SSD1322_API_command>
 8000f94:	2008      	movs	r0, #8
 8000f96:	f7ff ff78 	bl	8000e8a <SSD1322_API_data>
 8000f9a:	20be      	movs	r0, #190	; 0xbe
 8000f9c:	f7ff ff62 	bl	8000e64 <SSD1322_API_command>
 8000fa0:	2007      	movs	r0, #7
 8000fa2:	f7ff ff72 	bl	8000e8a <SSD1322_API_data>
 8000fa6:	20a6      	movs	r0, #166	; 0xa6
 8000fa8:	f7ff ff5c 	bl	8000e64 <SSD1322_API_command>
 8000fac:	20a9      	movs	r0, #169	; 0xa9
 8000fae:	f7ff ff59 	bl	8000e64 <SSD1322_API_command>
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f001 fab6 	bl	8002524 <SSD1322_HW_msDelay>
 8000fb8:	20af      	movs	r0, #175	; 0xaf
 8000fba:	f7ff ff53 	bl	8000e64 <SSD1322_API_command>
 8000fbe:	2032      	movs	r0, #50	; 0x32
 8000fc0:	f001 fab0 	bl	8002524 <SSD1322_HW_msDelay>
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <SSD1322_API_set_display_mode>:
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d81b      	bhi.n	8001010 <SSD1322_API_set_display_mode+0x48>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <SSD1322_API_set_display_mode+0x18>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08001001 	.word	0x08001001
 8000fe4:	08001009 	.word	0x08001009
 8000fe8:	08000ff1 	.word	0x08000ff1
 8000fec:	08000ff9 	.word	0x08000ff9
 8000ff0:	20a6      	movs	r0, #166	; 0xa6
 8000ff2:	f7ff ff37 	bl	8000e64 <SSD1322_API_command>
 8000ff6:	e00b      	b.n	8001010 <SSD1322_API_set_display_mode+0x48>
 8000ff8:	20a7      	movs	r0, #167	; 0xa7
 8000ffa:	f7ff ff33 	bl	8000e64 <SSD1322_API_command>
 8000ffe:	e007      	b.n	8001010 <SSD1322_API_set_display_mode+0x48>
 8001000:	20a5      	movs	r0, #165	; 0xa5
 8001002:	f7ff ff2f 	bl	8000e64 <SSD1322_API_command>
 8001006:	e003      	b.n	8001010 <SSD1322_API_set_display_mode+0x48>
 8001008:	20a4      	movs	r0, #164	; 0xa4
 800100a:	f7ff ff2b 	bl	8000e64 <SSD1322_API_command>
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <SSD1322_API_sleep_on>:
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
 800101c:	20ae      	movs	r0, #174	; 0xae
 800101e:	f7ff ff21 	bl	8000e64 <SSD1322_API_command>
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <SSD1322_API_sleep_off>:
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
 800102a:	20af      	movs	r0, #175	; 0xaf
 800102c:	f7ff ff1a 	bl	8000e64 <SSD1322_API_command>
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <SSD1322_API_custom_grayscale>:
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	20b8      	movs	r0, #184	; 0xb8
 800103e:	f7ff ff11 	bl	8000e64 <SSD1322_API_command>
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e011      	b.n	800106c <SSD1322_API_custom_grayscale+0x38>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2bb4      	cmp	r3, #180	; 0xb4
 8001052:	d901      	bls.n	8001058 <SSD1322_API_custom_grayscale+0x24>
 8001054:	2300      	movs	r3, #0
 8001056:	e010      	b.n	800107a <SSD1322_API_custom_grayscale+0x46>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff12 	bl	8000e8a <SSD1322_API_data>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	3301      	adds	r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	ddea      	ble.n	8001048 <SSD1322_API_custom_grayscale+0x14>
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fef6 	bl	8000e64 <SSD1322_API_command>
 8001078:	2301      	movs	r3, #1
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <SSD1322_API_default_grayscale>:
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
 8001086:	20b9      	movs	r0, #185	; 0xb9
 8001088:	f7ff feec 	bl	8000e64 <SSD1322_API_command>
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <SSD1322_API_set_window>:
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4604      	mov	r4, r0
 8001098:	4608      	mov	r0, r1
 800109a:	4611      	mov	r1, r2
 800109c:	461a      	mov	r2, r3
 800109e:	4623      	mov	r3, r4
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	4603      	mov	r3, r0
 80010a4:	71bb      	strb	r3, [r7, #6]
 80010a6:	460b      	mov	r3, r1
 80010a8:	717b      	strb	r3, [r7, #5]
 80010aa:	4613      	mov	r3, r2
 80010ac:	713b      	strb	r3, [r7, #4]
 80010ae:	2015      	movs	r0, #21
 80010b0:	f7ff fed8 	bl	8000e64 <SSD1322_API_command>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	331c      	adds	r3, #28
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fee5 	bl	8000e8a <SSD1322_API_data>
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	331c      	adds	r3, #28
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fedf 	bl	8000e8a <SSD1322_API_data>
 80010cc:	2075      	movs	r0, #117	; 0x75
 80010ce:	f7ff fec9 	bl	8000e64 <SSD1322_API_command>
 80010d2:	797b      	ldrb	r3, [r7, #5]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fed8 	bl	8000e8a <SSD1322_API_data>
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fed4 	bl	8000e8a <SSD1322_API_data>
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <SSD1322_API_send_buffer>:
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	205c      	movs	r0, #92	; 0x5c
 80010f6:	f7ff feb5 	bl	8000e64 <SSD1322_API_command>
 80010fa:	f001 f9a7 	bl	800244c <SSD1322_HW_drive_CS_low>
 80010fe:	f001 f9c9 	bl	8002494 <SSD1322_HW_drive_DC_high>
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 f9fb 	bl	8002500 <SSD1322_HW_SPI_send_array>
 800110a:	f001 f9ab 	bl	8002464 <SSD1322_HW_drive_CS_high>
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <set_buffer_size>:
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	80fb      	strh	r3, [r7, #6]
 8001124:	4613      	mov	r3, r2
 8001126:	80bb      	strh	r3, [r7, #4]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <set_buffer_size+0x24>)
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	8013      	strh	r3, [r2, #0]
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000000 	.word	0x20000000

08001140 <fill_buffer>:
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	b25a      	sxtb	r2, r3
 8001152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001156:	4313      	orrs	r3, r2
 8001158:	b25b      	sxtb	r3, r3
 800115a:	72fb      	strb	r3, [r7, #11]
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <fill_buffer+0x54>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <fill_buffer+0x58>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	fb03 f302 	mul.w	r3, r3, r2
 800116a:	0fda      	lsrs	r2, r3, #31
 800116c:	4413      	add	r3, r2
 800116e:	105b      	asrs	r3, r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e004      	b.n	800117e <fill_buffer+0x3e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	7afa      	ldrb	r2, [r7, #11]
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	60fa      	str	r2, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f5      	bne.n	8001174 <fill_buffer+0x34>
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000000 	.word	0x20000000
 8001198:	20000002 	.word	0x20000002

0800119c <draw_pixel>:
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	817b      	strh	r3, [r7, #10]
 80011ae:	460b      	mov	r3, r1
 80011b0:	813b      	strh	r3, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	897a      	ldrh	r2, [r7, #10]
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <draw_pixel+0xf4>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	dc60      	bgt.n	8001284 <draw_pixel+0xe8>
 80011c2:	893a      	ldrh	r2, [r7, #8]
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <draw_pixel+0xf8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dc5a      	bgt.n	8001284 <draw_pixel+0xe8>
 80011ce:	893b      	ldrh	r3, [r7, #8]
 80011d0:	4a2f      	ldr	r2, [pc, #188]	; (8001290 <draw_pixel+0xf4>)
 80011d2:	8812      	ldrh	r2, [r2, #0]
 80011d4:	fb02 f203 	mul.w	r2, r2, r3
 80011d8:	897b      	ldrh	r3, [r7, #10]
 80011da:	4413      	add	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	bfb8      	it	lt
 80011e4:	425b      	neglt	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d125      	bne.n	8001236 <draw_pixel+0x9a>
 80011ea:	893b      	ldrh	r3, [r7, #8]
 80011ec:	4a28      	ldr	r2, [pc, #160]	; (8001290 <draw_pixel+0xf4>)
 80011ee:	8812      	ldrh	r2, [r2, #0]
 80011f0:	fb02 f203 	mul.w	r2, r2, r3
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	4413      	add	r3, r2
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b25b      	sxtb	r3, r3
 8001208:	f023 030f 	bic.w	r3, r3, #15
 800120c:	b25a      	sxtb	r2, r3
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	4313      	orrs	r3, r2
 8001214:	b259      	sxtb	r1, r3
 8001216:	893b      	ldrh	r3, [r7, #8]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <draw_pixel+0xf4>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	fb02 f203 	mul.w	r2, r2, r3
 8001220:	897b      	ldrh	r3, [r7, #10]
 8001222:	4413      	add	r3, r2
 8001224:	0fda      	lsrs	r2, r3, #31
 8001226:	4413      	add	r3, r2
 8001228:	105b      	asrs	r3, r3, #1
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	b2ca      	uxtb	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e027      	b.n	8001286 <draw_pixel+0xea>
 8001236:	893b      	ldrh	r3, [r7, #8]
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <draw_pixel+0xf4>)
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	fb02 f203 	mul.w	r2, r2, r3
 8001240:	897b      	ldrh	r3, [r7, #10]
 8001242:	4413      	add	r3, r2
 8001244:	0fda      	lsrs	r2, r3, #31
 8001246:	4413      	add	r3, r2
 8001248:	105b      	asrs	r3, r3, #1
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b25b      	sxtb	r3, r3
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	b25a      	sxtb	r2, r3
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	b25b      	sxtb	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b259      	sxtb	r1, r3
 8001264:	893b      	ldrh	r3, [r7, #8]
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <draw_pixel+0xf4>)
 8001268:	8812      	ldrh	r2, [r2, #0]
 800126a:	fb02 f203 	mul.w	r2, r2, r3
 800126e:	897b      	ldrh	r3, [r7, #10]
 8001270:	4413      	add	r3, r2
 8001272:	0fda      	lsrs	r2, r3, #31
 8001274:	4413      	add	r3, r2
 8001276:	105b      	asrs	r3, r3, #1
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e000      	b.n	8001286 <draw_pixel+0xea>
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000002 	.word	0x20000002
 8001294:	20000000 	.word	0x20000000

08001298 <draw_vline>:
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	817b      	strh	r3, [r7, #10]
 80012aa:	460b      	mov	r3, r1
 80012ac:	813b      	strh	r3, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	893a      	ldrh	r2, [r7, #8]
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d213      	bcs.n	80012e2 <draw_vline+0x4a>
 80012ba:	893b      	ldrh	r3, [r7, #8]
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	e00a      	b.n	80012d6 <draw_vline+0x3e>
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c8:	8979      	ldrh	r1, [r7, #10]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f7ff ff66 	bl	800119c <draw_pixel>
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	3301      	adds	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	88fa      	ldrh	r2, [r7, #6]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d2ef      	bcs.n	80012c0 <draw_vline+0x28>
 80012e0:	e012      	b.n	8001308 <draw_vline+0x70>
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	75bb      	strb	r3, [r7, #22]
 80012e6:	e00a      	b.n	80012fe <draw_vline+0x66>
 80012e8:	7dbb      	ldrb	r3, [r7, #22]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f0:	8979      	ldrh	r1, [r7, #10]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff52 	bl	800119c <draw_pixel>
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	3301      	adds	r3, #1
 80012fc:	75bb      	strb	r3, [r7, #22]
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	b29b      	uxth	r3, r3
 8001302:	893a      	ldrh	r2, [r7, #8]
 8001304:	429a      	cmp	r2, r3
 8001306:	d2ef      	bcs.n	80012e8 <draw_vline+0x50>
 8001308:	bf00      	nop
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <draw_hline>:
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4603      	mov	r3, r0
 8001320:	817b      	strh	r3, [r7, #10]
 8001322:	460b      	mov	r3, r1
 8001324:	813b      	strh	r3, [r7, #8]
 8001326:	4613      	mov	r3, r2
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	893a      	ldrh	r2, [r7, #8]
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	429a      	cmp	r2, r3
 8001330:	d213      	bcs.n	800135a <draw_hline+0x4a>
 8001332:	893b      	ldrh	r3, [r7, #8]
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	e00a      	b.n	800134e <draw_hline+0x3e>
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	b299      	uxth	r1, r3
 800133c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001340:	897a      	ldrh	r2, [r7, #10]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f7ff ff2a 	bl	800119c <draw_pixel>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	3301      	adds	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	b29b      	uxth	r3, r3
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	429a      	cmp	r2, r3
 8001356:	d2ef      	bcs.n	8001338 <draw_hline+0x28>
 8001358:	e012      	b.n	8001380 <draw_hline+0x70>
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	75bb      	strb	r3, [r7, #22]
 800135e:	e00a      	b.n	8001376 <draw_hline+0x66>
 8001360:	7dbb      	ldrb	r3, [r7, #22]
 8001362:	b299      	uxth	r1, r3
 8001364:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001368:	897a      	ldrh	r2, [r7, #10]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff ff16 	bl	800119c <draw_pixel>
 8001370:	7dbb      	ldrb	r3, [r7, #22]
 8001372:	3301      	adds	r3, #1
 8001374:	75bb      	strb	r3, [r7, #22]
 8001376:	7dbb      	ldrb	r3, [r7, #22]
 8001378:	b29b      	uxth	r3, r3
 800137a:	893a      	ldrh	r2, [r7, #8]
 800137c:	429a      	cmp	r2, r3
 800137e:	d2ef      	bcs.n	8001360 <draw_hline+0x50>
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <draw_line>:
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	817b      	strh	r3, [r7, #10]
 800139a:	460b      	mov	r3, r1
 800139c:	813b      	strh	r3, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	897a      	ldrh	r2, [r7, #10]
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d109      	bne.n	80013be <draw_line+0x36>
 80013aa:	8d38      	ldrh	r0, [r7, #40]	; 0x28
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	8979      	ldrh	r1, [r7, #10]
 80013b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4603      	mov	r3, r0
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f7ff ff6d 	bl	8001298 <draw_vline>
 80013be:	893a      	ldrh	r2, [r7, #8]
 80013c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d109      	bne.n	80013da <draw_line+0x52>
 80013c6:	88f8      	ldrh	r0, [r7, #6]
 80013c8:	897a      	ldrh	r2, [r7, #10]
 80013ca:	8939      	ldrh	r1, [r7, #8]
 80013cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4603      	mov	r3, r0
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f7ff ff9b 	bl	8001310 <draw_hline>
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	893b      	ldrh	r3, [r7, #8]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013e4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013e8:	88f9      	ldrh	r1, [r7, #6]
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	1acb      	subs	r3, r1, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bfb8      	it	lt
 80013f2:	425b      	neglt	r3, r3
 80013f4:	429a      	cmp	r2, r3
 80013f6:	bfcc      	ite	gt
 80013f8:	2301      	movgt	r3, #1
 80013fa:	2300      	movle	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	837b      	strh	r3, [r7, #26]
 8001400:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10b      	bne.n	8001420 <draw_line+0x98>
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	833b      	strh	r3, [r7, #24]
 800140c:	897b      	ldrh	r3, [r7, #10]
 800140e:	813b      	strh	r3, [r7, #8]
 8001410:	8b3b      	ldrh	r3, [r7, #24]
 8001412:	817b      	strh	r3, [r7, #10]
 8001414:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001416:	833b      	strh	r3, [r7, #24]
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	853b      	strh	r3, [r7, #40]	; 0x28
 800141c:	8b3b      	ldrh	r3, [r7, #24]
 800141e:	80fb      	strh	r3, [r7, #6]
 8001420:	897a      	ldrh	r2, [r7, #10]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	429a      	cmp	r2, r3
 8001426:	d90b      	bls.n	8001440 <draw_line+0xb8>
 8001428:	897b      	ldrh	r3, [r7, #10]
 800142a:	82fb      	strh	r3, [r7, #22]
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	817b      	strh	r3, [r7, #10]
 8001430:	8afb      	ldrh	r3, [r7, #22]
 8001432:	80fb      	strh	r3, [r7, #6]
 8001434:	893b      	ldrh	r3, [r7, #8]
 8001436:	82fb      	strh	r3, [r7, #22]
 8001438:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800143a:	813b      	strh	r3, [r7, #8]
 800143c:	8afb      	ldrh	r3, [r7, #22]
 800143e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001440:	88fa      	ldrh	r2, [r7, #6]
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	82bb      	strh	r3, [r7, #20]
 800144a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800144c:	893b      	ldrh	r3, [r7, #8]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	bfb8      	it	lt
 8001454:	425b      	neglt	r3, r3
 8001456:	827b      	strh	r3, [r7, #18]
 8001458:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800145c:	0fda      	lsrs	r2, r3, #31
 800145e:	4413      	add	r3, r2
 8001460:	105b      	asrs	r3, r3, #1
 8001462:	83fb      	strh	r3, [r7, #30]
 8001464:	893a      	ldrh	r2, [r7, #8]
 8001466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001468:	429a      	cmp	r2, r3
 800146a:	d202      	bcs.n	8001472 <draw_line+0xea>
 800146c:	2301      	movs	r3, #1
 800146e:	83bb      	strh	r3, [r7, #28]
 8001470:	e02b      	b.n	80014ca <draw_line+0x142>
 8001472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001476:	83bb      	strh	r3, [r7, #28]
 8001478:	e027      	b.n	80014ca <draw_line+0x142>
 800147a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <draw_line+0x10a>
 8001482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001486:	897a      	ldrh	r2, [r7, #10]
 8001488:	8939      	ldrh	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff fe86 	bl	800119c <draw_pixel>
 8001490:	e006      	b.n	80014a0 <draw_line+0x118>
 8001492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001496:	893a      	ldrh	r2, [r7, #8]
 8001498:	8979      	ldrh	r1, [r7, #10]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fe7e 	bl	800119c <draw_pixel>
 80014a0:	8bfa      	ldrh	r2, [r7, #30]
 80014a2:	8a7b      	ldrh	r3, [r7, #18]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	83fb      	strh	r3, [r7, #30]
 80014aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da08      	bge.n	80014c4 <draw_line+0x13c>
 80014b2:	8bba      	ldrh	r2, [r7, #28]
 80014b4:	893b      	ldrh	r3, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	813b      	strh	r3, [r7, #8]
 80014ba:	8bfa      	ldrh	r2, [r7, #30]
 80014bc:	8abb      	ldrh	r3, [r7, #20]
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	83fb      	strh	r3, [r7, #30]
 80014c4:	897b      	ldrh	r3, [r7, #10]
 80014c6:	3301      	adds	r3, #1
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	897a      	ldrh	r2, [r7, #10]
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d9d3      	bls.n	800147a <draw_line+0xf2>
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <draw_AA_line>:
 80014dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014e0:	b096      	sub	sp, #88	; 0x58
 80014e2:	af02      	add	r7, sp, #8
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	4608      	mov	r0, r1
 80014e8:	4611      	mov	r1, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	817b      	strh	r3, [r7, #10]
 80014f0:	460b      	mov	r3, r1
 80014f2:	813b      	strh	r3, [r7, #8]
 80014f4:	4613      	mov	r3, r2
 80014f6:	80fb      	strh	r3, [r7, #6]
 80014f8:	897a      	ldrh	r2, [r7, #10]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d10a      	bne.n	8001516 <draw_AA_line+0x3a>
 8001500:	f8b7 0070 	ldrh.w	r0, [r7, #112]	; 0x70
 8001504:	893a      	ldrh	r2, [r7, #8]
 8001506:	8979      	ldrh	r1, [r7, #10]
 8001508:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	4603      	mov	r3, r0
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fec1 	bl	8001298 <draw_vline>
 8001516:	893a      	ldrh	r2, [r7, #8]
 8001518:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800151c:	429a      	cmp	r2, r3
 800151e:	d109      	bne.n	8001534 <draw_AA_line+0x58>
 8001520:	88f8      	ldrh	r0, [r7, #6]
 8001522:	897a      	ldrh	r2, [r7, #10]
 8001524:	8939      	ldrh	r1, [r7, #8]
 8001526:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4603      	mov	r3, r0
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff feee 	bl	8001310 <draw_hline>
 8001534:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8001538:	893b      	ldrh	r3, [r7, #8]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001540:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001544:	88f9      	ldrh	r1, [r7, #6]
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	1acb      	subs	r3, r1, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	bfb8      	it	lt
 800154e:	425b      	neglt	r3, r3
 8001550:	429a      	cmp	r2, r3
 8001552:	bfcc      	ite	gt
 8001554:	2301      	movgt	r3, #1
 8001556:	2300      	movle	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800155e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001562:	2b00      	cmp	r3, #0
 8001564:	d011      	beq.n	800158a <draw_AA_line+0xae>
 8001566:	893b      	ldrh	r3, [r7, #8]
 8001568:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	813b      	strh	r3, [r7, #8]
 8001570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800157a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001584:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	897a      	ldrh	r2, [r7, #10]
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	429a      	cmp	r2, r3
 8001590:	d90d      	bls.n	80015ae <draw_AA_line+0xd2>
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800159c:	80fb      	strh	r3, [r7, #6]
 800159e:	893b      	ldrh	r3, [r7, #8]
 80015a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80015a2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80015a6:	813b      	strh	r3, [r7, #8]
 80015a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015aa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80015c0:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80015c4:	893b      	ldrh	r3, [r7, #8]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80015d4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80015d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80015dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80015e4:	897b      	ldrh	r3, [r7, #10]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff38 	bl	800045c <__aeabi_ui2d>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4618      	mov	r0, r3
 80015f2:	4621      	mov	r1, r4
 80015f4:	f7ff fa66 	bl	8000ac4 <__aeabi_d2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	893b      	ldrh	r3, [r7, #8]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001618:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001628:	897b      	ldrh	r3, [r7, #10]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff26 	bl	800047c <__aeabi_i2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b74      	ldr	r3, [pc, #464]	; (8001808 <draw_AA_line+0x32c>)
 8001636:	f7fe fdd5 	bl	80001e4 <__adddf3>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4625      	mov	r5, r4
 8001640:	461c      	mov	r4, r3
 8001642:	897b      	ldrh	r3, [r7, #10]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff19 	bl	800047c <__aeabi_i2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	4b6e      	ldr	r3, [pc, #440]	; (8001808 <draw_AA_line+0x32c>)
 8001650:	f7fe fdc8 	bl	80001e4 <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	ec43 2b17 	vmov	d7, r2, r3
 800165c:	eeb0 0a47 	vmov.f32	s0, s14
 8001660:	eef0 0a67 	vmov.f32	s1, s15
 8001664:	f004 f884 	bl	8005770 <floor>
 8001668:	ec53 2b10 	vmov	r2, r3, d0
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe fdb6 	bl	80001e0 <__aeabi_dsub>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	4962      	ldr	r1, [pc, #392]	; (800180c <draw_AA_line+0x330>)
 8001682:	f7fe fdad 	bl	80001e0 <__aeabi_dsub>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	4618      	mov	r0, r3
 800168c:	4621      	mov	r1, r4
 800168e:	f7ff fa19 	bl	8000ac4 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800169c:	f7fe ff00 	bl	80004a0 <__aeabi_f2d>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	ec44 3b10 	vmov	d0, r3, r4
 80016a8:	f004 f862 	bl	8005770 <floor>
 80016ac:	ec54 3b10 	vmov	r3, r4, d0
 80016b0:	4618      	mov	r0, r3
 80016b2:	4621      	mov	r1, r4
 80016b4:	f7ff fa06 	bl	8000ac4 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a5 	beq.w	8001810 <draw_AA_line+0x334>
 80016c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
 80016d2:	b29c      	uxth	r4, r3
 80016d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b29d      	uxth	r5, r3
 80016e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016e4:	f7fe fedc 	bl	80004a0 <__aeabi_f2d>
 80016e8:	4680      	mov	r8, r0
 80016ea:	4689      	mov	r9, r1
 80016ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ee:	f7fe fed7 	bl	80004a0 <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	ec43 2b10 	vmov	d0, r2, r3
 80016fa:	f004 f839 	bl	8005770 <floor>
 80016fe:	ec53 2b10 	vmov	r2, r3, d0
 8001702:	4640      	mov	r0, r8
 8001704:	4649      	mov	r1, r9
 8001706:	f7fe fd6b 	bl	80001e0 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4690      	mov	r8, r2
 8001710:	4699      	mov	r9, r3
 8001712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001714:	f7fe fec4 	bl	80004a0 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4640      	mov	r0, r8
 800171e:	4649      	mov	r1, r9
 8001720:	f7fe ff16 	bl	8000550 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	4937      	ldr	r1, [pc, #220]	; (800180c <draw_AA_line+0x330>)
 800172e:	f7fe fd57 	bl	80001e0 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4690      	mov	r8, r2
 8001738:	4699      	mov	r9, r3
 800173a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe9c 	bl	800047c <__aeabi_i2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4640      	mov	r0, r8
 800174a:	4649      	mov	r1, r9
 800174c:	f7fe ff00 	bl	8000550 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f994 	bl	8000a84 <__aeabi_d2uiz>
 800175c:	4603      	mov	r3, r0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	462a      	mov	r2, r5
 8001762:	4621      	mov	r1, r4
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff fd19 	bl	800119c <draw_pixel>
 800176a:	edd7 7a07 	vldr	s15, [r7, #28]
 800176e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177a:	ee17 3a90 	vmov	r3, s15
 800177e:	b29c      	uxth	r4, r3
 8001780:	edd7 7a08 	vldr	s15, [r7, #32]
 8001784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001788:	ee17 3a90 	vmov	r3, s15
 800178c:	b29d      	uxth	r5, r3
 800178e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001790:	f7fe fe86 	bl	80004a0 <__aeabi_f2d>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800179a:	f7fe fe81 	bl	80004a0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	ec43 2b10 	vmov	d0, r2, r3
 80017a6:	f003 ffe3 	bl	8005770 <floor>
 80017aa:	ec5b ab10 	vmov	sl, fp, d0
 80017ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017b0:	f7fe fe76 	bl	80004a0 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4650      	mov	r0, sl
 80017ba:	4659      	mov	r1, fp
 80017bc:	f7fe fec8 	bl	8000550 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe fd0a 	bl	80001e0 <__aeabi_dsub>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4690      	mov	r8, r2
 80017d2:	4699      	mov	r9, r3
 80017d4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe4f 	bl	800047c <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe feb3 	bl	8000550 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f947 	bl	8000a84 <__aeabi_d2uiz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	462a      	mov	r2, r5
 80017fc:	4621      	mov	r1, r4
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff fccc 	bl	800119c <draw_pixel>
 8001804:	e0a3      	b.n	800194e <draw_AA_line+0x472>
 8001806:	bf00      	nop
 8001808:	3fe00000 	.word	0x3fe00000
 800180c:	3ff00000 	.word	0x3ff00000
 8001810:	edd7 7a08 	vldr	s15, [r7, #32]
 8001814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001818:	ee17 3a90 	vmov	r3, s15
 800181c:	b29c      	uxth	r4, r3
 800181e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001826:	ee17 3a90 	vmov	r3, s15
 800182a:	b29d      	uxth	r5, r3
 800182c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800182e:	f7fe fe37 	bl	80004a0 <__aeabi_f2d>
 8001832:	4680      	mov	r8, r0
 8001834:	4689      	mov	r9, r1
 8001836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001838:	f7fe fe32 	bl	80004a0 <__aeabi_f2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	f003 ff94 	bl	8005770 <floor>
 8001848:	ec53 2b10 	vmov	r2, r3, d0
 800184c:	4640      	mov	r0, r8
 800184e:	4649      	mov	r1, r9
 8001850:	f7fe fcc6 	bl	80001e0 <__aeabi_dsub>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4690      	mov	r8, r2
 800185a:	4699      	mov	r9, r3
 800185c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185e:	f7fe fe1f 	bl	80004a0 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4640      	mov	r0, r8
 8001868:	4649      	mov	r1, r9
 800186a:	f7fe fe71 	bl	8000550 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f04f 0000 	mov.w	r0, #0
 8001876:	49bf      	ldr	r1, [pc, #764]	; (8001b74 <draw_AA_line+0x698>)
 8001878:	f7fe fcb2 	bl	80001e0 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4690      	mov	r8, r2
 8001882:	4699      	mov	r9, r3
 8001884:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fdf7 	bl	800047c <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4640      	mov	r0, r8
 8001894:	4649      	mov	r1, r9
 8001896:	f7fe fe5b 	bl	8000550 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f8ef 	bl	8000a84 <__aeabi_d2uiz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	462a      	mov	r2, r5
 80018ac:	4621      	mov	r1, r4
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fc74 	bl	800119c <draw_pixel>
 80018b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018bc:	ee17 3a90 	vmov	r3, s15
 80018c0:	b29c      	uxth	r4, r3
 80018c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d2:	ee17 3a90 	vmov	r3, s15
 80018d6:	b29d      	uxth	r5, r3
 80018d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018da:	f7fe fde1 	bl	80004a0 <__aeabi_f2d>
 80018de:	4680      	mov	r8, r0
 80018e0:	4689      	mov	r9, r1
 80018e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018e4:	f7fe fddc 	bl	80004a0 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	f003 ff3e 	bl	8005770 <floor>
 80018f4:	ec5b ab10 	vmov	sl, fp, d0
 80018f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fa:	f7fe fdd1 	bl	80004a0 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4650      	mov	r0, sl
 8001904:	4659      	mov	r1, fp
 8001906:	f7fe fe23 	bl	8000550 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4640      	mov	r0, r8
 8001910:	4649      	mov	r1, r9
 8001912:	f7fe fc65 	bl	80001e0 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4690      	mov	r8, r2
 800191c:	4699      	mov	r9, r3
 800191e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdaa 	bl	800047c <__aeabi_i2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4640      	mov	r0, r8
 800192e:	4649      	mov	r1, r9
 8001930:	f7fe fe0e 	bl	8000550 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f8a2 	bl	8000a84 <__aeabi_d2uiz>
 8001940:	4603      	mov	r3, r0
 8001942:	b2db      	uxtb	r3, r3
 8001944:	462a      	mov	r2, r5
 8001946:	4621      	mov	r1, r4
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fc27 	bl	800119c <draw_pixel>
 800194e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001952:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd7b 	bl	800045c <__aeabi_ui2d>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	4618      	mov	r0, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff f8a9 	bl	8000ac4 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001976:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001990:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001994:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd68 	bl	800047c <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <draw_AA_line+0x69c>)
 80019b2:	f7fe fc17 	bl	80001e4 <__adddf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	4625      	mov	r5, r4
 80019bc:	461c      	mov	r4, r3
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd5b 	bl	800047c <__aeabi_i2d>
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <draw_AA_line+0x69c>)
 80019cc:	f7fe fc0a 	bl	80001e4 <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b17 	vmov	d7, r2, r3
 80019d8:	eeb0 0a47 	vmov.f32	s0, s14
 80019dc:	eef0 0a67 	vmov.f32	s1, s15
 80019e0:	f003 fec6 	bl	8005770 <floor>
 80019e4:	ec53 2b10 	vmov	r2, r3, d0
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fbf8 	bl	80001e0 <__aeabi_dsub>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	4618      	mov	r0, r3
 80019f6:	4621      	mov	r1, r4
 80019f8:	f7ff f864 	bl	8000ac4 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a06:	f7fe fd4b 	bl	80004a0 <__aeabi_f2d>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	ec44 3b10 	vmov	d0, r3, r4
 8001a12:	f003 fead 	bl	8005770 <floor>
 8001a16:	ec54 3b10 	vmov	r3, r4, d0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	f7ff f851 	bl	8000ac4 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 80a6 	beq.w	8001b7c <draw_AA_line+0x6a0>
 8001a30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a38:	ee17 3a90 	vmov	r3, s15
 8001a3c:	b29c      	uxth	r4, r3
 8001a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a46:	ee17 3a90 	vmov	r3, s15
 8001a4a:	b29d      	uxth	r5, r3
 8001a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a4e:	f7fe fd27 	bl	80004a0 <__aeabi_f2d>
 8001a52:	4680      	mov	r8, r0
 8001a54:	4689      	mov	r9, r1
 8001a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a58:	f7fe fd22 	bl	80004a0 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b10 	vmov	d0, r2, r3
 8001a64:	f003 fe84 	bl	8005770 <floor>
 8001a68:	ec53 2b10 	vmov	r2, r3, d0
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4649      	mov	r1, r9
 8001a70:	f7fe fbb6 	bl	80001e0 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4690      	mov	r8, r2
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a7e:	f7fe fd0f 	bl	80004a0 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4640      	mov	r0, r8
 8001a88:	4649      	mov	r1, r9
 8001a8a:	f7fe fd61 	bl	8000550 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	4937      	ldr	r1, [pc, #220]	; (8001b74 <draw_AA_line+0x698>)
 8001a98:	f7fe fba2 	bl	80001e0 <__aeabi_dsub>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	4699      	mov	r9, r3
 8001aa4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fce7 	bl	800047c <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4640      	mov	r0, r8
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	f7fe fd4b 	bl	8000550 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7fe ffdf 	bl	8000a84 <__aeabi_d2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	462a      	mov	r2, r5
 8001acc:	4621      	mov	r1, r4
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff fb64 	bl	800119c <draw_pixel>
 8001ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae4:	ee17 3a90 	vmov	r3, s15
 8001ae8:	b29c      	uxth	r4, r3
 8001aea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	b29d      	uxth	r5, r3
 8001af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001afa:	f7fe fcd1 	bl	80004a0 <__aeabi_f2d>
 8001afe:	4680      	mov	r8, r0
 8001b00:	4689      	mov	r9, r1
 8001b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b04:	f7fe fccc 	bl	80004a0 <__aeabi_f2d>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	ec43 2b10 	vmov	d0, r2, r3
 8001b10:	f003 fe2e 	bl	8005770 <floor>
 8001b14:	ec53 2b10 	vmov	r2, r3, d0
 8001b18:	4640      	mov	r0, r8
 8001b1a:	4649      	mov	r1, r9
 8001b1c:	f7fe fb60 	bl	80001e0 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4690      	mov	r8, r2
 8001b26:	4699      	mov	r9, r3
 8001b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2a:	f7fe fcb9 	bl	80004a0 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4640      	mov	r0, r8
 8001b34:	4649      	mov	r1, r9
 8001b36:	f7fe fd0b 	bl	8000550 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fc98 	bl	800047c <__aeabi_i2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fcfc 	bl	8000550 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe ff90 	bl	8000a84 <__aeabi_d2uiz>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	462a      	mov	r2, r5
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fb15 	bl	800119c <draw_pixel>
 8001b72:	e0a4      	b.n	8001cbe <draw_AA_line+0x7e2>
 8001b74:	3ff00000 	.word	0x3ff00000
 8001b78:	3fe00000 	.word	0x3fe00000
 8001b7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b84:	ee17 3a90 	vmov	r3, s15
 8001b88:	b29c      	uxth	r4, r3
 8001b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b92:	ee17 3a90 	vmov	r3, s15
 8001b96:	b29d      	uxth	r5, r3
 8001b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b9a:	f7fe fc81 	bl	80004a0 <__aeabi_f2d>
 8001b9e:	4680      	mov	r8, r0
 8001ba0:	4689      	mov	r9, r1
 8001ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ba4:	f7fe fc7c 	bl	80004a0 <__aeabi_f2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	ec43 2b10 	vmov	d0, r2, r3
 8001bb0:	f003 fdde 	bl	8005770 <floor>
 8001bb4:	ec53 2b10 	vmov	r2, r3, d0
 8001bb8:	4640      	mov	r0, r8
 8001bba:	4649      	mov	r1, r9
 8001bbc:	f7fe fb10 	bl	80001e0 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4690      	mov	r8, r2
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bca:	f7fe fc69 	bl	80004a0 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	f7fe fcbb 	bl	8000550 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	499e      	ldr	r1, [pc, #632]	; (8001e5c <draw_AA_line+0x980>)
 8001be4:	f7fe fafc 	bl	80001e0 <__aeabi_dsub>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4690      	mov	r8, r2
 8001bee:	4699      	mov	r9, r3
 8001bf0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc41 	bl	800047c <__aeabi_i2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4640      	mov	r0, r8
 8001c00:	4649      	mov	r1, r9
 8001c02:	f7fe fca5 	bl	8000550 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff39 	bl	8000a84 <__aeabi_d2uiz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	462a      	mov	r2, r5
 8001c18:	4621      	mov	r1, r4
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fabe 	bl	800119c <draw_pixel>
 8001c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	b29c      	uxth	r4, r3
 8001c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	b29d      	uxth	r5, r3
 8001c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c46:	f7fe fc2b 	bl	80004a0 <__aeabi_f2d>
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4689      	mov	r9, r1
 8001c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c50:	f7fe fc26 	bl	80004a0 <__aeabi_f2d>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	ec43 2b10 	vmov	d0, r2, r3
 8001c5c:	f003 fd88 	bl	8005770 <floor>
 8001c60:	ec53 2b10 	vmov	r2, r3, d0
 8001c64:	4640      	mov	r0, r8
 8001c66:	4649      	mov	r1, r9
 8001c68:	f7fe faba 	bl	80001e0 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4690      	mov	r8, r2
 8001c72:	4699      	mov	r9, r3
 8001c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c76:	f7fe fc13 	bl	80004a0 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4640      	mov	r0, r8
 8001c80:	4649      	mov	r1, r9
 8001c82:	f7fe fc65 	bl	8000550 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4690      	mov	r8, r2
 8001c8c:	4699      	mov	r9, r3
 8001c8e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fbf2 	bl	800047c <__aeabi_i2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4640      	mov	r0, r8
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	f7fe fc56 	bl	8000550 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe feea 	bl	8000a84 <__aeabi_d2uiz>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fa6f 	bl	800119c <draw_pixel>
 8001cbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80bd 	beq.w	8001e42 <draw_AA_line+0x966>
 8001cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cde:	e09e      	b.n	8001e1e <draw_AA_line+0x942>
 8001ce0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ce2:	f7fe fbdd 	bl	80004a0 <__aeabi_f2d>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	ec44 3b10 	vmov	d0, r3, r4
 8001cee:	f003 fd3f 	bl	8005770 <floor>
 8001cf2:	ec54 3b10 	vmov	r3, r4, d0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f7fe fec3 	bl	8000a84 <__aeabi_d2uiz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29c      	uxth	r4, r3
 8001d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d04:	b29d      	uxth	r5, r3
 8001d06:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d08:	f7fe fbca 	bl	80004a0 <__aeabi_f2d>
 8001d0c:	4680      	mov	r8, r0
 8001d0e:	4689      	mov	r9, r1
 8001d10:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d12:	f7fe fbc5 	bl	80004a0 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b10 	vmov	d0, r2, r3
 8001d1e:	f003 fd27 	bl	8005770 <floor>
 8001d22:	ec53 2b10 	vmov	r2, r3, d0
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe fa59 	bl	80001e0 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	4949      	ldr	r1, [pc, #292]	; (8001e5c <draw_AA_line+0x980>)
 8001d38:	f7fe fa52 	bl	80001e0 <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4690      	mov	r8, r2
 8001d42:	4699      	mov	r9, r3
 8001d44:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb97 	bl	800047c <__aeabi_i2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4640      	mov	r0, r8
 8001d54:	4649      	mov	r1, r9
 8001d56:	f7fe fbfb 	bl	8000550 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fe8f 	bl	8000a84 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fa14 	bl	800119c <draw_pixel>
 8001d74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d76:	f7fe fb93 	bl	80004a0 <__aeabi_f2d>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	ec44 3b10 	vmov	d0, r3, r4
 8001d82:	f003 fcf5 	bl	8005770 <floor>
 8001d86:	ec51 0b10 	vmov	r0, r1, d0
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <draw_AA_line+0x980>)
 8001d90:	f7fe fa28 	bl	80001e4 <__adddf3>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	f7fe fe72 	bl	8000a84 <__aeabi_d2uiz>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29c      	uxth	r4, r3
 8001da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da6:	b29d      	uxth	r5, r3
 8001da8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001daa:	f7fe fb79 	bl	80004a0 <__aeabi_f2d>
 8001dae:	4680      	mov	r8, r0
 8001db0:	4689      	mov	r9, r1
 8001db2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001db4:	f7fe fb74 	bl	80004a0 <__aeabi_f2d>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	ec43 2b10 	vmov	d0, r2, r3
 8001dc0:	f003 fcd6 	bl	8005770 <floor>
 8001dc4:	ec53 2b10 	vmov	r2, r3, d0
 8001dc8:	4640      	mov	r0, r8
 8001dca:	4649      	mov	r1, r9
 8001dcc:	f7fe fa08 	bl	80001e0 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4690      	mov	r8, r2
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb4d 	bl	800047c <__aeabi_i2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4640      	mov	r0, r8
 8001de8:	4649      	mov	r1, r9
 8001dea:	f7fe fbb1 	bl	8000550 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fe45 	bl	8000a84 <__aeabi_d2uiz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	462a      	mov	r2, r5
 8001e00:	4621      	mov	r1, r4
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff f9ca 	bl	800119c <draw_pixel>
 8001e08:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8001e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001e34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	f67f af50 	bls.w	8001ce0 <draw_AA_line+0x804>
 8001e40:	e0be      	b.n	8001fc0 <draw_AA_line+0xae4>
 8001e42:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
 8001e58:	e0a1      	b.n	8001f9e <draw_AA_line+0xac2>
 8001e5a:	bf00      	nop
 8001e5c:	3ff00000 	.word	0x3ff00000
 8001e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e62:	b29c      	uxth	r4, r3
 8001e64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e66:	f7fe fb1b 	bl	80004a0 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ec43 2b10 	vmov	d0, r2, r3
 8001e72:	f003 fc7d 	bl	8005770 <floor>
 8001e76:	ec53 2b10 	vmov	r2, r3, d0
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe01 	bl	8000a84 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29d      	uxth	r5, r3
 8001e86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e88:	f7fe fb0a 	bl	80004a0 <__aeabi_f2d>
 8001e8c:	4680      	mov	r8, r0
 8001e8e:	4689      	mov	r9, r1
 8001e90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e92:	f7fe fb05 	bl	80004a0 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ec43 2b10 	vmov	d0, r2, r3
 8001e9e:	f003 fc67 	bl	8005770 <floor>
 8001ea2:	ec53 2b10 	vmov	r2, r3, d0
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe f999 	bl	80001e0 <__aeabi_dsub>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	f04f 0000 	mov.w	r0, #0
 8001eb6:	4945      	ldr	r1, [pc, #276]	; (8001fcc <draw_AA_line+0xaf0>)
 8001eb8:	f7fe f992 	bl	80001e0 <__aeabi_dsub>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	4699      	mov	r9, r3
 8001ec4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fad7 	bl	800047c <__aeabi_i2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4640      	mov	r0, r8
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	f7fe fb3b 	bl	8000550 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fdcf 	bl	8000a84 <__aeabi_d2uiz>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	462a      	mov	r2, r5
 8001eec:	4621      	mov	r1, r4
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff f954 	bl	800119c <draw_pixel>
 8001ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef6:	b29c      	uxth	r4, r3
 8001ef8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001efa:	f7fe fad1 	bl	80004a0 <__aeabi_f2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	ec43 2b10 	vmov	d0, r2, r3
 8001f06:	f003 fc33 	bl	8005770 <floor>
 8001f0a:	ec51 0b10 	vmov	r0, r1, d0
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <draw_AA_line+0xaf0>)
 8001f14:	f7fe f966 	bl	80001e4 <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fdb0 	bl	8000a84 <__aeabi_d2uiz>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29d      	uxth	r5, r3
 8001f28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f2a:	f7fe fab9 	bl	80004a0 <__aeabi_f2d>
 8001f2e:	4680      	mov	r8, r0
 8001f30:	4689      	mov	r9, r1
 8001f32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f34:	f7fe fab4 	bl	80004a0 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	ec43 2b10 	vmov	d0, r2, r3
 8001f40:	f003 fc16 	bl	8005770 <floor>
 8001f44:	ec53 2b10 	vmov	r2, r3, d0
 8001f48:	4640      	mov	r0, r8
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	f7fe f948 	bl	80001e0 <__aeabi_dsub>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4690      	mov	r8, r2
 8001f56:	4699      	mov	r9, r3
 8001f58:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa8d 	bl	800047c <__aeabi_i2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4640      	mov	r0, r8
 8001f68:	4649      	mov	r1, r9
 8001f6a:	f7fe faf1 	bl	8000550 <__aeabi_dmul>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fd85 	bl	8000a84 <__aeabi_d2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	462a      	mov	r2, r5
 8001f80:	4621      	mov	r1, r4
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f7ff f90a 	bl	800119c <draw_pixel>
 8001f88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001f8c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f94:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8001f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	f67f af50 	bls.w	8001e60 <draw_AA_line+0x984>
 8001fc0:	bf00      	nop
 8001fc2:	3750      	adds	r7, #80	; 0x50
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fca:	bf00      	nop
 8001fcc:	3ff00000 	.word	0x3ff00000

08001fd0 <draw_rect>:
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	817b      	strh	r3, [r7, #10]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	813b      	strh	r3, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	8b38      	ldrh	r0, [r7, #24]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	8979      	ldrh	r1, [r7, #10]
 8001ff0:	7f3b      	ldrb	r3, [r7, #28]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff f94e 	bl	8001298 <draw_vline>
 8001ffc:	8b38      	ldrh	r0, [r7, #24]
 8001ffe:	893a      	ldrh	r2, [r7, #8]
 8002000:	88f9      	ldrh	r1, [r7, #6]
 8002002:	7f3b      	ldrb	r3, [r7, #28]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4603      	mov	r3, r0
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff f945 	bl	8001298 <draw_vline>
 800200e:	88f8      	ldrh	r0, [r7, #6]
 8002010:	897a      	ldrh	r2, [r7, #10]
 8002012:	8939      	ldrh	r1, [r7, #8]
 8002014:	7f3b      	ldrb	r3, [r7, #28]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4603      	mov	r3, r0
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7ff f978 	bl	8001310 <draw_hline>
 8002020:	88f8      	ldrh	r0, [r7, #6]
 8002022:	897a      	ldrh	r2, [r7, #10]
 8002024:	8b39      	ldrh	r1, [r7, #24]
 8002026:	7f3b      	ldrb	r3, [r7, #28]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4603      	mov	r3, r0
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7ff f96f 	bl	8001310 <draw_hline>
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <draw_rect_filled>:
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4603      	mov	r3, r0
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	460b      	mov	r3, r1
 800204e:	813b      	strh	r3, [r7, #8]
 8002050:	4613      	mov	r3, r2
 8002052:	80fb      	strh	r3, [r7, #6]
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	75fb      	strb	r3, [r7, #23]
 8002058:	e016      	b.n	8002088 <draw_rect_filled+0x4e>
 800205a:	893b      	ldrh	r3, [r7, #8]
 800205c:	75bb      	strb	r3, [r7, #22]
 800205e:	e00b      	b.n	8002078 <draw_rect_filled+0x3e>
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	b299      	uxth	r1, r3
 8002064:	7dbb      	ldrb	r3, [r7, #22]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff f895 	bl	800119c <draw_pixel>
 8002072:	7dbb      	ldrb	r3, [r7, #22]
 8002074:	3301      	adds	r3, #1
 8002076:	75bb      	strb	r3, [r7, #22]
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	b29b      	uxth	r3, r3
 800207c:	8c3a      	ldrh	r2, [r7, #32]
 800207e:	429a      	cmp	r2, r3
 8002080:	d2ee      	bcs.n	8002060 <draw_rect_filled+0x26>
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	3301      	adds	r3, #1
 8002086:	75fb      	strb	r3, [r7, #23]
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	b29b      	uxth	r3, r3
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	429a      	cmp	r2, r3
 8002090:	d2e3      	bcs.n	800205a <draw_rect_filled+0x20>
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <draw_circle>:
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	4608      	mov	r0, r1
 80020a4:	4611      	mov	r1, r2
 80020a6:	461a      	mov	r2, r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	817b      	strh	r3, [r7, #10]
 80020ac:	460b      	mov	r3, r1
 80020ae:	813b      	strh	r3, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	f1c3 0301 	rsb	r3, r3, #1
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	83fb      	strh	r3, [r7, #30]
 80020be:	2301      	movs	r3, #1
 80020c0:	83bb      	strh	r3, [r7, #28]
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	461a      	mov	r2, r3
 80020c6:	03d2      	lsls	r2, r2, #15
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	837b      	strh	r3, [r7, #26]
 80020d0:	2300      	movs	r3, #0
 80020d2:	833b      	strh	r3, [r7, #24]
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	82fb      	strh	r3, [r7, #22]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4413      	add	r3, r2
 80020de:	b29a      	uxth	r2, r3
 80020e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff f858 	bl	800119c <draw_pixel>
 80020ec:	893a      	ldrh	r2, [r7, #8]
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff f84e 	bl	800119c <draw_pixel>
 8002100:	897a      	ldrh	r2, [r7, #10]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	4413      	add	r3, r2
 8002106:	b299      	uxth	r1, r3
 8002108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800210c:	893a      	ldrh	r2, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff f844 	bl	800119c <draw_pixel>
 8002114:	897a      	ldrh	r2, [r7, #10]
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	b299      	uxth	r1, r3
 800211c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7ff f83a 	bl	800119c <draw_pixel>
 8002128:	e089      	b.n	800223e <draw_circle+0x1a4>
 800212a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0e      	blt.n	8002150 <draw_circle+0xb6>
 8002132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29b      	uxth	r3, r3
 800213c:	82fb      	strh	r3, [r7, #22]
 800213e:	8b7b      	ldrh	r3, [r7, #26]
 8002140:	3302      	adds	r3, #2
 8002142:	b29b      	uxth	r3, r3
 8002144:	837b      	strh	r3, [r7, #26]
 8002146:	8bfa      	ldrh	r2, [r7, #30]
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	4413      	add	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	83fb      	strh	r3, [r7, #30]
 8002150:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002154:	b29b      	uxth	r3, r3
 8002156:	3301      	adds	r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	833b      	strh	r3, [r7, #24]
 800215c:	8bbb      	ldrh	r3, [r7, #28]
 800215e:	3302      	adds	r3, #2
 8002160:	b29b      	uxth	r3, r3
 8002162:	83bb      	strh	r3, [r7, #28]
 8002164:	8bfa      	ldrh	r2, [r7, #30]
 8002166:	8bbb      	ldrh	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	b29b      	uxth	r3, r3
 800216c:	83fb      	strh	r3, [r7, #30]
 800216e:	8b3a      	ldrh	r2, [r7, #24]
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	4413      	add	r3, r2
 8002174:	b299      	uxth	r1, r3
 8002176:	8afa      	ldrh	r2, [r7, #22]
 8002178:	893b      	ldrh	r3, [r7, #8]
 800217a:	4413      	add	r3, r2
 800217c:	b29a      	uxth	r2, r3
 800217e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff f80a 	bl	800119c <draw_pixel>
 8002188:	8b3b      	ldrh	r3, [r7, #24]
 800218a:	897a      	ldrh	r2, [r7, #10]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	b299      	uxth	r1, r3
 8002190:	8afa      	ldrh	r2, [r7, #22]
 8002192:	893b      	ldrh	r3, [r7, #8]
 8002194:	4413      	add	r3, r2
 8002196:	b29a      	uxth	r2, r3
 8002198:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7fe fffd 	bl	800119c <draw_pixel>
 80021a2:	8b3a      	ldrh	r2, [r7, #24]
 80021a4:	897b      	ldrh	r3, [r7, #10]
 80021a6:	4413      	add	r3, r2
 80021a8:	b299      	uxth	r1, r3
 80021aa:	8afb      	ldrh	r3, [r7, #22]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7fe fff0 	bl	800119c <draw_pixel>
 80021bc:	8b3b      	ldrh	r3, [r7, #24]
 80021be:	897a      	ldrh	r2, [r7, #10]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	b299      	uxth	r1, r3
 80021c4:	8afb      	ldrh	r3, [r7, #22]
 80021c6:	893a      	ldrh	r2, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7fe ffe3 	bl	800119c <draw_pixel>
 80021d6:	8afa      	ldrh	r2, [r7, #22]
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	4413      	add	r3, r2
 80021dc:	b299      	uxth	r1, r3
 80021de:	8b3a      	ldrh	r2, [r7, #24]
 80021e0:	893b      	ldrh	r3, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7fe ffd6 	bl	800119c <draw_pixel>
 80021f0:	8afb      	ldrh	r3, [r7, #22]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	b299      	uxth	r1, r3
 80021f8:	8b3a      	ldrh	r2, [r7, #24]
 80021fa:	893b      	ldrh	r3, [r7, #8]
 80021fc:	4413      	add	r3, r2
 80021fe:	b29a      	uxth	r2, r3
 8002200:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7fe ffc9 	bl	800119c <draw_pixel>
 800220a:	8afa      	ldrh	r2, [r7, #22]
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	4413      	add	r3, r2
 8002210:	b299      	uxth	r1, r3
 8002212:	8b3b      	ldrh	r3, [r7, #24]
 8002214:	893a      	ldrh	r2, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7fe ffbc 	bl	800119c <draw_pixel>
 8002224:	8afb      	ldrh	r3, [r7, #22]
 8002226:	897a      	ldrh	r2, [r7, #10]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b299      	uxth	r1, r3
 800222c:	8b3b      	ldrh	r3, [r7, #24]
 800222e:	893a      	ldrh	r2, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	b29a      	uxth	r2, r3
 8002234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7fe ffaf 	bl	800119c <draw_pixel>
 800223e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002246:	429a      	cmp	r2, r3
 8002248:	f6ff af6f 	blt.w	800212a <draw_circle+0x90>
 800224c:	bf00      	nop
 800224e:	3720      	adds	r7, #32
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <select_font>:
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <select_font+0x1c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000002c 	.word	0x2000002c

08002274 <draw_char>:
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	72fb      	strb	r3, [r7, #11]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <draw_char+0x12c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d07f      	beq.n	8002396 <draw_char+0x122>
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <draw_char+0x12c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	891b      	ldrh	r3, [r3, #8]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	7afa      	ldrb	r2, [r7, #11]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	72fb      	strb	r3, [r7, #11]
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <draw_char+0x12c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <draw_char+0x12c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	789b      	ldrb	r3, [r3, #2]
 80022c4:	75fb      	strb	r3, [r7, #23]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	75bb      	strb	r3, [r7, #22]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	795b      	ldrb	r3, [r3, #5]
 80022d0:	757b      	strb	r3, [r7, #21]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	753b      	strb	r3, [r7, #20]
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022f6:	e048      	b.n	800238a <draw_char+0x116>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80022fe:	e03a      	b.n	8002376 <draw_char+0x102>
 8002300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <draw_char+0xb0>
 8002312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	84fa      	strh	r2, [r7, #38]	; 0x26
 8002318:	461a      	mov	r2, r3
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002324:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002328:	2b00      	cmp	r3, #0
 800232a:	da1a      	bge.n	8002362 <draw_char+0xee>
 800232c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002330:	b29a      	uxth	r2, r3
 8002332:	893b      	ldrh	r3, [r7, #8]
 8002334:	4413      	add	r3, r2
 8002336:	b29a      	uxth	r2, r3
 8002338:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800233c:	b29b      	uxth	r3, r3
 800233e:	4413      	add	r3, r2
 8002340:	b299      	uxth	r1, r3
 8002342:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002346:	b29a      	uxth	r2, r3
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	4413      	add	r3, r2
 800234c:	b29a      	uxth	r2, r3
 800234e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b29a      	uxth	r2, r3
 8002358:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7fe ff1d 	bl	800119c <draw_pixel>
 8002362:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800236c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002370:	3301      	adds	r3, #1
 8002372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002376:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3bf      	bcc.n	8002300 <draw_char+0x8c>
 8002380:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002384:	3301      	adds	r3, #1
 8002386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800238a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800238e:	7dbb      	ldrb	r3, [r7, #22]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3b1      	bcc.n	80022f8 <draw_char+0x84>
 8002394:	e000      	b.n	8002398 <draw_char+0x124>
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000002c 	.word	0x2000002c

080023a4 <draw_text>:
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	460b      	mov	r3, r1
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80bb      	strh	r3, [r7, #4]
 80023ba:	e01b      	b.n	80023f4 <draw_text+0x50>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	7819      	ldrb	r1, [r3, #0]
 80023c0:	88b8      	ldrh	r0, [r7, #4]
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	7e3b      	ldrb	r3, [r7, #24]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4603      	mov	r3, r0
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff ff52 	bl	8002274 <draw_char>
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <draw_text+0x60>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80023de:	3b20      	subs	r3, #32
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	791b      	ldrb	r3, [r3, #4]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4413      	add	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1df      	bne.n	80023bc <draw_text+0x18>
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000002c 	.word	0x2000002c

08002408 <send_buffer_to_OLED>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	803b      	strh	r3, [r7, #0]
 8002418:	237f      	movs	r3, #127	; 0x7f
 800241a:	2200      	movs	r2, #0
 800241c:	213f      	movs	r1, #63	; 0x3f
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fe36 	bl	8001090 <SSD1322_API_set_window>
 8002424:	883b      	ldrh	r3, [r7, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	0fda      	lsrs	r2, r3, #31
 800242a:	4413      	add	r3, r2
 800242c:	105b      	asrs	r3, r3, #1
 800242e:	461a      	mov	r2, r3
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	4413      	add	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fe54 	bl	80010ea <SSD1322_API_send_buffer>
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002456:	4802      	ldr	r0, [pc, #8]	; (8002460 <SSD1322_HW_drive_CS_low+0x14>)
 8002458:	f001 f9ea 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);


}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020400 	.word	0x40020400

08002464 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800246e:	4802      	ldr	r0, [pc, #8]	; (8002478 <SSD1322_HW_drive_CS_high+0x14>)
 8002470:	f001 f9de 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40020400 	.word	0x40020400

0800247c <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002486:	4802      	ldr	r0, [pc, #8]	; (8002490 <SSD1322_HW_drive_DC_low+0x14>)
 8002488:	f001 f9d2 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020400 	.word	0x40020400

08002494 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 1);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249e:	4802      	ldr	r0, [pc, #8]	; (80024a8 <SSD1322_HW_drive_DC_high+0x14>)
 80024a0:	f001 f9c6 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40020400 	.word	0x40020400

080024ac <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b6:	4802      	ldr	r0, [pc, #8]	; (80024c0 <SSD1322_HW_drive_RESET_low+0x14>)
 80024b8:	f001 f9ba 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40020400 	.word	0x40020400

080024c4 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <SSD1322_HW_drive_RESET_high+0x14>)
 80024d0:	f001 f9ae 	bl	8003830 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020400 	.word	0x40020400

080024dc <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte_to_transmit, 1, 10);
 80024e6:	1df9      	adds	r1, r7, #7
 80024e8:	230a      	movs	r3, #10
 80024ea:	2201      	movs	r2, #1
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <SSD1322_HW_SPI_send_byte+0x20>)
 80024ee:	f002 f97c 	bl	80047ea <HAL_SPI_Transmit>

	//HAL_SPI_Transmit(&hspi5, &byte_to_transmit, 1, 10);
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000030 	.word	0x20000030

08002500 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, array_to_transmit, array_size, 100);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b29a      	uxth	r2, r3
 800250e:	2364      	movs	r3, #100	; 0x64
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4803      	ldr	r0, [pc, #12]	; (8002520 <SSD1322_HW_SPI_send_array+0x20>)
 8002514:	f002 f969 	bl	80047ea <HAL_SPI_Transmit>

	//HAL_SPI_Transmit(&hspi5, array_to_transmit, array_size, 100);
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000030 	.word	0x20000030

08002524 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 800252c:	20c8      	movs	r0, #200	; 0xc8
 800252e:	f000 fef5 	bl	800331c <HAL_Delay>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 8002542:	b097      	sub	sp, #92	; 0x5c
 8002544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002546:	f000 fe77 	bl	8003238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800254a:	f000 f9f7 	bl	800293c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800254e:	f000 fc1b 	bl	8002d88 <MX_GPIO_Init>
  MX_SPI5_Init();
 8002552:	f000 fb05 	bl	8002b60 <MX_SPI5_Init>
  MX_SPI2_Init();
 8002556:	f000 facd 	bl	8002af4 <MX_SPI2_Init>
  MX_RTC_Init();
 800255a:	f000 fa71 	bl	8002a40 <MX_RTC_Init>
  MX_TIM4_Init();
 800255e:	f000 fbbf 	bl	8002ce0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002562:	f000 fb33 	bl	8002bcc <MX_TIM2_Init>
  /*==================================== DEMO CODE START ============================================*/

  	// Declare bytes array for a frame buffer.
  	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
  	uint8_t tx_buf[256 * 64 / 2];
  	uint8_t MSG[50] = {'\0'};
 8002566:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800256a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800256e:	3b3c      	subs	r3, #60	; 0x3c
 8002570:	4618      	mov	r0, r3
 8002572:	2332      	movs	r3, #50	; 0x32
 8002574:	461a      	mov	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f003 f8f0 	bl	800575c <memset>
  	//Call initialization seqence for SSD1322
  	SSD1322_API_init();
 800257c:	f7fe fc98 	bl	8000eb0 <SSD1322_API_init>

  	while (1)
  	{
  		//Set frame buffer size in pixels - it is used to avoid writing to memory outside frame buffer.
  				//Normally it has to only be done once on initialization, but buffer size is changed near the end of while(1);
  				set_buffer_size(256, 64);
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002586:	f7fe fdc7 	bl	8001118 <set_buffer_size>
  				// Fill buffer with zeros to clear any garbage values
  				fill_buffer(tx_buf, 0);
 800258a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800258e:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002592:	3b08      	subs	r3, #8
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fdd2 	bl	8001140 <fill_buffer>

  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 800259c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80025a0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80025a4:	3b08      	subs	r3, #8
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff2c 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(1500);
 80025b0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025b4:	f000 feb2 	bl	800331c <HAL_Delay>

  				// Let's try some features of this OLED display

  				// First, draw some pixels on frame buffer
  				// draw_pixel(frame_buffer, x, y, brightness);
  				draw_pixel(tx_buf, 10, 10, 1);
 80025b8:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025bc:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80025c0:	3808      	subs	r0, #8
 80025c2:	2301      	movs	r3, #1
 80025c4:	220a      	movs	r2, #10
 80025c6:	210a      	movs	r1, #10
 80025c8:	f7fe fde8 	bl	800119c <draw_pixel>
  				draw_pixel(tx_buf, 15, 15, 5);
 80025cc:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025d0:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80025d4:	3808      	subs	r0, #8
 80025d6:	2305      	movs	r3, #5
 80025d8:	220f      	movs	r2, #15
 80025da:	210f      	movs	r1, #15
 80025dc:	f7fe fdde 	bl	800119c <draw_pixel>
  				draw_pixel(tx_buf, 20, 20, 9);
 80025e0:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025e4:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80025e8:	3808      	subs	r0, #8
 80025ea:	2309      	movs	r3, #9
 80025ec:	2214      	movs	r2, #20
 80025ee:	2114      	movs	r1, #20
 80025f0:	f7fe fdd4 	bl	800119c <draw_pixel>
  				draw_pixel(tx_buf, 25, 25, 15);
 80025f4:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80025f8:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80025fc:	3808      	subs	r0, #8
 80025fe:	230f      	movs	r3, #15
 8002600:	2219      	movs	r2, #25
 8002602:	2119      	movs	r1, #25
 8002604:	f7fe fdca 	bl	800119c <draw_pixel>

  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 8002608:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800260c:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002610:	3b08      	subs	r3, #8
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fef6 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 800261c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002620:	f000 fe7c 	bl	800331c <HAL_Delay>

  				// draw vertical and horizontal lines
  				draw_hline(tx_buf, 31, 20, 50, 10);
 8002624:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002628:	f100 0050 	add.w	r0, r0, #80	; 0x50
 800262c:	3808      	subs	r0, #8
 800262e:	230a      	movs	r3, #10
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2332      	movs	r3, #50	; 0x32
 8002634:	2214      	movs	r2, #20
 8002636:	211f      	movs	r1, #31
 8002638:	f7fe fe6a 	bl	8001310 <draw_hline>
  				draw_vline(tx_buf, 31, 0, 31, 10);
 800263c:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002640:	f100 0050 	add.w	r0, r0, #80	; 0x50
 8002644:	3808      	subs	r0, #8
 8002646:	230a      	movs	r3, #10
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	231f      	movs	r3, #31
 800264c:	2200      	movs	r2, #0
 800264e:	211f      	movs	r1, #31
 8002650:	f7fe fe22 	bl	8001298 <draw_vline>

  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 8002654:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002658:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800265c:	3b08      	subs	r3, #8
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fed0 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 8002668:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800266c:	f000 fe56 	bl	800331c <HAL_Delay>

  				// draw simple oblique line
  				draw_line(tx_buf, 40, 0, 80, 31, 12);
 8002670:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002674:	f100 0050 	add.w	r0, r0, #80	; 0x50
 8002678:	3808      	subs	r0, #8
 800267a:	230c      	movs	r3, #12
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	231f      	movs	r3, #31
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2350      	movs	r3, #80	; 0x50
 8002684:	2200      	movs	r2, #0
 8002686:	2128      	movs	r1, #40	; 0x28
 8002688:	f7fe fe7e 	bl	8001388 <draw_line>
  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 800268c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002690:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002694:	3b08      	subs	r3, #8
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff feb4 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 80026a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026a4:	f000 fe3a 	bl	800331c <HAL_Delay>

  				// draw antialiased oblique line. It should appear softer and nicer than a simple one
  				draw_AA_line(tx_buf, 50, 0, 90, 31, 12);
 80026a8:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80026ac:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80026b0:	3808      	subs	r0, #8
 80026b2:	230c      	movs	r3, #12
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	231f      	movs	r3, #31
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	235a      	movs	r3, #90	; 0x5a
 80026bc:	2200      	movs	r2, #0
 80026be:	2132      	movs	r1, #50	; 0x32
 80026c0:	f7fe ff0c 	bl	80014dc <draw_AA_line>
  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 80026c4:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80026c8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80026cc:	3b08      	subs	r3, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fe98 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 80026d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026dc:	f000 fe1e 	bl	800331c <HAL_Delay>

  				//draw circle, empty rectangle and filled rectangle
  				draw_circle(tx_buf, 180, 20, 20, 15);
 80026e0:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80026e4:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80026e8:	3808      	subs	r0, #8
 80026ea:	230f      	movs	r3, #15
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2314      	movs	r3, #20
 80026f0:	2214      	movs	r2, #20
 80026f2:	21b4      	movs	r1, #180	; 0xb4
 80026f4:	f7ff fcd1 	bl	800209a <draw_circle>
  				draw_rect(tx_buf, 100, 5, 120, 25, 15);
 80026f8:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80026fc:	f100 0050 	add.w	r0, r0, #80	; 0x50
 8002700:	3808      	subs	r0, #8
 8002702:	230f      	movs	r3, #15
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2319      	movs	r3, #25
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2378      	movs	r3, #120	; 0x78
 800270c:	2205      	movs	r2, #5
 800270e:	2164      	movs	r1, #100	; 0x64
 8002710:	f7ff fc5e 	bl	8001fd0 <draw_rect>
  				draw_rect_filled(tx_buf, 124, 5, 144, 25, 8);
 8002714:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002718:	f100 0050 	add.w	r0, r0, #80	; 0x50
 800271c:	3808      	subs	r0, #8
 800271e:	2308      	movs	r3, #8
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2319      	movs	r3, #25
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2390      	movs	r3, #144	; 0x90
 8002728:	2205      	movs	r2, #5
 800272a:	217c      	movs	r1, #124	; 0x7c
 800272c:	f7ff fc85 	bl	800203a <draw_rect_filled>
  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 8002730:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002734:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002738:	3b08      	subs	r3, #8
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fe62 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 8002744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002748:	f000 fde8 	bl	800331c <HAL_Delay>

  				//clean buffer
  				fill_buffer(tx_buf, 0);
 800274c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002750:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002754:	3b08      	subs	r3, #8
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fcf1 	bl	8001140 <fill_buffer>
  				// send a frame buffer to the display
  				//send_buffer_to_OLED(tx_buf, 0, 0);
  				//HAL_Delay(5000);

  				//you can invert screen colors using API function
  				SSD1322_API_set_display_mode(SSD1322_MODE_INVERTED);
 800275e:	2003      	movs	r0, #3
 8002760:	f7fe fc32 	bl	8000fc8 <SSD1322_API_set_display_mode>
  				HAL_Delay(2000);
 8002764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002768:	f000 fdd8 	bl	800331c <HAL_Delay>
  				//pixels can be also turned on or off
  				SSD1322_API_set_display_mode(SSD1322_MODE_ON);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fc2b 	bl	8000fc8 <SSD1322_API_set_display_mode>
  				HAL_Delay(1000);
 8002772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002776:	f000 fdd1 	bl	800331c <HAL_Delay>
  				SSD1322_API_set_display_mode(SSD1322_MODE_OFF);
 800277a:	2001      	movs	r0, #1
 800277c:	f7fe fc24 	bl	8000fc8 <SSD1322_API_set_display_mode>
  				HAL_Delay(1000);
 8002780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002784:	f000 fdca 	bl	800331c <HAL_Delay>
  				//ok, go back to normal
  				SSD1322_API_set_display_mode(SSD1322_MODE_NORMAL);
 8002788:	2002      	movs	r0, #2
 800278a:	f7fe fc1d 	bl	8000fc8 <SSD1322_API_set_display_mode>
  				HAL_Delay(500);
 800278e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002792:	f000 fdc3 	bl	800331c <HAL_Delay>

  				//exact grayscale values can be set individually for each level from 0 to 15 - always send 16 byte array of values 0-180
  				uint8_t grayscale_tab[16] = {0, 5, 10, 15, 20, 25, 30, 35, 145, 150, 155, 160, 165, 170, 175, 180};
 8002796:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800279a:	f103 0310 	add.w	r3, r3, #16
 800279e:	3b0c      	subs	r3, #12
 80027a0:	4a61      	ldr	r2, [pc, #388]	; (8002928 <main+0x3ec>)
 80027a2:	461c      	mov	r4, r3
 80027a4:	4613      	mov	r3, r2
 80027a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				SSD1322_API_custom_grayscale(grayscale_tab);
 80027ac:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80027b0:	f103 0310 	add.w	r3, r3, #16
 80027b4:	3b0c      	subs	r3, #12
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc3c 	bl	8001034 <SSD1322_API_custom_grayscale>
  				HAL_Delay(2000);
 80027bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027c0:	f000 fdac 	bl	800331c <HAL_Delay>
  				//New grayscale values should be close to black in darker areas and close to white in brighter

  				//reset grayscale to default linear values
  				SSD1322_API_default_grayscale();
 80027c4:	f7fe fc5d 	bl	8001082 <SSD1322_API_default_grayscale>
  				HAL_Delay(2000);
 80027c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027cc:	f000 fda6 	bl	800331c <HAL_Delay>

  				//display can be set to sleep mode and then woken up
  				SSD1322_API_sleep_on();
 80027d0:	f7fe fc22 	bl	8001018 <SSD1322_API_sleep_on>
  				HAL_Delay(1000);
 80027d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027d8:	f000 fda0 	bl	800331c <HAL_Delay>
  				SSD1322_API_sleep_off();
 80027dc:	f7fe fc23 	bl	8001026 <SSD1322_API_sleep_off>

  				//clean buffer
  				fill_buffer(tx_buf, 0);
 80027e0:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 80027e4:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80027e8:	3b08      	subs	r3, #8
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fca7 	bl	8001140 <fill_buffer>

  				// now let's try to write some text with a font
  				// first thing to do is font selection
  				select_font(&FreeMono12pt7b);
 80027f2:	484e      	ldr	r0, [pc, #312]	; (800292c <main+0x3f0>)
 80027f4:	f7ff fd2e 	bl	8002254 <select_font>
  				// now text will we written with that font
  				draw_text(tx_buf, "Lorem ipsum", 10, 20, 15);
 80027f8:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 80027fc:	f100 0050 	add.w	r0, r0, #80	; 0x50
 8002800:	3808      	subs	r0, #8
 8002802:	230f      	movs	r3, #15
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2314      	movs	r3, #20
 8002808:	220a      	movs	r2, #10
 800280a:	4949      	ldr	r1, [pc, #292]	; (8002930 <main+0x3f4>)
 800280c:	f7ff fdca 	bl	80023a4 <draw_text>
  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 8002810:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8002814:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002818:	3b08      	subs	r3, #8
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fdf2 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 8002824:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002828:	f000 fd78 	bl	800331c <HAL_Delay>

  				//change font to a differen one
  				select_font(&FreeSansOblique9pt7b);
 800282c:	4841      	ldr	r0, [pc, #260]	; (8002934 <main+0x3f8>)
 800282e:	f7ff fd11 	bl	8002254 <select_font>
  				draw_text(tx_buf, "dolor sit amet", 10, 45, 15);
 8002832:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
 8002836:	f100 0050 	add.w	r0, r0, #80	; 0x50
 800283a:	3808      	subs	r0, #8
 800283c:	230f      	movs	r3, #15
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	232d      	movs	r3, #45	; 0x2d
 8002842:	220a      	movs	r2, #10
 8002844:	493c      	ldr	r1, [pc, #240]	; (8002938 <main+0x3fc>)
 8002846:	f7ff fdad 	bl	80023a4 <draw_text>
  				// send a frame buffer to the display
  				send_buffer_to_OLED(tx_buf, 0, 0);
 800284a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 800284e:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8002852:	3b08      	subs	r3, #8
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fdd5 	bl	8002408 <send_buffer_to_OLED>
  				HAL_Delay(2000);
 800285e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002862:	f000 fd5b 	bl	800331c <HAL_Delay>

  				//you can use frame buffer that is bigger than default 256x64 pixels.
  				//Remember to divide size by two, because one byte stores two pixels.

  				uint8_t tx_buf2[256*256 / 2];
  				set_buffer_size(256, 256);
 8002866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800286a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800286e:	f7fe fc53 	bl	8001118 <set_buffer_size>
  				//draw_bitmap(tx_buf2, creeper, 0, 0, 256, 256);
  				//send_buffer_to_OLED(tx_buf2, 0, 0);
  				//HAL_Delay(2000);

  				//only 1/4 of image is seen, so let's scroll the frame buffer down
  				for(int i = 0; i < 192; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002878:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01a      	b.n	80028b6 <main+0x37a>
  				{
  					send_buffer_to_OLED(tx_buf2, 0, i);
 8002880:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002884:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002890:	3b4c      	subs	r3, #76	; 0x4c
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fdb7 	bl	8002408 <send_buffer_to_OLED>
  					HAL_Delay(5);
 800289a:	2005      	movs	r0, #5
 800289c:	f000 fd3e 	bl	800331c <HAL_Delay>
  				for(int i = 0; i < 192; i++)
 80028a0:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028a4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80028b0:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028ba:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2bbf      	cmp	r3, #191	; 0xbf
 80028c2:	dddd      	ble.n	8002880 <main+0x344>
  				}
  				HAL_Delay(200);
 80028c4:	20c8      	movs	r0, #200	; 0xc8
 80028c6:	f000 fd29 	bl	800331c <HAL_Delay>
  				for (int i = 191; i >= 0; i--)
 80028ca:	23bf      	movs	r3, #191	; 0xbf
 80028cc:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 80028d0:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e01a      	b.n	800290e <main+0x3d2>
  				{
  					send_buffer_to_OLED(tx_buf2, 0, i);
 80028d8:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028dc:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028e8:	3b4c      	subs	r3, #76	; 0x4c
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fd8b 	bl	8002408 <send_buffer_to_OLED>
  					HAL_Delay(5);
 80028f2:	2005      	movs	r0, #5
 80028f4:	f000 fd12 	bl	800331c <HAL_Delay>
  				for (int i = 191; i >= 0; i--)
 80028f8:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 80028fc:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	f507 4220 	add.w	r2, r7, #40960	; 0xa000
 8002908:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	f507 4320 	add.w	r3, r7, #40960	; 0xa000
 8002912:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	dadd      	bge.n	80028d8 <main+0x39c>
  				}
  				HAL_Delay(2000);
 800291c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002920:	f000 fcfc 	bl	800331c <HAL_Delay>
  	{
 8002924:	e62c      	b.n	8002580 <main+0x44>
 8002926:	bf00      	nop
 8002928:	080058ac 	.word	0x080058ac
 800292c:	08006168 	.word	0x08006168
 8002930:	08005890 	.word	0x08005890
 8002934:	080069cc 	.word	0x080069cc
 8002938:	0800589c 	.word	0x0800589c

0800293c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b09a      	sub	sp, #104	; 0x68
 8002940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002946:	2230      	movs	r2, #48	; 0x30
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f002 ff06 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <SystemClock_Config+0xfc>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <SystemClock_Config+0xfc>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <SystemClock_Config+0xfc>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <SystemClock_Config+0x100>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <SystemClock_Config+0x100>)
 8002998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <SystemClock_Config+0x100>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029aa:	230a      	movs	r3, #10
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ae:	2301      	movs	r3, #1
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b2:	2310      	movs	r3, #16
 80029b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029b6:	2301      	movs	r3, #1
 80029b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ba:	2302      	movs	r3, #2
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029be:	2300      	movs	r3, #0
 80029c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029c2:	2308      	movs	r3, #8
 80029c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80029c6:	2364      	movs	r3, #100	; 0x64
 80029c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029ca:	2302      	movs	r3, #2
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029ce:	2304      	movs	r3, #4
 80029d0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 ff44 	bl	8003864 <HAL_RCC_OscConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80029e2:	f000 fa51 	bl	8002e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e6:	230f      	movs	r3, #15
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ea:	2302      	movs	r3, #2
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a00:	2103      	movs	r1, #3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f99e 	bl	8003d44 <HAL_RCC_ClockConfig>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002a0e:	f000 fa3b 	bl	8002e88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a12:	2302      	movs	r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fb27 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002a2c:	f000 fa2c 	bl	8002e88 <Error_Handler>
  }
}
 8002a30:	bf00      	nop
 8002a32:	3768      	adds	r7, #104	; 0x68
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000

08002a40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MX_RTC_Init+0xac>)
 8002a5a:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <MX_RTC_Init+0xb0>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <MX_RTC_Init+0xac>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <MX_RTC_Init+0xac>)
 8002a66:	227f      	movs	r2, #127	; 0x7f
 8002a68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MX_RTC_Init+0xac>)
 8002a6c:	22ff      	movs	r2, #255	; 0xff
 8002a6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <MX_RTC_Init+0xac>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_RTC_Init+0xac>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_RTC_Init+0xac>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a82:	481a      	ldr	r0, [pc, #104]	; (8002aec <MX_RTC_Init+0xac>)
 8002a84:	f001 fbe6 	bl	8004254 <HAL_RTC_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002a8e:	f000 f9fb 	bl	8002e88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480f      	ldr	r0, [pc, #60]	; (8002aec <MX_RTC_Init+0xac>)
 8002aae:	f001 fc62 	bl	8004376 <HAL_RTC_SetTime>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002ab8:	f000 f9e6 	bl	8002e88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002abc:	2301      	movs	r3, #1
 8002abe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002acc:	463b      	mov	r3, r7
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_RTC_Init+0xac>)
 8002ad4:	f001 fd0c 	bl	80044f0 <HAL_RTC_SetDate>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002ade:	f000 f9d3 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000120 	.word	0x20000120
 8002af0:	40002800 	.word	0x40002800

08002af4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <MX_SPI2_Init+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b14:	2202      	movs	r2, #2
 8002b16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b28:	2218      	movs	r2, #24
 8002b2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b40:	220a      	movs	r2, #10
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b44:	4804      	ldr	r0, [pc, #16]	; (8002b58 <MX_SPI2_Init+0x64>)
 8002b46:	f001 fdec 	bl	8004722 <HAL_SPI_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b50:	f000 f99a 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000030 	.word	0x20000030
 8002b5c:	40003800 	.word	0x40003800

08002b60 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002b64:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <MX_SPI5_Init+0x68>)
 8002b68:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b70:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b80:	2202      	movs	r2, #2
 8002b82:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b90:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b94:	2218      	movs	r2, #24
 8002b96:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002bac:	220a      	movs	r2, #10
 8002bae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <MX_SPI5_Init+0x64>)
 8002bb2:	f001 fdb6 	bl	8004722 <HAL_SPI_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002bbc:	f000 f964 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000088 	.word	0x20000088
 8002bc8:	40015000 	.word	0x40015000

08002bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b090      	sub	sp, #64	; 0x40
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c06:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c0e:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c1a:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c2e:	482b      	ldr	r0, [pc, #172]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c30:	f001 ffbc 	bl	8004bac <HAL_TIM_Base_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c3a:	f000 f925 	bl	8002e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4824      	ldr	r0, [pc, #144]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c4c:	f002 f93c 	bl	8004ec8 <HAL_TIM_ConfigClockSource>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c56:	f000 f917 	bl	8002e88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002c5a:	4820      	ldr	r0, [pc, #128]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c5c:	f001 ffd1 	bl	8004c02 <HAL_TIM_IC_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c66:	f000 f90f 	bl	8002e88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002c6e:	2350      	movs	r3, #80	; 0x50
 8002c70:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4816      	ldr	r0, [pc, #88]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002c82:	f002 f9d8 	bl	8005036 <HAL_TIM_SlaveConfigSynchro>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002c8c:	f000 f8fc 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480f      	ldr	r0, [pc, #60]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002ca0:	f002 fcca 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002caa:	f000 f8ed 	bl	8002e88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_TIM2_Init+0x110>)
 8002cc6:	f002 f863 	bl	8004d90 <HAL_TIM_IC_ConfigChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8002cd0:	f000 f8da 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	3740      	adds	r7, #64	; 0x40
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000140 	.word	0x20000140

08002ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 fd34 	bl	800575c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <MX_TIM4_Init+0xa4>)
 8002d00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002d02:	4b1f      	ldr	r3, [pc, #124]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d4e:	f001 ff8d 	bl	8004c6c <HAL_TIM_Encoder_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002d58:	f000 f896 	bl	8002e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_TIM4_Init+0xa0>)
 8002d6a:	f002 fc65 	bl	8005638 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002d74:	f000 f888 	bl	8002e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	3730      	adds	r7, #48	; 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200000e0 	.word	0x200000e0
 8002d84:	40000800 	.word	0x40000800

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 030c 	add.w	r3, r7, #12
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a35      	ldr	r2, [pc, #212]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <MX_GPIO_Init+0xf4>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	21e2      	movs	r1, #226	; 0xe2
 8002df6:	4822      	ldr	r0, [pc, #136]	; (8002e80 <MX_GPIO_Init+0xf8>)
 8002df8:	f000 fd1a 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8002e02:	4820      	ldr	r0, [pc, #128]	; (8002e84 <MX_GPIO_Init+0xfc>)
 8002e04:	f000 fd14 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI5_CS_Pin SPI5_DC_Pin SPI5_RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_DC_Pin|SPI5_RESET_Pin|LED_Pin;
 8002e08:	23e2      	movs	r3, #226	; 0xe2
 8002e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4818      	ldr	r0, [pc, #96]	; (8002e80 <MX_GPIO_Init+0xf8>)
 8002e20:	f000 fb84 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e24:	2304      	movs	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	4619      	mov	r1, r3
 8002e36:	4813      	ldr	r0, [pc, #76]	; (8002e84 <MX_GPIO_Init+0xfc>)
 8002e38:	f000 fb78 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_RESET_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin;
 8002e3c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e42:	2301      	movs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	4619      	mov	r1, r3
 8002e54:	480b      	ldr	r0, [pc, #44]	; (8002e84 <MX_GPIO_Init+0xfc>)
 8002e56:	f000 fb69 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4804      	ldr	r0, [pc, #16]	; (8002e80 <MX_GPIO_Init+0xf8>)
 8002e70:	f000 fb5c 	bl	800352c <HAL_GPIO_Init>

}
 8002e74:	bf00      	nop
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400

08002e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <Error_Handler+0x6>

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_MspInit+0x4c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x4c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x4c>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a05      	ldr	r2, [pc, #20]	; (8002f04 <HAL_RTC_MspInit+0x24>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RTC_MspInit+0x28>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40002800 	.word	0x40002800
 8002f08:	42470e3c 	.word	0x42470e3c

08002f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	; (8003034 <HAL_SPI_MspInit+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d12d      	bne.n	8002f8a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a39      	ldr	r2, [pc, #228]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002f66:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f78:	2305      	movs	r3, #5
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 031c 	add.w	r3, r7, #28
 8002f80:	4619      	mov	r1, r3
 8002f82:	482e      	ldr	r0, [pc, #184]	; (800303c <HAL_SPI_MspInit+0x130>)
 8002f84:	f000 fad2 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002f88:	e04f      	b.n	800302a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI5)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <HAL_SPI_MspInit+0x134>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d14a      	bne.n	800302a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6313      	str	r3, [r2, #48]	; 0x30
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_SPI_MspInit+0x12c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	480e      	ldr	r0, [pc, #56]	; (800303c <HAL_SPI_MspInit+0x130>)
 8003004:	f000 fa92 	bl	800352c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800301a:	2306      	movs	r3, #6
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	4807      	ldr	r0, [pc, #28]	; (8003044 <HAL_SPI_MspInit+0x138>)
 8003026:	f000 fa81 	bl	800352c <HAL_GPIO_Init>
}
 800302a:	bf00      	nop
 800302c:	3730      	adds	r7, #48	; 0x30
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40003800 	.word	0x40003800
 8003038:	40023800 	.word	0x40023800
 800303c:	40020400 	.word	0x40020400
 8003040:	40015000 	.word	0x40015000
 8003044:	40020000 	.word	0x40020000

08003048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d12b      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6313      	str	r3, [r2, #48]	; 0x30
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_TIM_Base_MspInit+0x84>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a6:	2302      	movs	r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b2:	2301      	movs	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <HAL_TIM_Base_MspInit+0x88>)
 80030be:	f000 fa35 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_TIM_Encoder_MspInit+0x84>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12b      	bne.n	800314e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_TIM_Encoder_MspInit+0x88>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800313e:	2302      	movs	r3, #2
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003142:	f107 0314 	add.w	r3, r7, #20
 8003146:	4619      	mov	r1, r3
 8003148:	4805      	ldr	r0, [pc, #20]	; (8003160 <HAL_TIM_Encoder_MspInit+0x8c>)
 800314a:	f000 f9ef 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	; 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40000800 	.word	0x40000800
 800315c:	40023800 	.word	0x40023800
 8003160:	40020400 	.word	0x40020400

08003164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <NMI_Handler+0x4>

0800316a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <HardFault_Handler+0x4>

08003170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <MemManage_Handler+0x4>

08003176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <BusFault_Handler+0x4>

0800317c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <UsageFault_Handler+0x4>

08003182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031b0:	f000 f894 	bl	80032dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SystemInit+0x28>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <SystemInit+0x28>)
 80031c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <SystemInit+0x28>)
 80031ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d2:	609a      	str	r2, [r3, #8]
#endif
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800321c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ea:	e003      	b.n	80031f4 <LoopCopyDataInit>

080031ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031f2:	3104      	adds	r1, #4

080031f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031f4:	480b      	ldr	r0, [pc, #44]	; (8003224 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031fc:	d3f6      	bcc.n	80031ec <CopyDataInit>
  ldr  r2, =_sbss
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003200:	e002      	b.n	8003208 <LoopFillZerobss>

08003202 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003204:	f842 3b04 	str.w	r3, [r2], #4

08003208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800320a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800320c:	d3f9      	bcc.n	8003202 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800320e:	f7ff ffd3 	bl	80031b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003212:	f002 fa7f 	bl	8005714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7ff f991 	bl	800253c <main>
  bx  lr    
 800321a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800321c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003220:	080069fc 	.word	0x080069fc
  ldr  r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003228:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800322c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003230:	20000184 	.word	0x20000184

08003234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC_IRQHandler>
	...

08003238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_Init+0x40>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <HAL_Init+0x40>)
 8003242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_Init+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_Init+0x40>)
 800324e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <HAL_Init+0x40>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_Init+0x40>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003260:	2003      	movs	r0, #3
 8003262:	f000 f92f 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003266:	2000      	movs	r0, #0
 8003268:	f000 f808 	bl	800327c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800326c:	f7ff fe10 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00

0800327c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x54>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_InitTick+0x58>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003292:	fbb3 f3f1 	udiv	r3, r3, r1
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f939 	bl	8003512 <HAL_SYSTICK_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00e      	b.n	80032c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d80a      	bhi.n	80032c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b0:	2200      	movs	r2, #0
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f000 f90f 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032bc:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <HAL_InitTick+0x5c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000004 	.word	0x20000004
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	20000008 	.word	0x20000008

080032dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x20>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_IncTick+0x24>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_IncTick+0x24>)
 80032ee:	6013      	str	r3, [r2, #0]
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	20000180 	.word	0x20000180

08003304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return uwTick;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_GetTick+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000180 	.word	0x20000180

0800331c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff ffee 	bl	8003304 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d005      	beq.n	8003342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_Delay+0x40>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003342:	bf00      	nop
 8003344:	f7ff ffde 	bl	8003304 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d8f7      	bhi.n	8003344 <HAL_Delay+0x28>
  {
  }
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	2000000c 	.word	0x2000000c

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff47 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff5c 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffb0 	bl	8003480 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e159      	b.n	80037fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 8148 	bne.w	80037f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d00b      	beq.n	8003586 <HAL_GPIO_Init+0x5a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800357a:	2b11      	cmp	r3, #17
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b12      	cmp	r3, #18
 8003584:	d130      	bne.n	80035e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	2203      	movs	r2, #3
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035bc:	2201      	movs	r2, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 0201 	and.w	r2, r3, #1
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	2203      	movs	r2, #3
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0xfc>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b12      	cmp	r3, #18
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a2 	beq.w	80037f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b56      	ldr	r3, [pc, #344]	; (8003810 <HAL_GPIO_Init+0x2e4>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a55      	ldr	r2, [pc, #340]	; (8003810 <HAL_GPIO_Init+0x2e4>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <HAL_GPIO_Init+0x2e4>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x202>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_GPIO_Init+0x2f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x1fe>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <HAL_GPIO_Init+0x2f4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x1fa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a45      	ldr	r2, [pc, #276]	; (8003824 <HAL_GPIO_Init+0x2f8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x1f6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x1f2>
 800371a:	2304      	movs	r3, #4
 800371c:	e008      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800371e:	2307      	movs	r3, #7
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372e:	2300      	movs	r3, #0
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003740:	4934      	ldr	r1, [pc, #208]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_GPIO_Init+0x300>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003772:	4a2e      	ldr	r2, [pc, #184]	; (800382c <HAL_GPIO_Init+0x300>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003778:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_GPIO_Init+0x300>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_GPIO_Init+0x300>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a2:	4b22      	ldr	r3, [pc, #136]	; (800382c <HAL_GPIO_Init+0x300>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037c6:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_GPIO_Init+0x300>)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_GPIO_Init+0x300>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f0:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_GPIO_Init+0x300>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	f67f aea2 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40023800 	.word	0x40023800
 8003814:	40013800 	.word	0x40013800
 8003818:	40020000 	.word	0x40020000
 800381c:	40020400 	.word	0x40020400
 8003820:	40020800 	.word	0x40020800
 8003824:	40020c00 	.word	0x40020c00
 8003828:	40021000 	.word	0x40021000
 800382c:	40013c00 	.word	0x40013c00

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e25b      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d075      	beq.n	800396e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003882:	4ba3      	ldr	r3, [pc, #652]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d00c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800388e:	4ba0      	ldr	r3, [pc, #640]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003896:	2b08      	cmp	r3, #8
 8003898:	d112      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389a:	4b9d      	ldr	r3, [pc, #628]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	4b99      	ldr	r3, [pc, #612]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05b      	beq.n	800396c <HAL_RCC_OscConfig+0x108>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d157      	bne.n	800396c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e236      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d106      	bne.n	80038d8 <HAL_RCC_OscConfig+0x74>
 80038ca:	4b91      	ldr	r3, [pc, #580]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a90      	ldr	r2, [pc, #576]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xb0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x98>
 80038e2:	4b8b      	ldr	r3, [pc, #556]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a8a      	ldr	r2, [pc, #552]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a87      	ldr	r2, [pc, #540]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xb0>
 80038fc:	4b84      	ldr	r3, [pc, #528]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a83      	ldr	r2, [pc, #524]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a80      	ldr	r2, [pc, #512]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7ff fcf2 	bl	8003304 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003924:	f7ff fcee 	bl	8003304 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1fb      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xc0>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7ff fcde 	bl	8003304 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800394c:	f7ff fcda 	bl	8003304 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1e7      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0xe8>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397a:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	4b62      	ldr	r3, [pc, #392]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003992:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b5c      	ldr	r3, [pc, #368]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x152>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1bb      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4952      	ldr	r1, [pc, #328]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCC_OscConfig+0x2b0>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7ff fc93 	bl	8003304 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e2:	f7ff fc8f 	bl	8003304 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e19c      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4940      	ldr	r1, [pc, #256]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <HAL_RCC_OscConfig+0x2b0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7ff fc72 	bl	8003304 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a24:	f7ff fc6e 	bl	8003304 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e17b      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d030      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x2b4>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7ff fc52 	bl	8003304 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a64:	f7ff fc4e 	bl	8003304 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e15b      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x200>
 8003a82:	e015      	b.n	8003ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_OscConfig+0x2b4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7ff fc3b 	bl	8003304 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a92:	f7ff fc37 	bl	8003304 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e144      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1f0      	bne.n	8003a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a0 	beq.w	8003bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCC_OscConfig+0x2b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d121      	bne.n	8003b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_RCC_OscConfig+0x2b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <HAL_RCC_OscConfig+0x2b8>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b06:	f7ff fbfd 	bl	8003304 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	e011      	b.n	8003b32 <HAL_RCC_OscConfig+0x2ce>
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	42470000 	.word	0x42470000
 8003b18:	42470e80 	.word	0x42470e80
 8003b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7ff fbf0 	bl	8003304 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e0fd      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x4d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_OscConfig+0x2f0>
 8003b46:	4b7d      	ldr	r3, [pc, #500]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	4a7c      	ldr	r2, [pc, #496]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6713      	str	r3, [r2, #112]	; 0x70
 8003b52:	e01c      	b.n	8003b8e <HAL_RCC_OscConfig+0x32a>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCC_OscConfig+0x312>
 8003b5c:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b60:	4a76      	ldr	r2, [pc, #472]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	f043 0304 	orr.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	; 0x70
 8003b68:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6713      	str	r3, [r2, #112]	; 0x70
 8003b74:	e00b      	b.n	8003b8e <HAL_RCC_OscConfig+0x32a>
 8003b76:	4b71      	ldr	r3, [pc, #452]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a70      	ldr	r2, [pc, #448]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
 8003b82:	4b6e      	ldr	r3, [pc, #440]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a6d      	ldr	r2, [pc, #436]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7ff fbb5 	bl	8003304 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	e00a      	b.n	8003bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7ff fbb1 	bl	8003304 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0bc      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ee      	beq.n	8003b9e <HAL_RCC_OscConfig+0x33a>
 8003bc0:	e014      	b.n	8003bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7ff fb9f 	bl	8003304 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7ff fb9b 	bl	8003304 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0a6      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	4b56      	ldr	r3, [pc, #344]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b52      	ldr	r3, [pc, #328]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a51      	ldr	r2, [pc, #324]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8092 	beq.w	8003d2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d05c      	beq.n	8003cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d141      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1c:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <HAL_RCC_OscConfig+0x4dc>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7ff fb6f 	bl	8003304 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7ff fb6b 	bl	8003304 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e078      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3c:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	019b      	lsls	r3, r3, #6
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4933      	ldr	r1, [pc, #204]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <HAL_RCC_OscConfig+0x4dc>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7ff fb44 	bl	8003304 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c80:	f7ff fb40 	bl	8003304 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04d      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x41c>
 8003c9e:	e045      	b.n	8003d2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x4dc>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7ff fb2d 	bl	8003304 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7ff fb29 	bl	8003304 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e036      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x44a>
 8003ccc:	e02e      	b.n	8003d2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e029      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d115      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10d      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	42470060 	.word	0x42470060

08003d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0cc      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b68      	ldr	r3, [pc, #416]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d90c      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b65      	ldr	r3, [pc, #404]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b8      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	494d      	ldr	r1, [pc, #308]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d044      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d119      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b3f      	ldr	r3, [pc, #252]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e06f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e067      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4934      	ldr	r1, [pc, #208]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e34:	f7ff fa66 	bl	8003304 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7ff fa62 	bl	8003304 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e04f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d20c      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e032      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4916      	ldr	r1, [pc, #88]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	490e      	ldr	r1, [pc, #56]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eca:	f000 f821 	bl	8003f10 <HAL_RCC_GetSysClockFreq>
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	fa21 f303 	lsr.w	r3, r1, r3
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f9c6 	bl	800327c <HAL_InitTick>

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023c00 	.word	0x40023c00
 8003f00:	40023800 	.word	0x40023800
 8003f04:	080069dc 	.word	0x080069dc
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f26:	4b50      	ldr	r3, [pc, #320]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d007      	beq.n	8003f42 <HAL_RCC_GetSysClockFreq+0x32>
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d008      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x38>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 808d 	bne.w	8004056 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b4b      	ldr	r3, [pc, #300]	; (800406c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f3e:	60bb      	str	r3, [r7, #8]
       break;
 8003f40:	e08c      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f42:	4b4b      	ldr	r3, [pc, #300]	; (8004070 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f44:	60bb      	str	r3, [r7, #8]
      break;
 8003f46:	e089      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f48:	4b47      	ldr	r3, [pc, #284]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f52:	4b45      	ldr	r3, [pc, #276]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d023      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5e:	4b42      	ldr	r3, [pc, #264]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	ea03 0501 	and.w	r5, r3, r1
 8003f74:	ea04 0602 	and.w	r6, r4, r2
 8003f78:	4a3d      	ldr	r2, [pc, #244]	; (8004070 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f7a:	fb02 f106 	mul.w	r1, r2, r6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	fb02 f205 	mul.w	r2, r2, r5
 8003f84:	440a      	add	r2, r1
 8003f86:	493a      	ldr	r1, [pc, #232]	; (8004070 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f88:	fba5 0101 	umull	r0, r1, r5, r1
 8003f8c:	1853      	adds	r3, r2, r1
 8003f8e:	4619      	mov	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f04f 0400 	mov.w	r4, #0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4623      	mov	r3, r4
 8003f9a:	f7fc fde3 	bl	8000b64 <__aeabi_uldivmod>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e049      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	ea03 0501 	and.w	r5, r3, r1
 8003fbc:	ea04 0602 	and.w	r6, r4, r2
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	f04f 0400 	mov.w	r4, #0
 8003fcc:	0154      	lsls	r4, r2, #5
 8003fce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fd2:	014b      	lsls	r3, r1, #5
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	1b49      	subs	r1, r1, r5
 8003fda:	eb62 0206 	sbc.w	r2, r2, r6
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	f04f 0400 	mov.w	r4, #0
 8003fe6:	0194      	lsls	r4, r2, #6
 8003fe8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fec:	018b      	lsls	r3, r1, #6
 8003fee:	1a5b      	subs	r3, r3, r1
 8003ff0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	00e2      	lsls	r2, r4, #3
 8003ffe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004002:	00d9      	lsls	r1, r3, #3
 8004004:	460b      	mov	r3, r1
 8004006:	4614      	mov	r4, r2
 8004008:	195b      	adds	r3, r3, r5
 800400a:	eb44 0406 	adc.w	r4, r4, r6
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	02a2      	lsls	r2, r4, #10
 8004018:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800401c:	0299      	lsls	r1, r3, #10
 800401e:	460b      	mov	r3, r1
 8004020:	4614      	mov	r4, r2
 8004022:	4618      	mov	r0, r3
 8004024:	4621      	mov	r1, r4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f04f 0400 	mov.w	r4, #0
 800402c:	461a      	mov	r2, r3
 800402e:	4623      	mov	r3, r4
 8004030:	f7fc fd98 	bl	8000b64 <__aeabi_uldivmod>
 8004034:	4603      	mov	r3, r0
 8004036:	460c      	mov	r4, r1
 8004038:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_GetSysClockFreq+0x158>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	3301      	adds	r3, #1
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	60bb      	str	r3, [r7, #8]
      break;
 8004054:	e002      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004058:	60bb      	str	r3, [r7, #8]
      break;
 800405a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405c:	68bb      	ldr	r3, [r7, #8]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400
 8004070:	017d7840 	.word	0x017d7840

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004098:	2b00      	cmp	r3, #0
 800409a:	d038      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800409c:	4b68      	ldr	r3, [pc, #416]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a2:	f7ff f92f 	bl	8003304 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040aa:	f7ff f92b 	bl	8003304 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0bd      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040bc:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	071b      	lsls	r3, r3, #28
 80040da:	495a      	ldr	r1, [pc, #360]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040e2:	4b57      	ldr	r3, [pc, #348]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e8:	f7ff f90c 	bl	8003304 <HAL_GetTick>
 80040ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040f0:	f7ff f908 	bl	8003304 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e09a      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004102:	4b50      	ldr	r3, [pc, #320]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8083 	beq.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	4b48      	ldr	r3, [pc, #288]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a47      	ldr	r2, [pc, #284]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
 800412c:	4b45      	ldr	r3, [pc, #276]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004138:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004142:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004144:	f7ff f8de 	bl	8003304 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800414c:	f7ff f8da 	bl	8003304 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e06c      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800415e:	4b3a      	ldr	r3, [pc, #232]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02f      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x166>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	429a      	cmp	r2, r3
 8004186:	d028      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d114      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041b0:	f7ff f8a8 	bl	8003304 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	e00a      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7ff f8a4 	bl	8003304 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e034      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ee      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e6:	d10d      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	4911      	ldr	r1, [pc, #68]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
 8004202:	e005      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800420e:	6093      	str	r3, [r2, #8]
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	4909      	ldr	r1, [pc, #36]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421e:	4313      	orrs	r3, r2
 8004220:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7d1a      	ldrb	r2, [r3, #20]
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004234:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	42470068 	.word	0x42470068
 8004244:	40023800 	.word	0x40023800
 8004248:	40007000 	.word	0x40007000
 800424c:	42470e40 	.word	0x42470e40
 8004250:	424711e0 	.word	0x424711e0

08004254 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e083      	b.n	800436e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7f5b      	ldrb	r3, [r3, #29]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fe32 	bl	8002ee0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	22ca      	movs	r2, #202	; 0xca
 8004288:	625a      	str	r2, [r3, #36]	; 0x24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2253      	movs	r2, #83	; 0x53
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9fb 	bl	800468e <RTC_EnterInitMode>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	22ff      	movs	r2, #255	; 0xff
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2204      	movs	r2, #4
 80042aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e05e      	b.n	800436e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	041a      	lsls	r2, r3, #16
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10e      	bne.n	800433c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f98d 	bl	800463e <HAL_RTC_WaitForSynchro>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2204      	movs	r2, #4
 8004336:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e018      	b.n	800436e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004376:	b590      	push	{r4, r7, lr}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	7f1b      	ldrb	r3, [r3, #28]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_RTC_SetTime+0x1c>
 800438e:	2302      	movs	r3, #2
 8004390:	e0aa      	b.n	80044e8 <HAL_RTC_SetTime+0x172>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2202      	movs	r2, #2
 800439c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d126      	bne.n	80043f2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2200      	movs	r2, #0
 80043b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f992 	bl	80046e6 <RTC_ByteToBcd2>
 80043c2:	4603      	mov	r3, r0
 80043c4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f98b 	bl	80046e6 <RTC_ByteToBcd2>
 80043d0:	4603      	mov	r3, r0
 80043d2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80043d4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f983 	bl	80046e6 <RTC_ByteToBcd2>
 80043e0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80043e2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	78db      	ldrb	r3, [r3, #3]
 80043ea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e018      	b.n	8004424 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d102      	bne.n	8004406 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004412:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004418:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	22ca      	movs	r2, #202	; 0xca
 800442a:	625a      	str	r2, [r3, #36]	; 0x24
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2253      	movs	r2, #83	; 0x53
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f92a 	bl	800468e <RTC_EnterInitMode>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	22ff      	movs	r2, #255	; 0xff
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2204      	movs	r2, #4
 800444c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e047      	b.n	80044e8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004462:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004476:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6899      	ldr	r1, [r3, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800449e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d111      	bne.n	80044d2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8c5 	bl	800463e <HAL_RTC_WaitForSynchro>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	22ff      	movs	r2, #255	; 0xff
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2204      	movs	r2, #4
 80044c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00a      	b.n	80044e8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80044e6:	2300      	movs	r3, #0
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	7f1b      	ldrb	r3, [r3, #28]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_RTC_SetDate+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e094      	b.n	8004636 <HAL_RTC_SetDate+0x146>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2202      	movs	r2, #2
 8004516:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10e      	bne.n	800453c <HAL_RTC_SetDate+0x4c>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	f023 0310 	bic.w	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	330a      	adds	r3, #10
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11c      	bne.n	800457c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	78db      	ldrb	r3, [r3, #3]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8cd 	bl	80046e6 <RTC_ByteToBcd2>
 800454c:	4603      	mov	r3, r0
 800454e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f8c6 	bl	80046e6 <RTC_ByteToBcd2>
 800455a:	4603      	mov	r3, r0
 800455c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800455e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	789b      	ldrb	r3, [r3, #2]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f8be 	bl	80046e6 <RTC_ByteToBcd2>
 800456a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800456c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e00e      	b.n	800459a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	78db      	ldrb	r3, [r3, #3]
 8004580:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004588:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800458e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	22ca      	movs	r2, #202	; 0xca
 80045a0:	625a      	str	r2, [r3, #36]	; 0x24
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2253      	movs	r2, #83	; 0x53
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f86f 	bl	800468e <RTC_EnterInitMode>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2204      	movs	r2, #4
 80045c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e033      	b.n	8004636 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f81e 	bl	800463e <HAL_RTC_WaitForSynchro>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	22ff      	movs	r2, #255	; 0xff
 800460e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2204      	movs	r2, #4
 8004614:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00a      	b.n	8004636 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd90      	pop	{r4, r7, pc}

0800463e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004658:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465a:	f7fe fe53 	bl	8003304 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004660:	e009      	b.n	8004676 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004662:	f7fe fe4f 	bl	8003304 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004670:	d901      	bls.n	8004676 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e007      	b.n	8004686 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ee      	beq.n	8004662 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d119      	bne.n	80046dc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b2:	f7fe fe27 	bl	8003304 <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80046b8:	e009      	b.n	80046ce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80046ba:	f7fe fe23 	bl	8003304 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c8:	d901      	bls.n	80046ce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e007      	b.n	80046de <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ee      	beq.n	80046ba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80046f4:	e005      	b.n	8004702 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	3b0a      	subs	r3, #10
 8004700:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	2b09      	cmp	r3, #9
 8004706:	d8f6      	bhi.n	80046f6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	b2da      	uxtb	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	4313      	orrs	r3, r2
 8004714:	b2db      	uxtb	r3, r3
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e056      	b.n	80047e2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe fbdc 	bl	8002f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	ea42 0103 	orr.w	r1, r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0104 	and.w	r1, r3, #4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_SPI_Transmit+0x22>
 8004808:	2302      	movs	r3, #2
 800480a:	e11e      	b.n	8004a4a <HAL_SPI_Transmit+0x260>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004814:	f7fe fd76 	bl	8003304 <HAL_GetTick>
 8004818:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d002      	beq.n	8004830 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800482a:	2302      	movs	r3, #2
 800482c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800482e:	e103      	b.n	8004a38 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <HAL_SPI_Transmit+0x52>
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004840:	e0fa      	b.n	8004a38 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004888:	d107      	bne.n	800489a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d14b      	bne.n	800495a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Transmit+0xe6>
 80048ca:	8afb      	ldrh	r3, [r7, #22]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d13e      	bne.n	800494e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	881a      	ldrh	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	1c9a      	adds	r2, r3, #2
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048f4:	e02b      	b.n	800494e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d112      	bne.n	800492a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
 8004928:	e011      	b.n	800494e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800492a:	f7fe fceb 	bl	8003304 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d803      	bhi.n	8004942 <HAL_SPI_Transmit+0x158>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d102      	bne.n	8004948 <HAL_SPI_Transmit+0x15e>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800494c:	e074      	b.n	8004a38 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ce      	bne.n	80048f6 <HAL_SPI_Transmit+0x10c>
 8004958:	e04c      	b.n	80049f4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x17e>
 8004962:	8afb      	ldrh	r3, [r7, #22]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d140      	bne.n	80049ea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800498e:	e02c      	b.n	80049ea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	d113      	bne.n	80049c6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049c4:	e011      	b.n	80049ea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c6:	f7fe fc9d 	bl	8003304 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d803      	bhi.n	80049de <HAL_SPI_Transmit+0x1f4>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d102      	bne.n	80049e4 <HAL_SPI_Transmit+0x1fa>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049e8:	e026      	b.n	8004a38 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cd      	bne.n	8004990 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f895 	bl	8004b28 <SPI_EndRxTxTransaction>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e000      	b.n	8004a38 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004a36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a62:	e04c      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d048      	beq.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a6c:	f7fe fc4a 	bl	8003304 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d902      	bls.n	8004a82 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d13d      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9a:	d111      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa4:	d004      	beq.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d107      	bne.n	8004ac0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac8:	d10f      	bne.n	8004aea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e00f      	b.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1a3      	bne.n	8004a64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <SPI_EndRxTxTransaction+0x7c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <SPI_EndRxTxTransaction+0x80>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0d5b      	lsrs	r3, r3, #21
 8004b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d112      	bne.n	8004b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ff77 	bl	8004a52 <SPI_WaitFlagStateUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d0f2      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x52>
 8004b94:	e000      	b.n	8004b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b96:	bf00      	nop
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000004 	.word	0x20000004
 8004ba8:	165e9f81 	.word	0x165e9f81

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e01d      	b.n	8004bfa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe fa38 	bl	8003048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 fa66 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e01d      	b.n	8004c50 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f815 	bl	8004c58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f000 fa3b 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e083      	b.n	8004d88 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fe fa1d 	bl	80030d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb0:	f023 0307 	bic.w	r3, r3, #7
 8004cb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 f9fb 	bl	80050bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d0c:	f023 030c 	bic.w	r3, r3, #12
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	031b      	lsls	r3, r3, #12
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_TIM_IC_ConfigChannel+0x1a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e08a      	b.n	8004ec0 <HAL_TIM_IC_ConfigChannel+0x130>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f000 fa7a 	bl	80052c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 020c 	bic.w	r2, r2, #12
 8004de2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	619a      	str	r2, [r3, #24]
 8004df6:	e05a      	b.n	8004eae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d11c      	bne.n	8004e38 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f000 faf2 	bl	80053f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	e03a      	b.n	8004eae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11b      	bne.n	8004e76 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 fb3f 	bl	80054d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 020c 	bic.w	r2, r2, #12
 8004e60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
 8004e74:	e01b      	b.n	8004eae <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f000 fb5f 	bl	8005548 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_ConfigClockSource+0x18>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e0a6      	b.n	800502e <HAL_TIM_ConfigClockSource+0x166>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d067      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0x120>
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d80b      	bhi.n	8004f34 <HAL_TIM_ConfigClockSource+0x6c>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d073      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x140>
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d802      	bhi.n	8004f2a <HAL_TIM_ConfigClockSource+0x62>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d06f      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f28:	e078      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d06c      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x140>
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d06a      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004f32:	e073      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f34:	2b70      	cmp	r3, #112	; 0x70
 8004f36:	d00d      	beq.n	8004f54 <HAL_TIM_ConfigClockSource+0x8c>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d804      	bhi.n	8004f46 <HAL_TIM_ConfigClockSource+0x7e>
 8004f3c:	2b50      	cmp	r3, #80	; 0x50
 8004f3e:	d033      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xe0>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d041      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004f44:	e06a      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4a:	d066      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x152>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	d017      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004f52:	e063      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f000 fb48 	bl	80055f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
      break;
 8004f80:	e04c      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6899      	ldr	r1, [r3, #8]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f000 fb31 	bl	80055f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e039      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f000 f9ef 	bl	8005398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2150      	movs	r1, #80	; 0x50
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fafe 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8004fc6:	e029      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f000 fa4b 	bl	8005470 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2160      	movs	r1, #96	; 0x60
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 faee 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8004fe6:	e019      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f000 f9cf 	bl	8005398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2140      	movs	r1, #64	; 0x40
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fade 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005006:	e009      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fad5 	bl	80055c2 <TIM_ITRx_SetConfig>
      break;
 8005018:	e000      	b.n	800501c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800501a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_TIM_SlaveConfigSynchro+0x18>
 800504a:	2302      	movs	r3, #2
 800504c:	e031      	b.n	80050b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8ab 	bl	80051bc <TIM_SlaveTimer_SetConfig>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e018      	b.n	80050b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800509e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a34      	ldr	r2, [pc, #208]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00f      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00b      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a31      	ldr	r2, [pc, #196]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <TIM_Base_SetConfig+0xf0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01b      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d017      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_Base_SetConfig+0xf0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <TIM_Base_SetConfig+0xf4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <TIM_Base_SetConfig+0xf8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <TIM_Base_SetConfig+0xfc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d108      	bne.n	8005158 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	615a      	str	r2, [r3, #20]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800

080051bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b30      	cmp	r3, #48	; 0x30
 8005200:	d05c      	beq.n	80052bc <TIM_SlaveTimer_SetConfig+0x100>
 8005202:	2b30      	cmp	r3, #48	; 0x30
 8005204:	d806      	bhi.n	8005214 <TIM_SlaveTimer_SetConfig+0x58>
 8005206:	2b10      	cmp	r3, #16
 8005208:	d058      	beq.n	80052bc <TIM_SlaveTimer_SetConfig+0x100>
 800520a:	2b20      	cmp	r3, #32
 800520c:	d056      	beq.n	80052bc <TIM_SlaveTimer_SetConfig+0x100>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d054      	beq.n	80052bc <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005212:	e054      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005214:	2b50      	cmp	r3, #80	; 0x50
 8005216:	d03d      	beq.n	8005294 <TIM_SlaveTimer_SetConfig+0xd8>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d802      	bhi.n	8005222 <TIM_SlaveTimer_SetConfig+0x66>
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d010      	beq.n	8005242 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005220:	e04d      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005222:	2b60      	cmp	r3, #96	; 0x60
 8005224:	d040      	beq.n	80052a8 <TIM_SlaveTimer_SetConfig+0xec>
 8005226:	2b70      	cmp	r3, #112	; 0x70
 8005228:	d000      	beq.n	800522c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800522a:	e048      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68d9      	ldr	r1, [r3, #12]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f000 f9dc 	bl	80055f8 <TIM_ETR_SetConfig>
      break;
 8005240:	e03d      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b05      	cmp	r3, #5
 8005248:	d101      	bne.n	800524e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e038      	b.n	80052c0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005274:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
      break;
 8005292:	e014      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6899      	ldr	r1, [r3, #8]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f000 f879 	bl	8005398 <TIM_TI1_ConfigInputStage>
      break;
 80052a6:	e00a      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6899      	ldr	r1, [r3, #8]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f000 f8db 	bl	8005470 <TIM_TI2_ConfigInputStage>
      break;
 80052ba:	e000      	b.n	80052be <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80052bc:	bf00      	nop
  }
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0201 	bic.w	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a24      	ldr	r2, [pc, #144]	; (8005384 <TIM_TI1_SetConfig+0xbc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <TIM_TI1_SetConfig+0x56>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d00f      	beq.n	800531e <TIM_TI1_SetConfig+0x56>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a21      	ldr	r2, [pc, #132]	; (8005388 <TIM_TI1_SetConfig+0xc0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_TI1_SetConfig+0x56>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <TIM_TI1_SetConfig+0xc4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_TI1_SetConfig+0x56>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <TIM_TI1_SetConfig+0xc8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_TI1_SetConfig+0x56>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <TIM_TI1_SetConfig+0xcc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d101      	bne.n	8005322 <TIM_TI1_SetConfig+0x5a>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <TIM_TI1_SetConfig+0x5c>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e003      	b.n	8005342 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	b2db      	uxtb	r3, r3
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 030a 	and.w	r3, r3, #10
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000

08005398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 030a 	bic.w	r3, r3, #10
 80053d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f023 0210 	bic.w	r2, r3, #16
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005434:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	031b      	lsls	r3, r3, #12
 800543a:	b29b      	uxth	r3, r3
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005448:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	621a      	str	r2, [r3, #32]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f023 0210 	bic.w	r2, r3, #16
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	031b      	lsls	r3, r3, #12
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0303 	bic.w	r3, r3, #3
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	b2db      	uxtb	r3, r3
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005520:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	621a      	str	r2, [r3, #32]
}
 800553c:	bf00      	nop
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005586:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	031b      	lsls	r3, r3, #12
 800558c:	b29b      	uxth	r3, r3
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800559a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	031b      	lsls	r3, r3, #12
 80055a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f043 0307 	orr.w	r3, r3, #7
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	431a      	orrs	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800564c:	2302      	movs	r3, #2
 800564e:	e050      	b.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d013      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a15      	ldr	r2, [pc, #84]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a13      	ldr	r2, [pc, #76]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d10c      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40010000 	.word	0x40010000
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40014000 	.word	0x40014000

08005714 <__libc_init_array>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0d      	ldr	r6, [pc, #52]	; (800574c <__libc_init_array+0x38>)
 8005718:	4c0d      	ldr	r4, [pc, #52]	; (8005750 <__libc_init_array+0x3c>)
 800571a:	1ba4      	subs	r4, r4, r6
 800571c:	10a4      	asrs	r4, r4, #2
 800571e:	2500      	movs	r5, #0
 8005720:	42a5      	cmp	r5, r4
 8005722:	d109      	bne.n	8005738 <__libc_init_array+0x24>
 8005724:	4e0b      	ldr	r6, [pc, #44]	; (8005754 <__libc_init_array+0x40>)
 8005726:	4c0c      	ldr	r4, [pc, #48]	; (8005758 <__libc_init_array+0x44>)
 8005728:	f000 f8a6 	bl	8005878 <_init>
 800572c:	1ba4      	subs	r4, r4, r6
 800572e:	10a4      	asrs	r4, r4, #2
 8005730:	2500      	movs	r5, #0
 8005732:	42a5      	cmp	r5, r4
 8005734:	d105      	bne.n	8005742 <__libc_init_array+0x2e>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800573c:	4798      	blx	r3
 800573e:	3501      	adds	r5, #1
 8005740:	e7ee      	b.n	8005720 <__libc_init_array+0xc>
 8005742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005746:	4798      	blx	r3
 8005748:	3501      	adds	r5, #1
 800574a:	e7f2      	b.n	8005732 <__libc_init_array+0x1e>
 800574c:	080069f4 	.word	0x080069f4
 8005750:	080069f4 	.word	0x080069f4
 8005754:	080069f4 	.word	0x080069f4
 8005758:	080069f8 	.word	0x080069f8

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>
 800576c:	0000      	movs	r0, r0
	...

08005770 <floor>:
 8005770:	ec51 0b10 	vmov	r0, r1, d0
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800577c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005780:	2e13      	cmp	r6, #19
 8005782:	460c      	mov	r4, r1
 8005784:	ee10 5a10 	vmov	r5, s0
 8005788:	4680      	mov	r8, r0
 800578a:	dc34      	bgt.n	80057f6 <floor+0x86>
 800578c:	2e00      	cmp	r6, #0
 800578e:	da16      	bge.n	80057be <floor+0x4e>
 8005790:	a335      	add	r3, pc, #212	; (adr r3, 8005868 <floor+0xf8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fd25 	bl	80001e4 <__adddf3>
 800579a:	2200      	movs	r2, #0
 800579c:	2300      	movs	r3, #0
 800579e:	f7fb f967 	bl	8000a70 <__aeabi_dcmpgt>
 80057a2:	b148      	cbz	r0, 80057b8 <floor+0x48>
 80057a4:	2c00      	cmp	r4, #0
 80057a6:	da59      	bge.n	800585c <floor+0xec>
 80057a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <floor+0x100>)
 80057ae:	432b      	orrs	r3, r5
 80057b0:	2500      	movs	r5, #0
 80057b2:	42ab      	cmp	r3, r5
 80057b4:	bf18      	it	ne
 80057b6:	4614      	movne	r4, r2
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	e025      	b.n	800580a <floor+0x9a>
 80057be:	4f2d      	ldr	r7, [pc, #180]	; (8005874 <floor+0x104>)
 80057c0:	4137      	asrs	r7, r6
 80057c2:	ea01 0307 	and.w	r3, r1, r7
 80057c6:	4303      	orrs	r3, r0
 80057c8:	d01f      	beq.n	800580a <floor+0x9a>
 80057ca:	a327      	add	r3, pc, #156	; (adr r3, 8005868 <floor+0xf8>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f7fa fd08 	bl	80001e4 <__adddf3>
 80057d4:	2200      	movs	r2, #0
 80057d6:	2300      	movs	r3, #0
 80057d8:	f7fb f94a 	bl	8000a70 <__aeabi_dcmpgt>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d0eb      	beq.n	80057b8 <floor+0x48>
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	bfbe      	ittt	lt
 80057e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80057e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80057ec:	19a4      	addlt	r4, r4, r6
 80057ee:	ea24 0407 	bic.w	r4, r4, r7
 80057f2:	2500      	movs	r5, #0
 80057f4:	e7e0      	b.n	80057b8 <floor+0x48>
 80057f6:	2e33      	cmp	r6, #51	; 0x33
 80057f8:	dd0b      	ble.n	8005812 <floor+0xa2>
 80057fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057fe:	d104      	bne.n	800580a <floor+0x9a>
 8005800:	ee10 2a10 	vmov	r2, s0
 8005804:	460b      	mov	r3, r1
 8005806:	f7fa fced 	bl	80001e4 <__adddf3>
 800580a:	ec41 0b10 	vmov	d0, r0, r1
 800580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005812:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005816:	f04f 33ff 	mov.w	r3, #4294967295
 800581a:	fa23 f707 	lsr.w	r7, r3, r7
 800581e:	4207      	tst	r7, r0
 8005820:	d0f3      	beq.n	800580a <floor+0x9a>
 8005822:	a311      	add	r3, pc, #68	; (adr r3, 8005868 <floor+0xf8>)
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f7fa fcdc 	bl	80001e4 <__adddf3>
 800582c:	2200      	movs	r2, #0
 800582e:	2300      	movs	r3, #0
 8005830:	f7fb f91e 	bl	8000a70 <__aeabi_dcmpgt>
 8005834:	2800      	cmp	r0, #0
 8005836:	d0bf      	beq.n	80057b8 <floor+0x48>
 8005838:	2c00      	cmp	r4, #0
 800583a:	da02      	bge.n	8005842 <floor+0xd2>
 800583c:	2e14      	cmp	r6, #20
 800583e:	d103      	bne.n	8005848 <floor+0xd8>
 8005840:	3401      	adds	r4, #1
 8005842:	ea25 0507 	bic.w	r5, r5, r7
 8005846:	e7b7      	b.n	80057b8 <floor+0x48>
 8005848:	2301      	movs	r3, #1
 800584a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800584e:	fa03 f606 	lsl.w	r6, r3, r6
 8005852:	4435      	add	r5, r6
 8005854:	4545      	cmp	r5, r8
 8005856:	bf38      	it	cc
 8005858:	18e4      	addcc	r4, r4, r3
 800585a:	e7f2      	b.n	8005842 <floor+0xd2>
 800585c:	2500      	movs	r5, #0
 800585e:	462c      	mov	r4, r5
 8005860:	e7aa      	b.n	80057b8 <floor+0x48>
 8005862:	bf00      	nop
 8005864:	f3af 8000 	nop.w
 8005868:	8800759c 	.word	0x8800759c
 800586c:	7e37e43c 	.word	0x7e37e43c
 8005870:	bff00000 	.word	0xbff00000
 8005874:	000fffff 	.word	0x000fffff

08005878 <_init>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr

08005884 <_fini>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr
