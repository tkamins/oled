
rtc_remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a4  080053a4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ac  080053ac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000153ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080053b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000078  0800542c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800542c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd04  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a9  00000000  00000000  0002fdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001811e  00000000  00000000  00033e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd02  00000000  00000000  0004bf9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095751  00000000  00000000  00057ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  000ed46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a4c 	.word	0x08004a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004a4c 	.word	0x08004a4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SSD1322_API_command>:
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
 800058a:	f000 faab 	bl	8000ae4 <SSD1322_HW_drive_CS_low>
 800058e:	f000 fac1 	bl	8000b14 <SSD1322_HW_drive_DC_low>
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 faed 	bl	8000b74 <SSD1322_HW_SPI_send_byte>
 800059a:	f000 faaf 	bl	8000afc <SSD1322_HW_drive_CS_high>
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <SSD1322_API_data>:
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	f000 fa98 	bl	8000ae4 <SSD1322_HW_drive_CS_low>
 80005b4:	f000 faba 	bl	8000b2c <SSD1322_HW_drive_DC_high>
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fada 	bl	8000b74 <SSD1322_HW_SPI_send_byte>
 80005c0:	f000 fa9c 	bl	8000afc <SSD1322_HW_drive_CS_high>
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SSD1322_API_init>:
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	f000 fab8 	bl	8000b44 <SSD1322_HW_drive_RESET_low>
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 faf1 	bl	8000bbc <SSD1322_HW_msDelay>
 80005da:	f000 fabf 	bl	8000b5c <SSD1322_HW_drive_RESET_high>
 80005de:	2032      	movs	r0, #50	; 0x32
 80005e0:	f000 faec 	bl	8000bbc <SSD1322_HW_msDelay>
 80005e4:	20fd      	movs	r0, #253	; 0xfd
 80005e6:	f7ff ffcb 	bl	8000580 <SSD1322_API_command>
 80005ea:	2012      	movs	r0, #18
 80005ec:	f7ff ffdb 	bl	80005a6 <SSD1322_API_data>
 80005f0:	20ae      	movs	r0, #174	; 0xae
 80005f2:	f7ff ffc5 	bl	8000580 <SSD1322_API_command>
 80005f6:	20b3      	movs	r0, #179	; 0xb3
 80005f8:	f7ff ffc2 	bl	8000580 <SSD1322_API_command>
 80005fc:	2091      	movs	r0, #145	; 0x91
 80005fe:	f7ff ffd2 	bl	80005a6 <SSD1322_API_data>
 8000602:	20ca      	movs	r0, #202	; 0xca
 8000604:	f7ff ffbc 	bl	8000580 <SSD1322_API_command>
 8000608:	203f      	movs	r0, #63	; 0x3f
 800060a:	f7ff ffcc 	bl	80005a6 <SSD1322_API_data>
 800060e:	20a2      	movs	r0, #162	; 0xa2
 8000610:	f7ff ffb6 	bl	8000580 <SSD1322_API_command>
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffc6 	bl	80005a6 <SSD1322_API_data>
 800061a:	20a1      	movs	r0, #161	; 0xa1
 800061c:	f7ff ffb0 	bl	8000580 <SSD1322_API_command>
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffc0 	bl	80005a6 <SSD1322_API_data>
 8000626:	20a0      	movs	r0, #160	; 0xa0
 8000628:	f7ff ffaa 	bl	8000580 <SSD1322_API_command>
 800062c:	2014      	movs	r0, #20
 800062e:	f7ff ffba 	bl	80005a6 <SSD1322_API_data>
 8000632:	2011      	movs	r0, #17
 8000634:	f7ff ffb7 	bl	80005a6 <SSD1322_API_data>
 8000638:	20b5      	movs	r0, #181	; 0xb5
 800063a:	f7ff ffa1 	bl	8000580 <SSD1322_API_command>
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ffb1 	bl	80005a6 <SSD1322_API_data>
 8000644:	20ab      	movs	r0, #171	; 0xab
 8000646:	f7ff ff9b 	bl	8000580 <SSD1322_API_command>
 800064a:	2001      	movs	r0, #1
 800064c:	f7ff ffab 	bl	80005a6 <SSD1322_API_data>
 8000650:	20b4      	movs	r0, #180	; 0xb4
 8000652:	f7ff ff95 	bl	8000580 <SSD1322_API_command>
 8000656:	20a0      	movs	r0, #160	; 0xa0
 8000658:	f7ff ffa5 	bl	80005a6 <SSD1322_API_data>
 800065c:	20fd      	movs	r0, #253	; 0xfd
 800065e:	f7ff ffa2 	bl	80005a6 <SSD1322_API_data>
 8000662:	20c1      	movs	r0, #193	; 0xc1
 8000664:	f7ff ff8c 	bl	8000580 <SSD1322_API_command>
 8000668:	20ff      	movs	r0, #255	; 0xff
 800066a:	f7ff ff9c 	bl	80005a6 <SSD1322_API_data>
 800066e:	20c7      	movs	r0, #199	; 0xc7
 8000670:	f7ff ff86 	bl	8000580 <SSD1322_API_command>
 8000674:	200f      	movs	r0, #15
 8000676:	f7ff ff96 	bl	80005a6 <SSD1322_API_data>
 800067a:	20b9      	movs	r0, #185	; 0xb9
 800067c:	f7ff ff80 	bl	8000580 <SSD1322_API_command>
 8000680:	20b1      	movs	r0, #177	; 0xb1
 8000682:	f7ff ff7d 	bl	8000580 <SSD1322_API_command>
 8000686:	20e2      	movs	r0, #226	; 0xe2
 8000688:	f7ff ff8d 	bl	80005a6 <SSD1322_API_data>
 800068c:	20d1      	movs	r0, #209	; 0xd1
 800068e:	f7ff ff77 	bl	8000580 <SSD1322_API_command>
 8000692:	2082      	movs	r0, #130	; 0x82
 8000694:	f7ff ff87 	bl	80005a6 <SSD1322_API_data>
 8000698:	2020      	movs	r0, #32
 800069a:	f7ff ff84 	bl	80005a6 <SSD1322_API_data>
 800069e:	20bb      	movs	r0, #187	; 0xbb
 80006a0:	f7ff ff6e 	bl	8000580 <SSD1322_API_command>
 80006a4:	201f      	movs	r0, #31
 80006a6:	f7ff ff7e 	bl	80005a6 <SSD1322_API_data>
 80006aa:	20b6      	movs	r0, #182	; 0xb6
 80006ac:	f7ff ff68 	bl	8000580 <SSD1322_API_command>
 80006b0:	2008      	movs	r0, #8
 80006b2:	f7ff ff78 	bl	80005a6 <SSD1322_API_data>
 80006b6:	20be      	movs	r0, #190	; 0xbe
 80006b8:	f7ff ff62 	bl	8000580 <SSD1322_API_command>
 80006bc:	2007      	movs	r0, #7
 80006be:	f7ff ff72 	bl	80005a6 <SSD1322_API_data>
 80006c2:	20a6      	movs	r0, #166	; 0xa6
 80006c4:	f7ff ff5c 	bl	8000580 <SSD1322_API_command>
 80006c8:	20a9      	movs	r0, #169	; 0xa9
 80006ca:	f7ff ff59 	bl	8000580 <SSD1322_API_command>
 80006ce:	200a      	movs	r0, #10
 80006d0:	f000 fa74 	bl	8000bbc <SSD1322_HW_msDelay>
 80006d4:	20af      	movs	r0, #175	; 0xaf
 80006d6:	f7ff ff53 	bl	8000580 <SSD1322_API_command>
 80006da:	2032      	movs	r0, #50	; 0x32
 80006dc:	f000 fa6e 	bl	8000bbc <SSD1322_HW_msDelay>
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SSD1322_API_set_window>:
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4604      	mov	r4, r0
 80006ec:	4608      	mov	r0, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	4623      	mov	r3, r4
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	4603      	mov	r3, r0
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	460b      	mov	r3, r1
 80006fc:	717b      	strb	r3, [r7, #5]
 80006fe:	4613      	mov	r3, r2
 8000700:	713b      	strb	r3, [r7, #4]
 8000702:	2015      	movs	r0, #21
 8000704:	f7ff ff3c 	bl	8000580 <SSD1322_API_command>
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	331c      	adds	r3, #28
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff49 	bl	80005a6 <SSD1322_API_data>
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	331c      	adds	r3, #28
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff43 	bl	80005a6 <SSD1322_API_data>
 8000720:	2075      	movs	r0, #117	; 0x75
 8000722:	f7ff ff2d 	bl	8000580 <SSD1322_API_command>
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff3c 	bl	80005a6 <SSD1322_API_data>
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff38 	bl	80005a6 <SSD1322_API_data>
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bd90      	pop	{r4, r7, pc}

0800073e <SSD1322_API_send_buffer>:
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
 8000748:	205c      	movs	r0, #92	; 0x5c
 800074a:	f7ff ff19 	bl	8000580 <SSD1322_API_command>
 800074e:	f000 f9c9 	bl	8000ae4 <SSD1322_HW_drive_CS_low>
 8000752:	f000 f9eb 	bl	8000b2c <SSD1322_HW_drive_DC_high>
 8000756:	6839      	ldr	r1, [r7, #0]
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fa1d 	bl	8000b98 <SSD1322_HW_SPI_send_array>
 800075e:	f000 f9cd 	bl	8000afc <SSD1322_HW_drive_CS_high>
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <set_buffer_size>:
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <set_buffer_size+0x24>)
 800077e:	88bb      	ldrh	r3, [r7, #4]
 8000780:	8013      	strh	r3, [r2, #0]
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <fill_buffer>:
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	011b      	lsls	r3, r3, #4
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	72fb      	strb	r3, [r7, #11]
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <fill_buffer+0x54>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <fill_buffer+0x58>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	fb03 f302 	mul.w	r3, r3, r2
 80007be:	0fda      	lsrs	r2, r3, #31
 80007c0:	4413      	add	r3, r2
 80007c2:	105b      	asrs	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e004      	b.n	80007d2 <fill_buffer+0x3e>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	7afa      	ldrb	r2, [r7, #11]
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	60fa      	str	r2, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f5      	bne.n	80007c8 <fill_buffer+0x34>
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000002 	.word	0x20000002

080007f0 <draw_pixel>:
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4603      	mov	r3, r0
 8000800:	817b      	strh	r3, [r7, #10]
 8000802:	460b      	mov	r3, r1
 8000804:	813b      	strh	r3, [r7, #8]
 8000806:	4613      	mov	r3, r2
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	897a      	ldrh	r2, [r7, #10]
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <draw_pixel+0xf4>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	3b01      	subs	r3, #1
 8000812:	429a      	cmp	r2, r3
 8000814:	dc60      	bgt.n	80008d8 <draw_pixel+0xe8>
 8000816:	893a      	ldrh	r2, [r7, #8]
 8000818:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <draw_pixel+0xf8>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	429a      	cmp	r2, r3
 8000820:	dc5a      	bgt.n	80008d8 <draw_pixel+0xe8>
 8000822:	893b      	ldrh	r3, [r7, #8]
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <draw_pixel+0xf4>)
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	fb02 f203 	mul.w	r2, r2, r3
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	4413      	add	r3, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	bfb8      	it	lt
 8000838:	425b      	neglt	r3, r3
 800083a:	2b01      	cmp	r3, #1
 800083c:	d125      	bne.n	800088a <draw_pixel+0x9a>
 800083e:	893b      	ldrh	r3, [r7, #8]
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <draw_pixel+0xf4>)
 8000842:	8812      	ldrh	r2, [r2, #0]
 8000844:	fb02 f203 	mul.w	r2, r2, r3
 8000848:	897b      	ldrh	r3, [r7, #10]
 800084a:	4413      	add	r3, r2
 800084c:	0fda      	lsrs	r2, r3, #31
 800084e:	4413      	add	r3, r2
 8000850:	105b      	asrs	r3, r3, #1
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b25b      	sxtb	r3, r3
 800085c:	f023 030f 	bic.w	r3, r3, #15
 8000860:	b25a      	sxtb	r2, r3
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	4313      	orrs	r3, r2
 8000868:	b259      	sxtb	r1, r3
 800086a:	893b      	ldrh	r3, [r7, #8]
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <draw_pixel+0xf4>)
 800086e:	8812      	ldrh	r2, [r2, #0]
 8000870:	fb02 f203 	mul.w	r2, r2, r3
 8000874:	897b      	ldrh	r3, [r7, #10]
 8000876:	4413      	add	r3, r2
 8000878:	0fda      	lsrs	r2, r3, #31
 800087a:	4413      	add	r3, r2
 800087c:	105b      	asrs	r3, r3, #1
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	b2ca      	uxtb	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e027      	b.n	80008da <draw_pixel+0xea>
 800088a:	893b      	ldrh	r3, [r7, #8]
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <draw_pixel+0xf4>)
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	fb02 f203 	mul.w	r2, r2, r3
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	4413      	add	r3, r2
 8000898:	0fda      	lsrs	r2, r3, #31
 800089a:	4413      	add	r3, r2
 800089c:	105b      	asrs	r3, r3, #1
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b259      	sxtb	r1, r3
 80008b8:	893b      	ldrh	r3, [r7, #8]
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <draw_pixel+0xf4>)
 80008bc:	8812      	ldrh	r2, [r2, #0]
 80008be:	fb02 f203 	mul.w	r2, r2, r3
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	4413      	add	r3, r2
 80008c6:	0fda      	lsrs	r2, r3, #31
 80008c8:	4413      	add	r3, r2
 80008ca:	105b      	asrs	r3, r3, #1
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e000      	b.n	80008da <draw_pixel+0xea>
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	20000002 	.word	0x20000002
 80008e8:	20000000 	.word	0x20000000

080008ec <select_font>:
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <select_font+0x1c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000094 	.word	0x20000094

0800090c <draw_char>:
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4603      	mov	r3, r0
 800091c:	72fb      	strb	r3, [r7, #11]
 800091e:	460b      	mov	r3, r1
 8000920:	813b      	strh	r3, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <draw_char+0x12c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d07f      	beq.n	8000a2e <draw_char+0x122>
 800092e:	4b42      	ldr	r3, [pc, #264]	; (8000a38 <draw_char+0x12c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	891b      	ldrh	r3, [r3, #8]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	7afa      	ldrb	r2, [r7, #11]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	72fb      	strb	r3, [r7, #11]
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <draw_char+0x12c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <draw_char+0x12c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	75fb      	strb	r3, [r7, #23]
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	78db      	ldrb	r3, [r3, #3]
 8000962:	75bb      	strb	r3, [r7, #22]
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	757b      	strb	r3, [r7, #21]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	799b      	ldrb	r3, [r3, #6]
 800096e:	753b      	strb	r3, [r7, #20]
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000982:	2300      	movs	r3, #0
 8000984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800098e:	e048      	b.n	8000a22 <draw_char+0x116>
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000996:	e03a      	b.n	8000a0e <draw_char+0x102>
 8000998:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d108      	bne.n	80009bc <draw_char+0xb0>
 80009aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	84fa      	strh	r2, [r7, #38]	; 0x26
 80009b0:	461a      	mov	r2, r3
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80009bc:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da1a      	bge.n	80009fa <draw_char+0xee>
 80009c4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	893b      	ldrh	r3, [r7, #8]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4413      	add	r3, r2
 80009d8:	b299      	uxth	r1, r3
 80009da:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	4413      	add	r3, r2
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fefb 	bl	80007f0 <draw_pixel>
 80009fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000a04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000a0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3bf      	bcc.n	8000998 <draw_char+0x8c>
 8000a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a26:	7dbb      	ldrb	r3, [r7, #22]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3b1      	bcc.n	8000990 <draw_char+0x84>
 8000a2c:	e000      	b.n	8000a30 <draw_char+0x124>
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000094 	.word	0x20000094

08000a3c <draw_text>:
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	e01b      	b.n	8000a8c <draw_text+0x50>
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	7819      	ldrb	r1, [r3, #0]
 8000a58:	88b8      	ldrh	r0, [r7, #4]
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	7e3b      	ldrb	r3, [r7, #24]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4603      	mov	r3, r0
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ff52 	bl	800090c <draw_char>
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <draw_text+0x60>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000a76:	3b20      	subs	r3, #32
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	80fb      	strh	r3, [r7, #6]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1df      	bne.n	8000a54 <draw_text+0x18>
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000094 	.word	0x20000094

08000aa0 <send_buffer_to_OLED>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	803b      	strh	r3, [r7, #0]
 8000ab0:	237f      	movs	r3, #127	; 0x7f
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	213f      	movs	r1, #63	; 0x3f
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fe14 	bl	80006e4 <SSD1322_API_set_window>
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	0fda      	lsrs	r2, r3, #31
 8000ac2:	4413      	add	r3, r2
 8000ac4:	105b      	asrs	r3, r3, #1
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe32 	bl	800073e <SSD1322_API_send_buffer>
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <SSD1322_HW_drive_CS_low+0x14>)
 8000af0:	f001 f93a 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40020400 	.word	0x40020400

08000afc <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b06:	4802      	ldr	r0, [pc, #8]	; (8000b10 <SSD1322_HW_drive_CS_high+0x14>)
 8000b08:	f001 f92e 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020400 	.word	0x40020400

08000b14 <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1e:	4802      	ldr	r0, [pc, #8]	; (8000b28 <SSD1322_HW_drive_DC_low+0x14>)
 8000b20:	f001 f922 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40020400 	.word	0x40020400

08000b2c <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_DC_GPIO_Port, SPI2_DC_Pin, 1);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <SSD1322_HW_drive_DC_high+0x14>)
 8000b38:	f001 f916 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40020400 	.word	0x40020400

08000b44 <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4802      	ldr	r0, [pc, #8]	; (8000b58 <SSD1322_HW_drive_RESET_low+0x14>)
 8000b50:	f001 f90a 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020400 	.word	0x40020400

08000b5c <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI2_RESET_GPIO_Port, SPI2_RESET_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <SSD1322_HW_drive_RESET_high+0x14>)
 8000b68:	f001 f8fe 	bl	8001d68 <HAL_GPIO_WritePin>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40020400 	.word	0x40020400

08000b74 <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte_to_transmit, 1, 10);
 8000b7e:	1df9      	adds	r1, r7, #7
 8000b80:	230a      	movs	r3, #10
 8000b82:	2201      	movs	r2, #1
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <SSD1322_HW_SPI_send_byte+0x20>)
 8000b86:	f002 f9e3 	bl	8002f50 <HAL_SPI_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000ac 	.word	0x200000ac

08000b98 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi2, array_to_transmit, array_size, 100);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2364      	movs	r3, #100	; 0x64
 8000ba8:	6879      	ldr	r1, [r7, #4]
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <SSD1322_HW_SPI_send_array+0x20>)
 8000bac:	f002 f9d0 	bl	8002f50 <HAL_SPI_Transmit>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000ac 	.word	0x200000ac

08000bbc <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 fe19 	bl	80017fc <HAL_Delay>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <get_time>:

  /* USER CODE END RTC_Init 4 */
}

void get_time(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	481b      	ldr	r0, [pc, #108]	; (8000c50 <get_time+0x7c>)
 8000be2:	f001 ff6d 	bl	8002ac0 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <get_time+0x7c>)
 8000bf0:	f002 f86b 	bl	8002cca <HAL_RTC_GetDate>

  mhour = gTime.Hours;
 8000bf4:	783a      	ldrb	r2, [r7, #0]
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <get_time+0x80>)
 8000bf8:	701a      	strb	r2, [r3, #0]
  mmin = gTime.Minutes;
 8000bfa:	787a      	ldrb	r2, [r7, #1]
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <get_time+0x84>)
 8000bfe:	701a      	strb	r2, [r3, #0]
  msec = gTime.Seconds;
 8000c00:	78ba      	ldrb	r2, [r7, #2]
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <get_time+0x88>)
 8000c04:	701a      	strb	r2, [r3, #0]

  mdate = gDate.Date;
 8000c06:	7dba      	ldrb	r2, [r7, #22]
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <get_time+0x8c>)
 8000c0a:	701a      	strb	r2, [r3, #0]
  mmonth = gDate.Month;
 8000c0c:	7d7a      	ldrb	r2, [r7, #21]
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <get_time+0x90>)
 8000c10:	701a      	strb	r2, [r3, #0]
  myear = gDate.Year;
 8000c12:	7dfa      	ldrb	r2, [r7, #23]
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <get_time+0x94>)
 8000c16:	701a      	strb	r2, [r3, #0]
  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000c18:	783b      	ldrb	r3, [r7, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	787b      	ldrb	r3, [r7, #1]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	460b      	mov	r3, r1
 8000c26:	4911      	ldr	r1, [pc, #68]	; (8000c6c <get_time+0x98>)
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <get_time+0x9c>)
 8000c2a:	f003 fb09 	bl	8004240 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000c2e:	7dbb      	ldrb	r3, [r7, #22]
 8000c30:	461a      	mov	r2, r3
 8000c32:	7d7b      	ldrb	r3, [r7, #21]
 8000c34:	4619      	mov	r1, r3
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <get_time+0xa0>)
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <get_time+0xa4>)
 8000c44:	f003 fafc 	bl	8004240 <siprintf>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000154 	.word	0x20000154
 8000c54:	20000106 	.word	0x20000106
 8000c58:	20000108 	.word	0x20000108
 8000c5c:	20000105 	.word	0x20000105
 8000c60:	20000107 	.word	0x20000107
 8000c64:	20000183 	.word	0x20000183
 8000c68:	20000104 	.word	0x20000104
 8000c6c:	08004a78 	.word	0x08004a78
 8000c70:	20000178 	.word	0x20000178
 8000c74:	08004a88 	.word	0x08004a88
 8000c78:	200001c4 	.word	0x200001c4

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000c82:	b082      	sub	sp, #8
 8000c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c86:	f000 fd47 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8a:	f000 f905 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8e:	f000 fa8b 	bl	80011a8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c92:	f000 f983 	bl	8000f9c <MX_RTC_Init>
  MX_SPI2_Init();
 8000c96:	f000 f9db 	bl	8001050 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c9a:	f000 fa0f 	bl	80010bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c9e:	f000 fa59 	bl	8001154 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Stop(&htim2);
 8000ca2:	4873      	ldr	r0, [pc, #460]	; (8000e70 <main+0x1f4>)
 8000ca4:	f002 fb83 	bl	80033ae <HAL_TIM_Base_Stop>
	// Declare bytes array for a frame buffer.
	// Dimensions are divided by 2 because one byte contains two 4-bit grayscale pixels
	uint8_t tx_buf[256 * 64 / 2];

	//Call initialization seqence for SSD1322
	SSD1322_API_init();
 8000ca8:	f7ff fc90 	bl	80005cc <SSD1322_API_init>
	set_buffer_size(256, 64);
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cb2:	f7ff fd5b 	bl	800076c <set_buffer_size>
	// now let's try to write some text with a font
	// first thing to do is font selection
	select_font(&FreeMono12pt7b);
 8000cb6:	486f      	ldr	r0, [pc, #444]	; (8000e74 <main+0x1f8>)
 8000cb8:	f7ff fe18 	bl	80008ec <select_font>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!(GPIOC -> IDR & ir_clk_Pin))
 8000cbc:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <main+0x1fc>)
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d134      	bne.n	8000d32 <main+0xb6>
	  {
		//clean buffer
	  	get_time();
 8000cc8:	f7ff ff84 	bl	8000bd4 <get_time>
		set_buffer_size(256, 64);
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000cd2:	f7ff fd4b 	bl	800076c <set_buffer_size>
		// Fill buffer with zeros to clear any garbage values
		fill_buffer(tx_buf, 0);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd5a 	bl	8000794 <fill_buffer>

		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff feda 	bl	8000aa0 <send_buffer_to_OLED>
		HAL_Delay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f000 fd85 	bl	80017fc <HAL_Delay>
		fill_buffer(tx_buf, 0);
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd4c 	bl	8000794 <fill_buffer>

		// now text will we written with that font
		draw_text(tx_buf, (char*)time, 10, 20, 15);
 8000cfc:	4638      	mov	r0, r7
 8000cfe:	230f      	movs	r3, #15
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2314      	movs	r3, #20
 8000d04:	220a      	movs	r2, #10
 8000d06:	495d      	ldr	r1, [pc, #372]	; (8000e7c <main+0x200>)
 8000d08:	f7ff fe98 	bl	8000a3c <draw_text>
		draw_text(tx_buf, (char*)date, 32, 40, 15);
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	230f      	movs	r3, #15
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2328      	movs	r3, #40	; 0x28
 8000d14:	2220      	movs	r2, #32
 8000d16:	495a      	ldr	r1, [pc, #360]	; (8000e80 <main+0x204>)
 8000d18:	f7ff fe90 	bl	8000a3c <draw_text>
		// send a frame buffer to the display
		send_buffer_to_OLED(tx_buf, 0, 0);
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff febc 	bl	8000aa0 <send_buffer_to_OLED>
		HAL_Delay(2000);
 8000d28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d2c:	f000 fd66 	bl	80017fc <HAL_Delay>
 8000d30:	e7c4      	b.n	8000cbc <main+0x40>
	  }
	  else
	  {

		  if(byte_rec)
 8000d32:	4b54      	ldr	r3, [pc, #336]	; (8000e84 <main+0x208>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 808a 	beq.w	8000e50 <main+0x1d4>
		  {
		      byte_rec = 0;
 8000d3c:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <main+0x208>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
		     // putchar(ir_code);
		      switch (ir_code)
 8000d42:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <main+0x20c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b4a      	cmp	r3, #74	; 0x4a
 8000d48:	d03f      	beq.n	8000dca <main+0x14e>
 8000d4a:	2b4a      	cmp	r3, #74	; 0x4a
 8000d4c:	dc0d      	bgt.n	8000d6a <main+0xee>
 8000d4e:	2b30      	cmp	r3, #48	; 0x30
 8000d50:	d01f      	beq.n	8000d92 <main+0x116>
 8000d52:	2b30      	cmp	r3, #48	; 0x30
 8000d54:	dc04      	bgt.n	8000d60 <main+0xe4>
 8000d56:	2b10      	cmp	r3, #16
 8000d58:	d027      	beq.n	8000daa <main+0x12e>
 8000d5a:	2b18      	cmp	r3, #24
 8000d5c:	d01d      	beq.n	8000d9a <main+0x11e>
 8000d5e:	e044      	b.n	8000dea <main+0x16e>
 8000d60:	2b38      	cmp	r3, #56	; 0x38
 8000d62:	d026      	beq.n	8000db2 <main+0x136>
 8000d64:	2b42      	cmp	r3, #66	; 0x42
 8000d66:	d02c      	beq.n	8000dc2 <main+0x146>
 8000d68:	e03f      	b.n	8000dea <main+0x16e>
 8000d6a:	2b62      	cmp	r3, #98	; 0x62
 8000d6c:	d039      	beq.n	8000de2 <main+0x166>
 8000d6e:	2b62      	cmp	r3, #98	; 0x62
 8000d70:	dc04      	bgt.n	8000d7c <main+0x100>
 8000d72:	2b52      	cmp	r3, #82	; 0x52
 8000d74:	d02d      	beq.n	8000dd2 <main+0x156>
 8000d76:	2b5a      	cmp	r3, #90	; 0x5a
 8000d78:	d01f      	beq.n	8000dba <main+0x13e>
 8000d7a:	e036      	b.n	8000dea <main+0x16e>
 8000d7c:	2ba2      	cmp	r3, #162	; 0xa2
 8000d7e:	d02c      	beq.n	8000dda <main+0x15e>
 8000d80:	2bb0      	cmp	r3, #176	; 0xb0
 8000d82:	d002      	beq.n	8000d8a <main+0x10e>
 8000d84:	2b7a      	cmp	r3, #122	; 0x7a
 8000d86:	d00c      	beq.n	8000da2 <main+0x126>
 8000d88:	e02f      	b.n	8000dea <main+0x16e>
		      {
		          case 0xB0:
		          key = 0;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <main+0x210>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
		          break;
 8000d90:	e02b      	b.n	8000dea <main+0x16e>

		          case 0x30:
		          key = '1';
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <main+0x210>)
 8000d94:	2231      	movs	r2, #49	; 0x31
 8000d96:	701a      	strb	r2, [r3, #0]
		          break;
 8000d98:	e027      	b.n	8000dea <main+0x16e>

		          case 0x18:
		          key = '2';
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <main+0x210>)
 8000d9c:	2232      	movs	r2, #50	; 0x32
 8000d9e:	701a      	strb	r2, [r3, #0]
		          break;
 8000da0:	e023      	b.n	8000dea <main+0x16e>

		          case 0x7A:
		          key = '3';
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <main+0x210>)
 8000da4:	2233      	movs	r2, #51	; 0x33
 8000da6:	701a      	strb	r2, [r3, #0]
		          break;
 8000da8:	e01f      	b.n	8000dea <main+0x16e>

		          case 0x10:
		          key = '4';
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <main+0x210>)
 8000dac:	2234      	movs	r2, #52	; 0x34
 8000dae:	701a      	strb	r2, [r3, #0]
		          break;
 8000db0:	e01b      	b.n	8000dea <main+0x16e>

		          case 0x38:
		          key = '5';
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <main+0x210>)
 8000db4:	2235      	movs	r2, #53	; 0x35
 8000db6:	701a      	strb	r2, [r3, #0]
		          break;
 8000db8:	e017      	b.n	8000dea <main+0x16e>

		          case 0x5A:
		          key = '6';
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <main+0x210>)
 8000dbc:	2236      	movs	r2, #54	; 0x36
 8000dbe:	701a      	strb	r2, [r3, #0]
		          break;
 8000dc0:	e013      	b.n	8000dea <main+0x16e>

		          case 0x42:
		          key = '7';
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <main+0x210>)
 8000dc4:	2237      	movs	r2, #55	; 0x37
 8000dc6:	701a      	strb	r2, [r3, #0]
		          break;
 8000dc8:	e00f      	b.n	8000dea <main+0x16e>

		          case 0x4A:
		          key = '8';
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <main+0x210>)
 8000dcc:	2238      	movs	r2, #56	; 0x38
 8000dce:	701a      	strb	r2, [r3, #0]
		          break;
 8000dd0:	e00b      	b.n	8000dea <main+0x16e>

		          case 0x52:
		          key = '9';
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <main+0x210>)
 8000dd4:	2239      	movs	r2, #57	; 0x39
 8000dd6:	701a      	strb	r2, [r3, #0]
		          break;
 8000dd8:	e007      	b.n	8000dea <main+0x16e>

		          case 0xA2:
		          key = 'P';
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <main+0x210>)
 8000ddc:	2250      	movs	r2, #80	; 0x50
 8000dde:	701a      	strb	r2, [r3, #0]
		          break;
 8000de0:	e003      	b.n	8000dea <main+0x16e>

		          case 0x62:
		          key = 'S';
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <main+0x210>)
 8000de4:	2253      	movs	r2, #83	; 0x53
 8000de6:	701a      	strb	r2, [r3, #0]
		          break;
 8000de8:	bf00      	nop

		      }
		      ir_code = 0;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <main+0x20c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, &key, 1, HAL_MAX_DELAY);
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2201      	movs	r2, #1
 8000df6:	4925      	ldr	r1, [pc, #148]	; (8000e8c <main+0x210>)
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <main+0x214>)
 8000dfa:	f002 fd90 	bl	800391e <HAL_UART_Transmit>
				// Fill buffer with zeros to clear any garbage values
				fill_buffer(tx_buf, 0);
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fcc6 	bl	8000794 <fill_buffer>

				// send a frame buffer to the display
				send_buffer_to_OLED(tx_buf, 0, 0);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe46 	bl	8000aa0 <send_buffer_to_OLED>
				HAL_Delay(1);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f000 fcf1 	bl	80017fc <HAL_Delay>
				fill_buffer(tx_buf, 0);
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fcb8 	bl	8000794 <fill_buffer>

				  sprintf((char*)time,"%d ",(key-0x30));  // I like the date first
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <main+0x210>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3b30      	subs	r3, #48	; 0x30
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4919      	ldr	r1, [pc, #100]	; (8000e94 <main+0x218>)
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <main+0x200>)
 8000e30:	f003 fa06 	bl	8004240 <siprintf>
				// now text will we written with that font
				draw_text(tx_buf, (char*)time, 10, 30, 15);
 8000e34:	4638      	mov	r0, r7
 8000e36:	230f      	movs	r3, #15
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	231e      	movs	r3, #30
 8000e3c:	220a      	movs	r2, #10
 8000e3e:	490f      	ldr	r1, [pc, #60]	; (8000e7c <main+0x200>)
 8000e40:	f7ff fdfc 	bl	8000a3c <draw_text>
				// send a frame buffer to the display
				send_buffer_to_OLED(tx_buf, 0, 0);
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe28 	bl	8000aa0 <send_buffer_to_OLED>
		  }
		  if(__HAL_TIM_GET_COUNTER(&htim2) >= 20000)
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <main+0x1f4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f67f af2e 	bls.w	8000cbc <main+0x40>
		  {
			  HAL_TIM_Base_Stop(&htim2);
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <main+0x1f4>)
 8000e62:	f002 faa4 	bl	80033ae <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000e66:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <main+0x1f4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
	  if(!(GPIOC -> IDR & ir_clk_Pin))
 8000e6e:	e725      	b.n	8000cbc <main+0x40>
 8000e70:	20000184 	.word	0x20000184
 8000e74:	08005348 	.word	0x08005348
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	20000178 	.word	0x20000178
 8000e80:	200001c4 	.word	0x200001c4
 8000e84:	2000009a 	.word	0x2000009a
 8000e88:	2000009d 	.word	0x2000009d
 8000e8c:	20000098 	.word	0x20000098
 8000e90:	20000114 	.word	0x20000114
 8000e94:	08004a98 	.word	0x08004a98

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b09a      	sub	sp, #104	; 0x68
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea2:	2230      	movs	r2, #48	; 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 f9c2 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <SystemClock_Config+0xfc>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <SystemClock_Config+0xfc>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <SystemClock_Config+0xfc>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <SystemClock_Config+0x100>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <SystemClock_Config+0x100>)
 8000ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0x100>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000f06:	2305      	movs	r3, #5
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f10:	2301      	movs	r3, #1
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f14:	2302      	movs	r3, #2
 8000f16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 ff4a 	bl	8001dcc <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f3e:	f000 fa51 	bl	80013e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 f9a4 	bl	80022ac <HAL_RCC_ClockConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000f6a:	f000 fa3b 	bl	80013e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fb61 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000f88:	f000 fa2c 	bl	80013e4 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3768      	adds	r7, #104	; 0x68
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <MX_RTC_Init+0xac>)
 8000fb6:	4a25      	ldr	r2, [pc, #148]	; (800104c <MX_RTC_Init+0xb0>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <MX_RTC_Init+0xac>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_RTC_Init+0xac>)
 8000fc2:	227f      	movs	r2, #127	; 0x7f
 8000fc4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_RTC_Init+0xac>)
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_RTC_Init+0xac>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_RTC_Init+0xac>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_RTC_Init+0xac>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fde:	481a      	ldr	r0, [pc, #104]	; (8001048 <MX_RTC_Init+0xac>)
 8000fe0:	f001 fc20 	bl	8002824 <HAL_RTC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 f9fb 	bl	80013e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <MX_RTC_Init+0xac>)
 800100a:	f001 fc9c 	bl	8002946 <HAL_RTC_SetTime>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001014:	f000 f9e6 	bl	80013e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001018:	2301      	movs	r3, #1
 800101a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800101c:	2301      	movs	r3, #1
 800101e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 8001020:	2315      	movs	r3, #21
 8001022:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001024:	2322      	movs	r3, #34	; 0x22
 8001026:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_RTC_Init+0xac>)
 8001030:	f001 fda4 	bl	8002b7c <HAL_RTC_SetDate>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800103a:	f000 f9d3 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000154 	.word	0x20000154
 800104c:	40002800 	.word	0x40002800

08001050 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_SPI2_Init+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_SPI2_Init+0x64>)
 800105c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001060:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_SPI2_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001070:	2202      	movs	r2, #2
 8001072:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_SPI2_Init+0x64>)
 800107c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001080:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001084:	2210      	movs	r2, #16
 8001086:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_SPI2_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_SPI2_Init+0x64>)
 800109c:	220a      	movs	r2, #10
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_SPI2_Init+0x64>)
 80010a2:	f001 fef1 	bl	8002e88 <HAL_SPI_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010ac:	f000 f99a 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000ac 	.word	0x200000ac
 80010b8:	40003800 	.word	0x40003800

080010bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_TIM2_Init+0x94>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_TIM2_Init+0x94>)
 80010e2:	2263      	movs	r2, #99	; 0x63
 80010e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_TIM2_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM2_Init+0x94>)
 80010ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_TIM2_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM2_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM2_Init+0x94>)
 8001102:	f002 f905 	bl	8003310 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800110c:	f000 f96a 	bl	80013e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_TIM2_Init+0x94>)
 800111e:	f002 f971 	bl	8003404 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 f95c 	bl	80013e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM2_Init+0x94>)
 800113a:	f002 fb35 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f94e 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000184 	.word	0x20000184

08001154 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800115a:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <MX_USART1_UART_Init+0x50>)
 800115c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001160:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001164:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART1_UART_Init+0x4c>)
 800118c:	f002 fb7a 	bl	8003884 <HAL_UART_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001196:	f000 f925 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000114 	.word	0x20000114
 80011a4:	40011000 	.word	0x40011000

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <MX_GPIO_Init+0xfc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <MX_GPIO_Init+0xfc>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MX_GPIO_Init+0xfc>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_GPIO_Init+0xfc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <MX_GPIO_Init+0xfc>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_GPIO_Init+0xfc>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001234:	481c      	ldr	r0, [pc, #112]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001236:	f000 fd97 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ir_clk_Pin */
  GPIO_InitStruct.Pin = ir_clk_Pin;
 800123a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ir_clk_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <MX_GPIO_Init+0x104>)
 8001250:	f000 fc08 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sen_Pin */
  GPIO_InitStruct.Pin = ir_sen_Pin;
 8001254:	2304      	movs	r3, #4
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_GPIO_Init+0x108>)
 800125a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125c:	2301      	movs	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ir_sen_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001268:	f000 fbfc 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_DC_Pin SPI2_RESET_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_DC_Pin|SPI2_RESET_Pin|SPI2_CS_Pin;
 800126c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x100>)
 8001286:	f000 fbed 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2008      	movs	r0, #8
 8001290:	f000 fbb1 	bl	80019f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001294:	2008      	movs	r0, #8
 8001296:	f000 fbca 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	10310000 	.word	0x10310000

080012b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2)
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d178      	bne.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
  {
		tim_buff = __HAL_TIM_GET_COUNTER(&htim2);  // wait for the counter to reach the us input in the parameter
 80012c4:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	4a3e      	ldr	r2, [pc, #248]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x110>)
 80012cc:	6013      	str	r3, [r2, #0]
		  HAL_TIM_Base_Stop(&htim2);
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80012d0:	f002 f86d 	bl	80033ae <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start(&htim2);
 80012dc:	4838      	ldr	r0, [pc, #224]	; (80013c0 <HAL_GPIO_EXTI_Callback+0x10c>)
 80012de:	f002 f842 	bl	8003366 <HAL_TIM_Base_Start>
		tim_buff /= 1000;
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x110>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x114>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	099b      	lsrs	r3, r3, #6
 80012ee:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x110>)
 80012f0:	6013      	str	r3, [r2, #0]
		  if(data_b)
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_GPIO_EXTI_Callback+0x118>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d03f      	beq.n	800137a <HAL_GPIO_EXTI_Callback+0xc6>
		  {
		    int_count++;
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001304:	701a      	strb	r2, [r3, #0]
		    if((int_count >= 33)&&(int_count <= 48))
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d953      	bls.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b30      	cmp	r3, #48	; 0x30
 8001314:	d84f      	bhi.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
		    {
		        if(even_b)
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d018      	beq.n	8001350 <HAL_GPIO_EXTI_Callback+0x9c>
		        {
		            ir_code <<= 1;
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001328:	701a      	strb	r2, [r3, #0]
		            if(tim_buff == 1)ir_code |= 0x01;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x110>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <HAL_GPIO_EXTI_Callback+0x8e>
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_EXTI_Callback+0x9c>
		            else ir_code &= 0xFE;
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x124>)
 800134e:	701a      	strb	r2, [r3, #0]
		        }
		        even_b = !even_b;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001362:	701a      	strb	r2, [r3, #0]
		        if(int_count == 48){byte_rec = 1;data_b = 0;}
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b30      	cmp	r3, #48	; 0x30
 800136a:	d124      	bne.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_EXTI_Callback+0x128>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_GPIO_EXTI_Callback+0x118>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
		        if(int_count == 2){data_b = 1;int_count = 0;}
		    }
		    else {int_count = 0;}
		  }
  }
}
 8001378:	e01d      	b.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
		    if(tim_buff == scan_code[int_count])
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	461a      	mov	r2, r3
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x110>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d110      	bne.n	80013b0 <HAL_GPIO_EXTI_Callback+0xfc>
		        int_count++;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001398:	701a      	strb	r2, [r3, #0]
		        if(int_count == 2){data_b = 1;int_count = 0;}
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d109      	bne.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_GPIO_EXTI_Callback+0x118>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
}
 80013ae:	e002      	b.n	80013b6 <HAL_GPIO_EXTI_Callback+0x102>
		    else {int_count = 0;}
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000184 	.word	0x20000184
 80013c4:	2000010c 	.word	0x2000010c
 80013c8:	10624dd3 	.word	0x10624dd3
 80013cc:	2000009b 	.word	0x2000009b
 80013d0:	20000099 	.word	0x20000099
 80013d4:	2000009c 	.word	0x2000009c
 80013d8:	2000009d 	.word	0x2000009d
 80013dc:	2000009a 	.word	0x2000009a
 80013e0:	20000004 	.word	0x20000004

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ea:	e7fe      	b.n	80013ea <Error_Handler+0x6>

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RTC_MspInit+0x24>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d102      	bne.n	8001454 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RTC_MspInit+0x28>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40002800 	.word	0x40002800
 8001464:	42470e3c 	.word	0x42470e3c

08001468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_SPI_MspInit+0x84>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12c      	bne.n	80014e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_SPI_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80014c2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d4:	2305      	movs	r3, #5
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <HAL_SPI_MspInit+0x8c>)
 80014e0:	f000 fac0 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40003800 	.word	0x40003800
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d10d      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_TIM_Base_MspInit+0x3c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_UART_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12c      	bne.n	80015b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_UART_MspInit+0x88>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_UART_MspInit+0x88>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_UART_MspInit+0x88>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_UART_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_UART_MspInit+0x88>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_UART_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001592:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a4:	2307      	movs	r3, #7
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_UART_MspInit+0x8c>)
 80015b0:	f000 fa58 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40011000 	.word	0x40011000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f8d2 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001620:	2004      	movs	r0, #4
 8001622:	f000 fbbb 	bl	8001d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <_sbrk>:
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
 800165c:	f002 fdbe 	bl	80041dc <__errno>
 8001660:	4602      	mov	r2, r0
 8001662:	230c      	movs	r3, #12
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20020000 	.word	0x20020000
 800168c:	00000400 	.word	0x00000400
 8001690:	200000a0 	.word	0x200000a0
 8001694:	200001d8 	.word	0x200001d8

08001698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <SystemInit+0x28>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <SystemInit+0x28>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SystemInit+0x28>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b2:	609a      	str	r2, [r3, #8]
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x14>
 80016c8:	2100      	movs	r1, #0
 80016ca:	e003      	b.n	80016d4 <LoopCopyDataInit>

080016cc <CopyDataInit>:
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <LoopFillZerobss+0x18>)
 80016ce:	585b      	ldr	r3, [r3, r1]
 80016d0:	5043      	str	r3, [r0, r1]
 80016d2:	3104      	adds	r1, #4

080016d4 <LoopCopyDataInit>:
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <LoopFillZerobss+0x1c>)
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <LoopFillZerobss+0x20>)
 80016d8:	1842      	adds	r2, r0, r1
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3f6      	bcc.n	80016cc <CopyDataInit>
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x24>)
 80016e0:	e002      	b.n	80016e8 <LoopFillZerobss>

080016e2 <FillZerobss>:
 80016e2:	2300      	movs	r3, #0
 80016e4:	f842 3b04 	str.w	r3, [r2], #4

080016e8 <LoopFillZerobss>:
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <LoopFillZerobss+0x28>)
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3f9      	bcc.n	80016e2 <FillZerobss>
 80016ee:	f7ff ffd3 	bl	8001698 <SystemInit>
 80016f2:	f002 fd79 	bl	80041e8 <__libc_init_array>
 80016f6:	f7ff fac1 	bl	8000c7c <main>
 80016fa:	4770      	bx	lr
 80016fc:	20020000 	.word	0x20020000
 8001700:	080053b4 	.word	0x080053b4
 8001704:	20000000 	.word	0x20000000
 8001708:	20000078 	.word	0x20000078
 800170c:	20000078 	.word	0x20000078
 8001710:	200001d8 	.word	0x200001d8

08001714 <ADC_IRQHandler>:
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f94d 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fe4e 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f965 	bl	8001a4a <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f92d 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000010 	.word	0x20000010
 80017b8:	2000000c 	.word	0x2000000c

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000010 	.word	0x20000010
 80017e0:	200001d0 	.word	0x200001d0

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200001d0 	.word	0x200001d0

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_Delay+0x40>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000010 	.word	0x20000010

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff3e 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff31 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e159      	b.n	8001d34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8148 	bne.w	8001d2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d00b      	beq.n	8001abe <HAL_GPIO_Init+0x5a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab2:	2b11      	cmp	r3, #17
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d130      	bne.n	8001b20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0201 	and.w	r2, r3, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0xfc>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a2 	beq.w	8001d2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_GPIO_Init+0x2e4>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a55      	ldr	r2, [pc, #340]	; (8001d48 <HAL_GPIO_Init+0x2e4>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_GPIO_Init+0x2e4>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x2e8>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <HAL_GPIO_Init+0x2ec>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x202>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_GPIO_Init+0x2f0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x1fe>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <HAL_GPIO_Init+0x2f4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x1fa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <HAL_GPIO_Init+0x2f8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x1f6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <HAL_GPIO_Init+0x2fc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x1f2>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e008      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c66:	2300      	movs	r3, #0
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	f002 0203 	and.w	r2, r2, #3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c78:	4934      	ldr	r1, [pc, #208]	; (8001d4c <HAL_GPIO_Init+0x2e8>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001caa:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	f67f aea2 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3724      	adds	r7, #36	; 0x24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fa7a 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e25b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b99      	ldr	r3, [pc, #612]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e236      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a8a      	ldr	r2, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b84      	ldr	r3, [pc, #528]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a83      	ldr	r2, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fcae 	bl	80017e4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fcaa 	bl	80017e4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1fb      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc9a 	bl	80017e4 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fc96 	bl	80017e4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1e7      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1bb      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4952      	ldr	r1, [pc, #328]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_RCC_OscConfig+0x2b0>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fc4f 	bl	80017e4 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fc4b 	bl	80017e4 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e19c      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4940      	ldr	r1, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_RCC_OscConfig+0x2b0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc2e 	bl	80017e4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc2a 	bl	80017e4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e17b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d030      	beq.n	8002018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_RCC_OscConfig+0x2b4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fc0e 	bl	80017e4 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fc0a 	bl	80017e4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e15b      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x2b4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fbf7 	bl	80017e4 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fbf3 	bl	80017e4 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e144      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a0 	beq.w	8002166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d121      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_RCC_OscConfig+0x2b8>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7ff fbb9 	bl	80017e4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e011      	b.n	800209a <HAL_RCC_OscConfig+0x2ce>
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	42470000 	.word	0x42470000
 8002080:	42470e80 	.word	0x42470e80
 8002084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7ff fbac 	bl	80017e4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0fd      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x4d4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <HAL_RCC_OscConfig+0x2f0>
 80020ae:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a7c      	ldr	r2, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x32a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x312>
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a76      	ldr	r2, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a73      	ldr	r2, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x32a>
 80020de:	4b71      	ldr	r3, [pc, #452]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a70      	ldr	r2, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	4a6d      	ldr	r2, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff fb71 	bl	80017e4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fb6d 	bl	80017e4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0bc      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x33a>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff fb5b 	bl	80017e4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff fb57 	bl	80017e4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0a6      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8092 	beq.w	8002294 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d05c      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d141      	bne.n	8002208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff fb2b 	bl	80017e4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fb27 	bl	80017e4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e078      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	019b      	lsls	r3, r3, #6
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	4933      	ldr	r1, [pc, #204]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fb00 	bl	80017e4 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fafc 	bl	80017e4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04d      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x41c>
 8002206:	e045      	b.n	8002294 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7ff fae9 	bl	80017e4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff fae5 	bl	80017e4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e036      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x44a>
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e029      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <HAL_RCC_OscConfig+0x4d8>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	429a      	cmp	r2, r3
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d115      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002270:	4293      	cmp	r3, r2
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	42470060 	.word	0x42470060

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7ff fa22 	bl	80017e4 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff fa1e 	bl	80017e4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4601      	mov	r1, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	fa21 f303 	lsr.w	r3, r1, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff f982 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08005358 	.word	0x08005358
 8002470:	20000008 	.word	0x20000008
 8002474:	2000000c 	.word	0x2000000c

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248e:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d007      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x32>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d008      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x38>
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 808d 	bne.w	80025be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a4:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80024a6:	60bb      	str	r3, [r7, #8]
       break;
 80024a8:	e08c      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024aa:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ac:	60bb      	str	r3, [r7, #8]
      break;
 80024ae:	e089      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b0:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d023      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	ea03 0501 	and.w	r5, r3, r1
 80024dc:	ea04 0602 	and.w	r6, r4, r2
 80024e0:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024e2:	fb02 f106 	mul.w	r1, r2, r6
 80024e6:	2200      	movs	r2, #0
 80024e8:	fb02 f205 	mul.w	r2, r2, r5
 80024ec:	440a      	add	r2, r1
 80024ee:	493a      	ldr	r1, [pc, #232]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80024f0:	fba5 0101 	umull	r0, r1, r5, r1
 80024f4:	1853      	adds	r3, r2, r1
 80024f6:	4619      	mov	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f04f 0400 	mov.w	r4, #0
 80024fe:	461a      	mov	r2, r3
 8002500:	4623      	mov	r3, r4
 8002502:	f7fd febd 	bl	8000280 <__aeabi_uldivmod>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e049      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	f04f 0400 	mov.w	r4, #0
 8002518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	ea03 0501 	and.w	r5, r3, r1
 8002524:	ea04 0602 	and.w	r6, r4, r2
 8002528:	4629      	mov	r1, r5
 800252a:	4632      	mov	r2, r6
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f04f 0400 	mov.w	r4, #0
 8002534:	0154      	lsls	r4, r2, #5
 8002536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800253a:	014b      	lsls	r3, r1, #5
 800253c:	4619      	mov	r1, r3
 800253e:	4622      	mov	r2, r4
 8002540:	1b49      	subs	r1, r1, r5
 8002542:	eb62 0206 	sbc.w	r2, r2, r6
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	f04f 0400 	mov.w	r4, #0
 800254e:	0194      	lsls	r4, r2, #6
 8002550:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002554:	018b      	lsls	r3, r1, #6
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	eb64 0402 	sbc.w	r4, r4, r2
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	00e2      	lsls	r2, r4, #3
 8002566:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800256a:	00d9      	lsls	r1, r3, #3
 800256c:	460b      	mov	r3, r1
 800256e:	4614      	mov	r4, r2
 8002570:	195b      	adds	r3, r3, r5
 8002572:	eb44 0406 	adc.w	r4, r4, r6
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	02a2      	lsls	r2, r4, #10
 8002580:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002584:	0299      	lsls	r1, r3, #10
 8002586:	460b      	mov	r3, r1
 8002588:	4614      	mov	r4, r2
 800258a:	4618      	mov	r0, r3
 800258c:	4621      	mov	r1, r4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f04f 0400 	mov.w	r4, #0
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	f7fd fe72 	bl	8000280 <__aeabi_uldivmod>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0c1b      	lsrs	r3, r3, #16
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	3301      	adds	r3, #1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	60bb      	str	r3, [r7, #8]
      break;
 80025bc:	e002      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025c0:	60bb      	str	r3, [r7, #8]
      break;
 80025c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c4:	68bb      	ldr	r3, [r7, #8]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	017d7840 	.word	0x017d7840

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000008 	.word	0x20000008

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4601      	mov	r1, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08005368 	.word	0x08005368

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffdc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002624:	4601      	mov	r1, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0b5b      	lsrs	r3, r3, #13
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	08005368 	.word	0x08005368

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002668:	2b00      	cmp	r3, #0
 800266a:	d038      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800266c:	4b68      	ldr	r3, [pc, #416]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002672:	f7ff f8b7 	bl	80017e4 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002678:	e008      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800267a:	f7ff f8b3 	bl	80017e4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e0bd      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	495a      	ldr	r1, [pc, #360]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026b2:	4b57      	ldr	r3, [pc, #348]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026b8:	f7ff f894 	bl	80017e4 <HAL_GetTick>
 80026bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026c0:	f7ff f890 	bl	80017e4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e09a      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026d2:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8083 	beq.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b45      	ldr	r3, [pc, #276]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002708:	4b43      	ldr	r3, [pc, #268]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a42      	ldr	r2, [pc, #264]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002712:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002714:	f7ff f866 	bl	80017e4 <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7ff f862 	bl	80017e4 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e06c      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d02f      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d028      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002758:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002760:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800276e:	4a29      	ldr	r2, [pc, #164]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d114      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f830 	bl	80017e4 <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff f82c 	bl	80017e4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e034      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0ee      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	4911      	ldr	r1, [pc, #68]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
 80027d2:	e005      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	4909      	ldr	r1, [pc, #36]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7d1a      	ldrb	r2, [r3, #20]
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002804:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	42470068 	.word	0x42470068
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
 800281c:	42470e40 	.word	0x42470e40
 8002820:	424711e0 	.word	0x424711e0

08002824 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e083      	b.n	800293e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7f5b      	ldrb	r3, [r3, #29]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe fdf8 	bl	800143c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	22ca      	movs	r2, #202	; 0xca
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2253      	movs	r2, #83	; 0x53
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 faa8 	bl	8002db8 <RTC_EnterInitMode>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e05e      	b.n	800293e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800288e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002892:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6919      	ldr	r1, [r3, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028de:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa3a 	bl	8002d68 <HAL_RTC_WaitForSynchro>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2204      	movs	r2, #4
 8002906:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e018      	b.n	800293e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	22ff      	movs	r2, #255	; 0xff
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b087      	sub	sp, #28
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_RTC_SetTime+0x1c>
 800295e:	2302      	movs	r3, #2
 8002960:	e0aa      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2202      	movs	r2, #2
 800296c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d126      	bne.n	80029c2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fa3f 	bl	8002e10 <RTC_ByteToBcd2>
 8002992:	4603      	mov	r3, r0
 8002994:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa38 	bl	8002e10 <RTC_ByteToBcd2>
 80029a0:	4603      	mov	r3, r0
 80029a2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029a4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	789b      	ldrb	r3, [r3, #2]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fa30 	bl	8002e10 <RTC_ByteToBcd2>
 80029b0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80029b2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e018      	b.n	80029f4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029e2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80029e8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	22ca      	movs	r2, #202	; 0xca
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2253      	movs	r2, #83	; 0x53
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f9d7 	bl	8002db8 <RTC_EnterInitMode>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e047      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002a32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a36:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f972 	bl	8002d68 <HAL_RTC_WaitForSynchro>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	22ff      	movs	r2, #255	; 0xff
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}

08002ac0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002af2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002af6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11a      	bne.n	8002b72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f983 	bl	8002e4c <RTC_Bcd2ToByte>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f97a 	bl	8002e4c <RTC_Bcd2ToByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	789b      	ldrb	r3, [r3, #2]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f971 	bl	8002e4c <RTC_Bcd2ToByte>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	7f1b      	ldrb	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_RTC_SetDate+0x1c>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e094      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10e      	bne.n	8002bc8 <HAL_RTC_SetDate+0x4c>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	785b      	ldrb	r3, [r3, #1]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	f023 0310 	bic.w	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	330a      	adds	r3, #10
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f91c 	bl	8002e10 <RTC_ByteToBcd2>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f915 	bl	8002e10 <RTC_ByteToBcd2>
 8002be6:	4603      	mov	r3, r0
 8002be8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	789b      	ldrb	r3, [r3, #2]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f90d 	bl	8002e10 <RTC_ByteToBcd2>
 8002bf6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bf8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e00e      	b.n	8002c26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	78db      	ldrb	r3, [r3, #3]
 8002c0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	785b      	ldrb	r3, [r3, #1]
 8002c12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c14:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22ca      	movs	r2, #202	; 0xca
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2253      	movs	r2, #83	; 0x53
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f8be 	bl	8002db8 <RTC_EnterInitMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e033      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f86d 	bl	8002d68 <HAL_RTC_WaitForSynchro>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00a      	b.n	8002cc2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ce4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	0b5b      	lsrs	r3, r3, #13
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11a      	bne.n	8002d5e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	78db      	ldrb	r3, [r3, #3]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f88d 	bl	8002e4c <RTC_Bcd2ToByte>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f884 	bl	8002e4c <RTC_Bcd2ToByte>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	789b      	ldrb	r3, [r3, #2]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f87b 	bl	8002e4c <RTC_Bcd2ToByte>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fd2e 	bl	80017e4 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d8a:	e009      	b.n	8002da0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d8c:	f7fe fd2a 	bl	80017e4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d901      	bls.n	8002da0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e007      	b.n	8002db0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0ee      	beq.n	8002d8c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d119      	bne.n	8002e06 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dda:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fd02 	bl	80017e4 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002de2:	e009      	b.n	8002df8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002de4:	f7fe fcfe 	bl	80017e4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df2:	d901      	bls.n	8002df8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e007      	b.n	8002e08 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002e1e:	e005      	b.n	8002e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	3b0a      	subs	r3, #10
 8002e2a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d8f6      	bhi.n	8002e20 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	b2db      	uxtb	r3, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e056      	b.n	8002f48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe fad7 	bl	8001468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	ea42 0103 	orr.w	r1, r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	f003 0104 	and.w	r1, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_SPI_Transmit+0x22>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e11e      	b.n	80031b0 <HAL_SPI_Transmit+0x260>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7a:	f7fe fc33 	bl	80017e4 <HAL_GetTick>
 8002f7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f94:	e103      	b.n	800319e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0x52>
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fa6:	e0fa      	b.n	800319e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fee:	d107      	bne.n	8003000 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d007      	beq.n	800301e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003026:	d14b      	bne.n	80030c0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_Transmit+0xe6>
 8003030:	8afb      	ldrh	r3, [r7, #22]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d13e      	bne.n	80030b4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	1c9a      	adds	r2, r3, #2
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800305a:	e02b      	b.n	80030b4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d112      	bne.n	8003090 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	1c9a      	adds	r2, r3, #2
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	86da      	strh	r2, [r3, #54]	; 0x36
 800308e:	e011      	b.n	80030b4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003090:	f7fe fba8 	bl	80017e4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d803      	bhi.n	80030a8 <HAL_SPI_Transmit+0x158>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d102      	bne.n	80030ae <HAL_SPI_Transmit+0x15e>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030b2:	e074      	b.n	800319e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1ce      	bne.n	800305c <HAL_SPI_Transmit+0x10c>
 80030be:	e04c      	b.n	800315a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_Transmit+0x17e>
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d140      	bne.n	8003150 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030f4:	e02c      	b.n	8003150 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b02      	cmp	r3, #2
 8003102:	d113      	bne.n	800312c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	86da      	strh	r2, [r3, #54]	; 0x36
 800312a:	e011      	b.n	8003150 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312c:	f7fe fb5a 	bl	80017e4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d803      	bhi.n	8003144 <HAL_SPI_Transmit+0x1f4>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d102      	bne.n	800314a <HAL_SPI_Transmit+0x1fa>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800314e:	e026      	b.n	800319e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1cd      	bne.n	80030f6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f894 	bl	800328c <SPI_EndRxTxTransaction>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e000      	b.n	800319e <HAL_SPI_Transmit+0x24e>
  }

error:
 800319c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c8:	e04c      	b.n	8003264 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d048      	beq.n	8003264 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80031d2:	f7fe fb07 	bl	80017e4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d902      	bls.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d13d      	bne.n	8003264 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003200:	d111      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320a:	d004      	beq.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d107      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322e:	d10f      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e00f      	b.n	8003284 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	d1a3      	bne.n	80031ca <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <SPI_EndRxTxTransaction+0x7c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <SPI_EndRxTxTransaction+0x80>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0d5b      	lsrs	r3, r3, #21
 80032a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d112      	bne.n	80032de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff ff78 	bl	80031b8 <SPI_WaitFlagStateUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d0f2      	beq.n	80032de <SPI_EndRxTxTransaction+0x52>
 80032f8:	e000      	b.n	80032fc <SPI_EndRxTxTransaction+0x70>
        break;
 80032fa:	bf00      	nop
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000008 	.word	0x20000008
 800330c:	165e9f81 	.word	0x165e9f81

08003310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e01d      	b.n	800335e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe f8de 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f000 f910 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d007      	beq.n	8003398 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <HAL_TIM_Base_Stop+0x40>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	f240 4344 	movw	r3, #1092	; 0x444
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_Base_Stop+0x40>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e0a6      	b.n	800356a <HAL_TIM_ConfigClockSource+0x166>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800343a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003442:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d067      	beq.n	8003524 <HAL_TIM_ConfigClockSource+0x120>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d80b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x6c>
 8003458:	2b10      	cmp	r3, #16
 800345a:	d073      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d802      	bhi.n	8003466 <HAL_TIM_ConfigClockSource+0x62>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d06f      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003464:	e078      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003466:	2b20      	cmp	r3, #32
 8003468:	d06c      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
 800346a:	2b30      	cmp	r3, #48	; 0x30
 800346c:	d06a      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800346e:	e073      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003470:	2b70      	cmp	r3, #112	; 0x70
 8003472:	d00d      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x8c>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d804      	bhi.n	8003482 <HAL_TIM_ConfigClockSource+0x7e>
 8003478:	2b50      	cmp	r3, #80	; 0x50
 800347a:	d033      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xe0>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d041      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003480:	e06a      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003486:	d066      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x152>
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d017      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800348e:	e063      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f000 f962 	bl	8003768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e04c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6899      	ldr	r1, [r3, #8]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f000 f94b 	bl	8003768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e039      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f000 f8bf 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2150      	movs	r1, #80	; 0x50
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f918 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003502:	e029      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	461a      	mov	r2, r3
 8003512:	f000 f8de 	bl	80036d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2160      	movs	r1, #96	; 0x60
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f908 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003522:	e019      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	461a      	mov	r2, r3
 8003532:	f000 f89f 	bl	8003674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2140      	movs	r1, #64	; 0x40
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f8f8 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003542:	e009      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 f8ef 	bl	8003732 <TIM_ITRx_SetConfig>
      break;
 8003554:	e000      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a34      	ldr	r2, [pc, #208]	; (8003658 <TIM_Base_SetConfig+0xe4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00f      	beq.n	80035ac <TIM_Base_SetConfig+0x38>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a31      	ldr	r2, [pc, #196]	; (800365c <TIM_Base_SetConfig+0xe8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a30      	ldr	r2, [pc, #192]	; (8003660 <TIM_Base_SetConfig+0xec>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <TIM_Base_SetConfig+0xf0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0xe4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01b      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035cc:	d017      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <TIM_Base_SetConfig+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <TIM_Base_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a20      	ldr	r2, [pc, #128]	; (8003664 <TIM_Base_SetConfig+0xf0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <TIM_Base_SetConfig+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1e      	ldr	r2, [pc, #120]	; (800366c <TIM_Base_SetConfig+0xf8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <TIM_Base_SetConfig+0xfc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d108      	bne.n	8003610 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a08      	ldr	r2, [pc, #32]	; (8003658 <TIM_Base_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40014000 	.word	0x40014000
 800366c:	40014400 	.word	0x40014400
 8003670:	40014800 	.word	0x40014800

08003674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800369e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f023 030a 	bic.w	r3, r3, #10
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800370e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	f043 0307 	orr.w	r3, r3, #7
 8003754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	431a      	orrs	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e050      	b.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380c:	d013      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	40000400 	.word	0x40000400
 8003878:	40000800 	.word	0x40000800
 800387c:	40000c00 	.word	0x40000c00
 8003880:	40014000 	.word	0x40014000

08003884 <HAL_UART_Init>:
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
 8003892:	2301      	movs	r3, #1
 8003894:	e03f      	b.n	8003916 <HAL_UART_Init+0x92>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fe44 	bl	8001538 <HAL_UART_MspInit>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f90b 	bl	8003ae4 <UART_SetConfig>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ec:	615a      	str	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	63da      	str	r2, [r3, #60]	; 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003914:	2300      	movs	r3, #0
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_UART_Transmit>:
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af02      	add	r7, sp, #8
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	f040 8083 	bne.w	8003a46 <HAL_UART_Transmit+0x128>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Transmit+0x2e>
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit+0x32>
 800394c:	2301      	movs	r3, #1
 800394e:	e07b      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_UART_Transmit+0x40>
 800395a:	2302      	movs	r3, #2
 800395c:	e074      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2221      	movs	r2, #33	; 0x21
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003974:	f7fd ff36 	bl	80017e4 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	88fa      	ldrh	r2, [r7, #6]
 800397e:	849a      	strh	r2, [r3, #36]	; 0x24
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	84da      	strh	r2, [r3, #38]	; 0x26
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800398e:	e042      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	84da      	strh	r2, [r3, #38]	; 0x26
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d122      	bne.n	80039ee <HAL_UART_Transmit+0xd0>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f84c 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_UART_Transmit+0xa4>
 80039be:	2303      	movs	r3, #3
 80039c0:	e042      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_UART_Transmit+0xc8>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3302      	adds	r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	e017      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	e013      	b.n	8003a16 <HAL_UART_Transmit+0xf8>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f829 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_UART_Transmit+0xea>
 8003a04:	2303      	movs	r3, #3
 8003a06:	e01f      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1b7      	bne.n	8003990 <HAL_UART_Transmit+0x72>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f810 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_UART_Transmit+0x11c>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e006      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Transmit+0x12a>
 8003a46:	2302      	movs	r3, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_WaitOnFlagUntilTimeout>:
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	e02c      	b.n	8003abc <UART_WaitOnFlagUntilTimeout+0x6c>
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d028      	beq.n	8003abc <UART_WaitOnFlagUntilTimeout+0x6c>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a70:	f7fd feb8 	bl	80017e4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d21d      	bcs.n	8003abc <UART_WaitOnFlagUntilTimeout+0x6c>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e00f      	b.n	8003adc <UART_WaitOnFlagUntilTimeout+0x8c>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d0c3      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x12>
 8003ada:	2300      	movs	r3, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_SetConfig>:
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	611a      	str	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	60d3      	str	r3, [r2, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b52:	f040 818b 	bne.w	8003e6c <UART_SetConfig+0x388>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4ac1      	ldr	r2, [pc, #772]	; (8003e60 <UART_SetConfig+0x37c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d005      	beq.n	8003b6c <UART_SetConfig+0x88>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4abf      	ldr	r2, [pc, #764]	; (8003e64 <UART_SetConfig+0x380>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 80bd 	bne.w	8003ce6 <UART_SetConfig+0x202>
 8003b6c:	f7fe fd56 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003b70:	60b8      	str	r0, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	461d      	mov	r5, r3
 8003b76:	f04f 0600 	mov.w	r6, #0
 8003b7a:	46a8      	mov	r8, r5
 8003b7c:	46b1      	mov	r9, r6
 8003b7e:	eb18 0308 	adds.w	r3, r8, r8
 8003b82:	eb49 0409 	adc.w	r4, r9, r9
 8003b86:	4698      	mov	r8, r3
 8003b88:	46a1      	mov	r9, r4
 8003b8a:	eb18 0805 	adds.w	r8, r8, r5
 8003b8e:	eb49 0906 	adc.w	r9, r9, r6
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba6:	4688      	mov	r8, r1
 8003ba8:	4691      	mov	r9, r2
 8003baa:	eb18 0005 	adds.w	r0, r8, r5
 8003bae:	eb49 0106 	adc.w	r1, r9, r6
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	f04f 0600 	mov.w	r6, #0
 8003bbc:	196b      	adds	r3, r5, r5
 8003bbe:	eb46 0406 	adc.w	r4, r6, r6
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4623      	mov	r3, r4
 8003bc6:	f7fc fb5b 	bl	8000280 <__aeabi_uldivmod>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	460c      	mov	r4, r1
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4ba5      	ldr	r3, [pc, #660]	; (8003e68 <UART_SetConfig+0x384>)
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	461d      	mov	r5, r3
 8003be0:	f04f 0600 	mov.w	r6, #0
 8003be4:	46a9      	mov	r9, r5
 8003be6:	46b2      	mov	sl, r6
 8003be8:	eb19 0309 	adds.w	r3, r9, r9
 8003bec:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf0:	4699      	mov	r9, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	eb19 0905 	adds.w	r9, r9, r5
 8003bf8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c10:	4689      	mov	r9, r1
 8003c12:	4692      	mov	sl, r2
 8003c14:	eb19 0005 	adds.w	r0, r9, r5
 8003c18:	eb4a 0106 	adc.w	r1, sl, r6
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	461d      	mov	r5, r3
 8003c22:	f04f 0600 	mov.w	r6, #0
 8003c26:	196b      	adds	r3, r5, r5
 8003c28:	eb46 0406 	adc.w	r4, r6, r6
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	f7fc fb26 	bl	8000280 <__aeabi_uldivmod>
 8003c34:	4603      	mov	r3, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b8b      	ldr	r3, [pc, #556]	; (8003e68 <UART_SetConfig+0x384>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	; 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	3332      	adds	r3, #50	; 0x32
 8003c4e:	4a86      	ldr	r2, [pc, #536]	; (8003e68 <UART_SetConfig+0x384>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c5c:	4498      	add	r8, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	461d      	mov	r5, r3
 8003c62:	f04f 0600 	mov.w	r6, #0
 8003c66:	46a9      	mov	r9, r5
 8003c68:	46b2      	mov	sl, r6
 8003c6a:	eb19 0309 	adds.w	r3, r9, r9
 8003c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c72:	4699      	mov	r9, r3
 8003c74:	46a2      	mov	sl, r4
 8003c76:	eb19 0905 	adds.w	r9, r9, r5
 8003c7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c92:	4689      	mov	r9, r1
 8003c94:	4692      	mov	sl, r2
 8003c96:	eb19 0005 	adds.w	r0, r9, r5
 8003c9a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	f04f 0600 	mov.w	r6, #0
 8003ca8:	196b      	adds	r3, r5, r5
 8003caa:	eb46 0406 	adc.w	r4, r6, r6
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	f7fc fae5 	bl	8000280 <__aeabi_uldivmod>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <UART_SetConfig+0x384>)
 8003cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2164      	movs	r1, #100	; 0x64
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	3332      	adds	r3, #50	; 0x32
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <UART_SetConfig+0x384>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	f003 0207 	and.w	r2, r3, #7
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4442      	add	r2, r8
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	e26f      	b.n	80041c6 <UART_SetConfig+0x6e2>
 8003ce6:	f7fe fc85 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003cea:	60b8      	str	r0, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	461d      	mov	r5, r3
 8003cf0:	f04f 0600 	mov.w	r6, #0
 8003cf4:	46a8      	mov	r8, r5
 8003cf6:	46b1      	mov	r9, r6
 8003cf8:	eb18 0308 	adds.w	r3, r8, r8
 8003cfc:	eb49 0409 	adc.w	r4, r9, r9
 8003d00:	4698      	mov	r8, r3
 8003d02:	46a1      	mov	r9, r4
 8003d04:	eb18 0805 	adds.w	r8, r8, r5
 8003d08:	eb49 0906 	adc.w	r9, r9, r6
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d20:	4688      	mov	r8, r1
 8003d22:	4691      	mov	r9, r2
 8003d24:	eb18 0005 	adds.w	r0, r8, r5
 8003d28:	eb49 0106 	adc.w	r1, r9, r6
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	461d      	mov	r5, r3
 8003d32:	f04f 0600 	mov.w	r6, #0
 8003d36:	196b      	adds	r3, r5, r5
 8003d38:	eb46 0406 	adc.w	r4, r6, r6
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f7fc fa9e 	bl	8000280 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <UART_SetConfig+0x384>)
 8003d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	461d      	mov	r5, r3
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	46a9      	mov	r9, r5
 8003d60:	46b2      	mov	sl, r6
 8003d62:	eb19 0309 	adds.w	r3, r9, r9
 8003d66:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	46a2      	mov	sl, r4
 8003d6e:	eb19 0905 	adds.w	r9, r9, r5
 8003d72:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8a:	4689      	mov	r9, r1
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	eb19 0005 	adds.w	r0, r9, r5
 8003d92:	eb4a 0106 	adc.w	r1, sl, r6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	f04f 0600 	mov.w	r6, #0
 8003da0:	196b      	adds	r3, r5, r5
 8003da2:	eb46 0406 	adc.w	r4, r6, r6
 8003da6:	461a      	mov	r2, r3
 8003da8:	4623      	mov	r3, r4
 8003daa:	f7fc fa69 	bl	8000280 <__aeabi_uldivmod>
 8003dae:	4603      	mov	r3, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b2c      	ldr	r3, [pc, #176]	; (8003e68 <UART_SetConfig+0x384>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <UART_SetConfig+0x384>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd6:	4498      	add	r8, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	461d      	mov	r5, r3
 8003ddc:	f04f 0600 	mov.w	r6, #0
 8003de0:	46a9      	mov	r9, r5
 8003de2:	46b2      	mov	sl, r6
 8003de4:	eb19 0309 	adds.w	r3, r9, r9
 8003de8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dec:	4699      	mov	r9, r3
 8003dee:	46a2      	mov	sl, r4
 8003df0:	eb19 0905 	adds.w	r9, r9, r5
 8003df4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e0c:	4689      	mov	r9, r1
 8003e0e:	4692      	mov	sl, r2
 8003e10:	eb19 0005 	adds.w	r0, r9, r5
 8003e14:	eb4a 0106 	adc.w	r1, sl, r6
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	f04f 0600 	mov.w	r6, #0
 8003e22:	196b      	adds	r3, r5, r5
 8003e24:	eb46 0406 	adc.w	r4, r6, r6
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4623      	mov	r3, r4
 8003e2c:	f7fc fa28 	bl	8000280 <__aeabi_uldivmod>
 8003e30:	4603      	mov	r3, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <UART_SetConfig+0x384>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <UART_SetConfig+0x384>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4442      	add	r2, r8
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e1b2      	b.n	80041c6 <UART_SetConfig+0x6e2>
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	51eb851f 	.word	0x51eb851f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4ad7      	ldr	r2, [pc, #860]	; (80041d0 <UART_SetConfig+0x6ec>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d005      	beq.n	8003e82 <UART_SetConfig+0x39e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4ad6      	ldr	r2, [pc, #856]	; (80041d4 <UART_SetConfig+0x6f0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 80d1 	bne.w	8004024 <UART_SetConfig+0x540>
 8003e82:	f7fe fbcb 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003e86:	60b8      	str	r0, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	469a      	mov	sl, r3
 8003e8c:	f04f 0b00 	mov.w	fp, #0
 8003e90:	46d0      	mov	r8, sl
 8003e92:	46d9      	mov	r9, fp
 8003e94:	eb18 0308 	adds.w	r3, r8, r8
 8003e98:	eb49 0409 	adc.w	r4, r9, r9
 8003e9c:	4698      	mov	r8, r3
 8003e9e:	46a1      	mov	r9, r4
 8003ea0:	eb18 080a 	adds.w	r8, r8, sl
 8003ea4:	eb49 090b 	adc.w	r9, r9, fp
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ebc:	4688      	mov	r8, r1
 8003ebe:	4691      	mov	r9, r2
 8003ec0:	eb1a 0508 	adds.w	r5, sl, r8
 8003ec4:	eb4b 0609 	adc.w	r6, fp, r9
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f04f 0400 	mov.w	r4, #0
 8003eda:	0094      	lsls	r4, r2, #2
 8003edc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee0:	008b      	lsls	r3, r1, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	4631      	mov	r1, r6
 8003eea:	f7fc f9c9 	bl	8000280 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4bb8      	ldr	r3, [pc, #736]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	469b      	mov	fp, r3
 8003f04:	f04f 0c00 	mov.w	ip, #0
 8003f08:	46d9      	mov	r9, fp
 8003f0a:	46e2      	mov	sl, ip
 8003f0c:	eb19 0309 	adds.w	r3, r9, r9
 8003f10:	eb4a 040a 	adc.w	r4, sl, sl
 8003f14:	4699      	mov	r9, r3
 8003f16:	46a2      	mov	sl, r4
 8003f18:	eb19 090b 	adds.w	r9, r9, fp
 8003f1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f34:	4689      	mov	r9, r1
 8003f36:	4692      	mov	sl, r2
 8003f38:	eb1b 0509 	adds.w	r5, fp, r9
 8003f3c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f04f 0400 	mov.w	r4, #0
 8003f52:	0094      	lsls	r4, r2, #2
 8003f54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	4628      	mov	r0, r5
 8003f60:	4631      	mov	r1, r6
 8003f62:	f7fc f98d 	bl	8000280 <__aeabi_uldivmod>
 8003f66:	4603      	mov	r3, r0
 8003f68:	460c      	mov	r4, r1
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2164      	movs	r1, #100	; 0x64
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	3332      	adds	r3, #50	; 0x32
 8003f80:	4a95      	ldr	r2, [pc, #596]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8c:	4498      	add	r8, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	469b      	mov	fp, r3
 8003f92:	f04f 0c00 	mov.w	ip, #0
 8003f96:	46d9      	mov	r9, fp
 8003f98:	46e2      	mov	sl, ip
 8003f9a:	eb19 0309 	adds.w	r3, r9, r9
 8003f9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003fa2:	4699      	mov	r9, r3
 8003fa4:	46a2      	mov	sl, r4
 8003fa6:	eb19 090b 	adds.w	r9, r9, fp
 8003faa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fc2:	4689      	mov	r9, r1
 8003fc4:	4692      	mov	sl, r2
 8003fc6:	eb1b 0509 	adds.w	r5, fp, r9
 8003fca:	eb4c 060a 	adc.w	r6, ip, sl
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f04f 0400 	mov.w	r4, #0
 8003fe0:	0094      	lsls	r4, r2, #2
 8003fe2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fe6:	008b      	lsls	r3, r1, #2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4623      	mov	r3, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	4631      	mov	r1, r6
 8003ff0:	f7fc f946 	bl	8000280 <__aeabi_uldivmod>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b77      	ldr	r3, [pc, #476]	; (80041d8 <UART_SetConfig+0x6f4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4442      	add	r2, r8
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	e0d0      	b.n	80041c6 <UART_SetConfig+0x6e2>
 8004024:	f7fe fae6 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8004028:	60b8      	str	r0, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	469a      	mov	sl, r3
 800402e:	f04f 0b00 	mov.w	fp, #0
 8004032:	46d0      	mov	r8, sl
 8004034:	46d9      	mov	r9, fp
 8004036:	eb18 0308 	adds.w	r3, r8, r8
 800403a:	eb49 0409 	adc.w	r4, r9, r9
 800403e:	4698      	mov	r8, r3
 8004040:	46a1      	mov	r9, r4
 8004042:	eb18 080a 	adds.w	r8, r8, sl
 8004046:	eb49 090b 	adc.w	r9, r9, fp
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004056:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800405a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800405e:	4688      	mov	r8, r1
 8004060:	4691      	mov	r9, r2
 8004062:	eb1a 0508 	adds.w	r5, sl, r8
 8004066:	eb4b 0609 	adc.w	r6, fp, r9
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	0094      	lsls	r4, r2, #2
 800407e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	4628      	mov	r0, r5
 800408a:	4631      	mov	r1, r6
 800408c:	f7fc f8f8 	bl	8000280 <__aeabi_uldivmod>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	461a      	mov	r2, r3
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004098:	fba3 2302 	umull	r2, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	469b      	mov	fp, r3
 80040a6:	f04f 0c00 	mov.w	ip, #0
 80040aa:	46d9      	mov	r9, fp
 80040ac:	46e2      	mov	sl, ip
 80040ae:	eb19 0309 	adds.w	r3, r9, r9
 80040b2:	eb4a 040a 	adc.w	r4, sl, sl
 80040b6:	4699      	mov	r9, r3
 80040b8:	46a2      	mov	sl, r4
 80040ba:	eb19 090b 	adds.w	r9, r9, fp
 80040be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040d6:	4689      	mov	r9, r1
 80040d8:	4692      	mov	sl, r2
 80040da:	eb1b 0509 	adds.w	r5, fp, r9
 80040de:	eb4c 060a 	adc.w	r6, ip, sl
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	f04f 0400 	mov.w	r4, #0
 80040f4:	0094      	lsls	r4, r2, #2
 80040f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	4628      	mov	r0, r5
 8004102:	4631      	mov	r1, r6
 8004104:	f7fc f8bc 	bl	8000280 <__aeabi_uldivmod>
 8004108:	4603      	mov	r3, r0
 800410a:	460c      	mov	r4, r1
 800410c:	461a      	mov	r2, r3
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004110:	fba3 1302 	umull	r1, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2164      	movs	r1, #100	; 0x64
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a2d      	ldr	r2, [pc, #180]	; (80041d8 <UART_SetConfig+0x6f4>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412e:	4498      	add	r8, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	469b      	mov	fp, r3
 8004134:	f04f 0c00 	mov.w	ip, #0
 8004138:	46d9      	mov	r9, fp
 800413a:	46e2      	mov	sl, ip
 800413c:	eb19 0309 	adds.w	r3, r9, r9
 8004140:	eb4a 040a 	adc.w	r4, sl, sl
 8004144:	4699      	mov	r9, r3
 8004146:	46a2      	mov	sl, r4
 8004148:	eb19 090b 	adds.w	r9, r9, fp
 800414c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004164:	4689      	mov	r9, r1
 8004166:	4692      	mov	sl, r2
 8004168:	eb1b 0509 	adds.w	r5, fp, r9
 800416c:	eb4c 060a 	adc.w	r6, ip, sl
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	f04f 0400 	mov.w	r4, #0
 8004182:	0094      	lsls	r4, r2, #2
 8004184:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004188:	008b      	lsls	r3, r1, #2
 800418a:	461a      	mov	r2, r3
 800418c:	4623      	mov	r3, r4
 800418e:	4628      	mov	r0, r5
 8004190:	4631      	mov	r1, r6
 8004192:	f7fc f875 	bl	8000280 <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <UART_SetConfig+0x6f4>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <UART_SetConfig+0x6f4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4442      	add	r2, r8
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e7ff      	b.n	80041c6 <UART_SetConfig+0x6e2>
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d0:	40011000 	.word	0x40011000
 80041d4:	40011400 	.word	0x40011400
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000014 	.word	0x20000014

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0d      	ldr	r6, [pc, #52]	; (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041ee:	1ba4      	subs	r4, r4, r6
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2500      	movs	r5, #0
 80041f4:	42a5      	cmp	r5, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4e0b      	ldr	r6, [pc, #44]	; (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	; (800422c <__libc_init_array+0x44>)
 80041fc:	f000 fc26 	bl	8004a4c <_init>
 8004200:	1ba4      	subs	r4, r4, r6
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2500      	movs	r5, #0
 8004206:	42a5      	cmp	r5, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004210:	4798      	blx	r3
 8004212:	3501      	adds	r5, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421a:	4798      	blx	r3
 800421c:	3501      	adds	r5, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	080053ac 	.word	0x080053ac
 8004224:	080053ac 	.word	0x080053ac
 8004228:	080053ac 	.word	0x080053ac
 800422c:	080053b0 	.word	0x080053b0

08004230 <memset>:
 8004230:	4402      	add	r2, r0
 8004232:	4603      	mov	r3, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <siprintf>:
 8004240:	b40e      	push	{r1, r2, r3}
 8004242:	b500      	push	{lr}
 8004244:	b09c      	sub	sp, #112	; 0x70
 8004246:	ab1d      	add	r3, sp, #116	; 0x74
 8004248:	9002      	str	r0, [sp, #8]
 800424a:	9006      	str	r0, [sp, #24]
 800424c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <siprintf+0x38>)
 8004252:	9107      	str	r1, [sp, #28]
 8004254:	9104      	str	r1, [sp, #16]
 8004256:	4909      	ldr	r1, [pc, #36]	; (800427c <siprintf+0x3c>)
 8004258:	f853 2b04 	ldr.w	r2, [r3], #4
 800425c:	9105      	str	r1, [sp, #20]
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	a902      	add	r1, sp, #8
 8004264:	f000 f866 	bl	8004334 <_svfiprintf_r>
 8004268:	9b02      	ldr	r3, [sp, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	b01c      	add	sp, #112	; 0x70
 8004270:	f85d eb04 	ldr.w	lr, [sp], #4
 8004274:	b003      	add	sp, #12
 8004276:	4770      	bx	lr
 8004278:	20000014 	.word	0x20000014
 800427c:	ffff0208 	.word	0xffff0208

08004280 <__ssputs_r>:
 8004280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004284:	688e      	ldr	r6, [r1, #8]
 8004286:	429e      	cmp	r6, r3
 8004288:	4682      	mov	sl, r0
 800428a:	460c      	mov	r4, r1
 800428c:	4690      	mov	r8, r2
 800428e:	4699      	mov	r9, r3
 8004290:	d837      	bhi.n	8004302 <__ssputs_r+0x82>
 8004292:	898a      	ldrh	r2, [r1, #12]
 8004294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004298:	d031      	beq.n	80042fe <__ssputs_r+0x7e>
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	6909      	ldr	r1, [r1, #16]
 800429e:	1a6f      	subs	r7, r5, r1
 80042a0:	6965      	ldr	r5, [r4, #20]
 80042a2:	2302      	movs	r3, #2
 80042a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80042ac:	f109 0301 	add.w	r3, r9, #1
 80042b0:	443b      	add	r3, r7
 80042b2:	429d      	cmp	r5, r3
 80042b4:	bf38      	it	cc
 80042b6:	461d      	movcc	r5, r3
 80042b8:	0553      	lsls	r3, r2, #21
 80042ba:	d530      	bpl.n	800431e <__ssputs_r+0x9e>
 80042bc:	4629      	mov	r1, r5
 80042be:	f000 fb2b 	bl	8004918 <_malloc_r>
 80042c2:	4606      	mov	r6, r0
 80042c4:	b950      	cbnz	r0, 80042dc <__ssputs_r+0x5c>
 80042c6:	230c      	movs	r3, #12
 80042c8:	f8ca 3000 	str.w	r3, [sl]
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d2:	81a3      	strh	r3, [r4, #12]
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042dc:	463a      	mov	r2, r7
 80042de:	6921      	ldr	r1, [r4, #16]
 80042e0:	f000 faa8 	bl	8004834 <memcpy>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	6126      	str	r6, [r4, #16]
 80042f2:	6165      	str	r5, [r4, #20]
 80042f4:	443e      	add	r6, r7
 80042f6:	1bed      	subs	r5, r5, r7
 80042f8:	6026      	str	r6, [r4, #0]
 80042fa:	60a5      	str	r5, [r4, #8]
 80042fc:	464e      	mov	r6, r9
 80042fe:	454e      	cmp	r6, r9
 8004300:	d900      	bls.n	8004304 <__ssputs_r+0x84>
 8004302:	464e      	mov	r6, r9
 8004304:	4632      	mov	r2, r6
 8004306:	4641      	mov	r1, r8
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	f000 fa9e 	bl	800484a <memmove>
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	60a3      	str	r3, [r4, #8]
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	441e      	add	r6, r3
 8004318:	6026      	str	r6, [r4, #0]
 800431a:	2000      	movs	r0, #0
 800431c:	e7dc      	b.n	80042d8 <__ssputs_r+0x58>
 800431e:	462a      	mov	r2, r5
 8004320:	f000 fb54 	bl	80049cc <_realloc_r>
 8004324:	4606      	mov	r6, r0
 8004326:	2800      	cmp	r0, #0
 8004328:	d1e2      	bne.n	80042f0 <__ssputs_r+0x70>
 800432a:	6921      	ldr	r1, [r4, #16]
 800432c:	4650      	mov	r0, sl
 800432e:	f000 faa5 	bl	800487c <_free_r>
 8004332:	e7c8      	b.n	80042c6 <__ssputs_r+0x46>

08004334 <_svfiprintf_r>:
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	461d      	mov	r5, r3
 800433a:	898b      	ldrh	r3, [r1, #12]
 800433c:	061f      	lsls	r7, r3, #24
 800433e:	b09d      	sub	sp, #116	; 0x74
 8004340:	4680      	mov	r8, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4616      	mov	r6, r2
 8004346:	d50f      	bpl.n	8004368 <_svfiprintf_r+0x34>
 8004348:	690b      	ldr	r3, [r1, #16]
 800434a:	b96b      	cbnz	r3, 8004368 <_svfiprintf_r+0x34>
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	f000 fae3 	bl	8004918 <_malloc_r>
 8004352:	6020      	str	r0, [r4, #0]
 8004354:	6120      	str	r0, [r4, #16]
 8004356:	b928      	cbnz	r0, 8004364 <_svfiprintf_r+0x30>
 8004358:	230c      	movs	r3, #12
 800435a:	f8c8 3000 	str.w	r3, [r8]
 800435e:	f04f 30ff 	mov.w	r0, #4294967295
 8004362:	e0c8      	b.n	80044f6 <_svfiprintf_r+0x1c2>
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	6163      	str	r3, [r4, #20]
 8004368:	2300      	movs	r3, #0
 800436a:	9309      	str	r3, [sp, #36]	; 0x24
 800436c:	2320      	movs	r3, #32
 800436e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004372:	2330      	movs	r3, #48	; 0x30
 8004374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004378:	9503      	str	r5, [sp, #12]
 800437a:	f04f 0b01 	mov.w	fp, #1
 800437e:	4637      	mov	r7, r6
 8004380:	463d      	mov	r5, r7
 8004382:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004386:	b10b      	cbz	r3, 800438c <_svfiprintf_r+0x58>
 8004388:	2b25      	cmp	r3, #37	; 0x25
 800438a:	d13e      	bne.n	800440a <_svfiprintf_r+0xd6>
 800438c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004390:	d00b      	beq.n	80043aa <_svfiprintf_r+0x76>
 8004392:	4653      	mov	r3, sl
 8004394:	4632      	mov	r2, r6
 8004396:	4621      	mov	r1, r4
 8004398:	4640      	mov	r0, r8
 800439a:	f7ff ff71 	bl	8004280 <__ssputs_r>
 800439e:	3001      	adds	r0, #1
 80043a0:	f000 80a4 	beq.w	80044ec <_svfiprintf_r+0x1b8>
 80043a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a6:	4453      	add	r3, sl
 80043a8:	9309      	str	r3, [sp, #36]	; 0x24
 80043aa:	783b      	ldrb	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 809d 	beq.w	80044ec <_svfiprintf_r+0x1b8>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	9307      	str	r3, [sp, #28]
 80043c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043c4:	931a      	str	r3, [sp, #104]	; 0x68
 80043c6:	462f      	mov	r7, r5
 80043c8:	2205      	movs	r2, #5
 80043ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80043ce:	4850      	ldr	r0, [pc, #320]	; (8004510 <_svfiprintf_r+0x1dc>)
 80043d0:	f7fb ff06 	bl	80001e0 <memchr>
 80043d4:	9b04      	ldr	r3, [sp, #16]
 80043d6:	b9d0      	cbnz	r0, 800440e <_svfiprintf_r+0xda>
 80043d8:	06d9      	lsls	r1, r3, #27
 80043da:	bf44      	itt	mi
 80043dc:	2220      	movmi	r2, #32
 80043de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043e2:	071a      	lsls	r2, r3, #28
 80043e4:	bf44      	itt	mi
 80043e6:	222b      	movmi	r2, #43	; 0x2b
 80043e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043ec:	782a      	ldrb	r2, [r5, #0]
 80043ee:	2a2a      	cmp	r2, #42	; 0x2a
 80043f0:	d015      	beq.n	800441e <_svfiprintf_r+0xea>
 80043f2:	9a07      	ldr	r2, [sp, #28]
 80043f4:	462f      	mov	r7, r5
 80043f6:	2000      	movs	r0, #0
 80043f8:	250a      	movs	r5, #10
 80043fa:	4639      	mov	r1, r7
 80043fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004400:	3b30      	subs	r3, #48	; 0x30
 8004402:	2b09      	cmp	r3, #9
 8004404:	d94d      	bls.n	80044a2 <_svfiprintf_r+0x16e>
 8004406:	b1b8      	cbz	r0, 8004438 <_svfiprintf_r+0x104>
 8004408:	e00f      	b.n	800442a <_svfiprintf_r+0xf6>
 800440a:	462f      	mov	r7, r5
 800440c:	e7b8      	b.n	8004380 <_svfiprintf_r+0x4c>
 800440e:	4a40      	ldr	r2, [pc, #256]	; (8004510 <_svfiprintf_r+0x1dc>)
 8004410:	1a80      	subs	r0, r0, r2
 8004412:	fa0b f000 	lsl.w	r0, fp, r0
 8004416:	4318      	orrs	r0, r3
 8004418:	9004      	str	r0, [sp, #16]
 800441a:	463d      	mov	r5, r7
 800441c:	e7d3      	b.n	80043c6 <_svfiprintf_r+0x92>
 800441e:	9a03      	ldr	r2, [sp, #12]
 8004420:	1d11      	adds	r1, r2, #4
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	2a00      	cmp	r2, #0
 8004428:	db01      	blt.n	800442e <_svfiprintf_r+0xfa>
 800442a:	9207      	str	r2, [sp, #28]
 800442c:	e004      	b.n	8004438 <_svfiprintf_r+0x104>
 800442e:	4252      	negs	r2, r2
 8004430:	f043 0302 	orr.w	r3, r3, #2
 8004434:	9207      	str	r2, [sp, #28]
 8004436:	9304      	str	r3, [sp, #16]
 8004438:	783b      	ldrb	r3, [r7, #0]
 800443a:	2b2e      	cmp	r3, #46	; 0x2e
 800443c:	d10c      	bne.n	8004458 <_svfiprintf_r+0x124>
 800443e:	787b      	ldrb	r3, [r7, #1]
 8004440:	2b2a      	cmp	r3, #42	; 0x2a
 8004442:	d133      	bne.n	80044ac <_svfiprintf_r+0x178>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	9203      	str	r2, [sp, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	bfb8      	it	lt
 8004450:	f04f 33ff 	movlt.w	r3, #4294967295
 8004454:	3702      	adds	r7, #2
 8004456:	9305      	str	r3, [sp, #20]
 8004458:	4d2e      	ldr	r5, [pc, #184]	; (8004514 <_svfiprintf_r+0x1e0>)
 800445a:	7839      	ldrb	r1, [r7, #0]
 800445c:	2203      	movs	r2, #3
 800445e:	4628      	mov	r0, r5
 8004460:	f7fb febe 	bl	80001e0 <memchr>
 8004464:	b138      	cbz	r0, 8004476 <_svfiprintf_r+0x142>
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	1b40      	subs	r0, r0, r5
 800446a:	fa03 f000 	lsl.w	r0, r3, r0
 800446e:	9b04      	ldr	r3, [sp, #16]
 8004470:	4303      	orrs	r3, r0
 8004472:	3701      	adds	r7, #1
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	7839      	ldrb	r1, [r7, #0]
 8004478:	4827      	ldr	r0, [pc, #156]	; (8004518 <_svfiprintf_r+0x1e4>)
 800447a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800447e:	2206      	movs	r2, #6
 8004480:	1c7e      	adds	r6, r7, #1
 8004482:	f7fb fead 	bl	80001e0 <memchr>
 8004486:	2800      	cmp	r0, #0
 8004488:	d038      	beq.n	80044fc <_svfiprintf_r+0x1c8>
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <_svfiprintf_r+0x1e8>)
 800448c:	bb13      	cbnz	r3, 80044d4 <_svfiprintf_r+0x1a0>
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	3307      	adds	r3, #7
 8004492:	f023 0307 	bic.w	r3, r3, #7
 8004496:	3308      	adds	r3, #8
 8004498:	9303      	str	r3, [sp, #12]
 800449a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449c:	444b      	add	r3, r9
 800449e:	9309      	str	r3, [sp, #36]	; 0x24
 80044a0:	e76d      	b.n	800437e <_svfiprintf_r+0x4a>
 80044a2:	fb05 3202 	mla	r2, r5, r2, r3
 80044a6:	2001      	movs	r0, #1
 80044a8:	460f      	mov	r7, r1
 80044aa:	e7a6      	b.n	80043fa <_svfiprintf_r+0xc6>
 80044ac:	2300      	movs	r3, #0
 80044ae:	3701      	adds	r7, #1
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	4619      	mov	r1, r3
 80044b4:	250a      	movs	r5, #10
 80044b6:	4638      	mov	r0, r7
 80044b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044bc:	3a30      	subs	r2, #48	; 0x30
 80044be:	2a09      	cmp	r2, #9
 80044c0:	d903      	bls.n	80044ca <_svfiprintf_r+0x196>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0c8      	beq.n	8004458 <_svfiprintf_r+0x124>
 80044c6:	9105      	str	r1, [sp, #20]
 80044c8:	e7c6      	b.n	8004458 <_svfiprintf_r+0x124>
 80044ca:	fb05 2101 	mla	r1, r5, r1, r2
 80044ce:	2301      	movs	r3, #1
 80044d0:	4607      	mov	r7, r0
 80044d2:	e7f0      	b.n	80044b6 <_svfiprintf_r+0x182>
 80044d4:	ab03      	add	r3, sp, #12
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4622      	mov	r2, r4
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <_svfiprintf_r+0x1ec>)
 80044dc:	a904      	add	r1, sp, #16
 80044de:	4640      	mov	r0, r8
 80044e0:	f3af 8000 	nop.w
 80044e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044e8:	4681      	mov	r9, r0
 80044ea:	d1d6      	bne.n	800449a <_svfiprintf_r+0x166>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	065b      	lsls	r3, r3, #25
 80044f0:	f53f af35 	bmi.w	800435e <_svfiprintf_r+0x2a>
 80044f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044f6:	b01d      	add	sp, #116	; 0x74
 80044f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fc:	ab03      	add	r3, sp, #12
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	4622      	mov	r2, r4
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <_svfiprintf_r+0x1ec>)
 8004504:	a904      	add	r1, sp, #16
 8004506:	4640      	mov	r0, r8
 8004508:	f000 f882 	bl	8004610 <_printf_i>
 800450c:	e7ea      	b.n	80044e4 <_svfiprintf_r+0x1b0>
 800450e:	bf00      	nop
 8004510:	08005370 	.word	0x08005370
 8004514:	08005376 	.word	0x08005376
 8004518:	0800537a 	.word	0x0800537a
 800451c:	00000000 	.word	0x00000000
 8004520:	08004281 	.word	0x08004281

08004524 <_printf_common>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	4691      	mov	r9, r2
 800452a:	461f      	mov	r7, r3
 800452c:	688a      	ldr	r2, [r1, #8]
 800452e:	690b      	ldr	r3, [r1, #16]
 8004530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004534:	4293      	cmp	r3, r2
 8004536:	bfb8      	it	lt
 8004538:	4613      	movlt	r3, r2
 800453a:	f8c9 3000 	str.w	r3, [r9]
 800453e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004542:	4606      	mov	r6, r0
 8004544:	460c      	mov	r4, r1
 8004546:	b112      	cbz	r2, 800454e <_printf_common+0x2a>
 8004548:	3301      	adds	r3, #1
 800454a:	f8c9 3000 	str.w	r3, [r9]
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	0699      	lsls	r1, r3, #26
 8004552:	bf42      	ittt	mi
 8004554:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004558:	3302      	addmi	r3, #2
 800455a:	f8c9 3000 	strmi.w	r3, [r9]
 800455e:	6825      	ldr	r5, [r4, #0]
 8004560:	f015 0506 	ands.w	r5, r5, #6
 8004564:	d107      	bne.n	8004576 <_printf_common+0x52>
 8004566:	f104 0a19 	add.w	sl, r4, #25
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	f8d9 2000 	ldr.w	r2, [r9]
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	42ab      	cmp	r3, r5
 8004574:	dc28      	bgt.n	80045c8 <_printf_common+0xa4>
 8004576:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	3300      	adds	r3, #0
 800457e:	bf18      	it	ne
 8004580:	2301      	movne	r3, #1
 8004582:	0692      	lsls	r2, r2, #26
 8004584:	d42d      	bmi.n	80045e2 <_printf_common+0xbe>
 8004586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800458a:	4639      	mov	r1, r7
 800458c:	4630      	mov	r0, r6
 800458e:	47c0      	blx	r8
 8004590:	3001      	adds	r0, #1
 8004592:	d020      	beq.n	80045d6 <_printf_common+0xb2>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	68e5      	ldr	r5, [r4, #12]
 8004598:	f8d9 2000 	ldr.w	r2, [r9]
 800459c:	f003 0306 	and.w	r3, r3, #6
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	bf08      	it	eq
 80045a4:	1aad      	subeq	r5, r5, r2
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	bf0c      	ite	eq
 80045ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b0:	2500      	movne	r5, #0
 80045b2:	4293      	cmp	r3, r2
 80045b4:	bfc4      	itt	gt
 80045b6:	1a9b      	subgt	r3, r3, r2
 80045b8:	18ed      	addgt	r5, r5, r3
 80045ba:	f04f 0900 	mov.w	r9, #0
 80045be:	341a      	adds	r4, #26
 80045c0:	454d      	cmp	r5, r9
 80045c2:	d11a      	bne.n	80045fa <_printf_common+0xd6>
 80045c4:	2000      	movs	r0, #0
 80045c6:	e008      	b.n	80045da <_printf_common+0xb6>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4652      	mov	r2, sl
 80045cc:	4639      	mov	r1, r7
 80045ce:	4630      	mov	r0, r6
 80045d0:	47c0      	blx	r8
 80045d2:	3001      	adds	r0, #1
 80045d4:	d103      	bne.n	80045de <_printf_common+0xba>
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	3501      	adds	r5, #1
 80045e0:	e7c3      	b.n	800456a <_printf_common+0x46>
 80045e2:	18e1      	adds	r1, r4, r3
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	2030      	movs	r0, #48	; 0x30
 80045e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ec:	4422      	add	r2, r4
 80045ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f6:	3302      	adds	r3, #2
 80045f8:	e7c5      	b.n	8004586 <_printf_common+0x62>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4622      	mov	r2, r4
 80045fe:	4639      	mov	r1, r7
 8004600:	4630      	mov	r0, r6
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d0e6      	beq.n	80045d6 <_printf_common+0xb2>
 8004608:	f109 0901 	add.w	r9, r9, #1
 800460c:	e7d8      	b.n	80045c0 <_printf_common+0x9c>
	...

08004610 <_printf_i>:
 8004610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004614:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004618:	460c      	mov	r4, r1
 800461a:	7e09      	ldrb	r1, [r1, #24]
 800461c:	b085      	sub	sp, #20
 800461e:	296e      	cmp	r1, #110	; 0x6e
 8004620:	4617      	mov	r7, r2
 8004622:	4606      	mov	r6, r0
 8004624:	4698      	mov	r8, r3
 8004626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004628:	f000 80b3 	beq.w	8004792 <_printf_i+0x182>
 800462c:	d822      	bhi.n	8004674 <_printf_i+0x64>
 800462e:	2963      	cmp	r1, #99	; 0x63
 8004630:	d036      	beq.n	80046a0 <_printf_i+0x90>
 8004632:	d80a      	bhi.n	800464a <_printf_i+0x3a>
 8004634:	2900      	cmp	r1, #0
 8004636:	f000 80b9 	beq.w	80047ac <_printf_i+0x19c>
 800463a:	2958      	cmp	r1, #88	; 0x58
 800463c:	f000 8083 	beq.w	8004746 <_printf_i+0x136>
 8004640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004644:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004648:	e032      	b.n	80046b0 <_printf_i+0xa0>
 800464a:	2964      	cmp	r1, #100	; 0x64
 800464c:	d001      	beq.n	8004652 <_printf_i+0x42>
 800464e:	2969      	cmp	r1, #105	; 0x69
 8004650:	d1f6      	bne.n	8004640 <_printf_i+0x30>
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	0605      	lsls	r5, r0, #24
 8004658:	f103 0104 	add.w	r1, r3, #4
 800465c:	d52a      	bpl.n	80046b4 <_printf_i+0xa4>
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	da03      	bge.n	800466e <_printf_i+0x5e>
 8004666:	222d      	movs	r2, #45	; 0x2d
 8004668:	425b      	negs	r3, r3
 800466a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800466e:	486f      	ldr	r0, [pc, #444]	; (800482c <_printf_i+0x21c>)
 8004670:	220a      	movs	r2, #10
 8004672:	e039      	b.n	80046e8 <_printf_i+0xd8>
 8004674:	2973      	cmp	r1, #115	; 0x73
 8004676:	f000 809d 	beq.w	80047b4 <_printf_i+0x1a4>
 800467a:	d808      	bhi.n	800468e <_printf_i+0x7e>
 800467c:	296f      	cmp	r1, #111	; 0x6f
 800467e:	d020      	beq.n	80046c2 <_printf_i+0xb2>
 8004680:	2970      	cmp	r1, #112	; 0x70
 8004682:	d1dd      	bne.n	8004640 <_printf_i+0x30>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f043 0320 	orr.w	r3, r3, #32
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	e003      	b.n	8004696 <_printf_i+0x86>
 800468e:	2975      	cmp	r1, #117	; 0x75
 8004690:	d017      	beq.n	80046c2 <_printf_i+0xb2>
 8004692:	2978      	cmp	r1, #120	; 0x78
 8004694:	d1d4      	bne.n	8004640 <_printf_i+0x30>
 8004696:	2378      	movs	r3, #120	; 0x78
 8004698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469c:	4864      	ldr	r0, [pc, #400]	; (8004830 <_printf_i+0x220>)
 800469e:	e055      	b.n	800474c <_printf_i+0x13c>
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	1d19      	adds	r1, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6011      	str	r1, [r2, #0]
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b0:	2301      	movs	r3, #1
 80046b2:	e08c      	b.n	80047ce <_printf_i+0x1be>
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6011      	str	r1, [r2, #0]
 80046b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046bc:	bf18      	it	ne
 80046be:	b21b      	sxthne	r3, r3
 80046c0:	e7cf      	b.n	8004662 <_printf_i+0x52>
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	1d18      	adds	r0, r3, #4
 80046c8:	6010      	str	r0, [r2, #0]
 80046ca:	0628      	lsls	r0, r5, #24
 80046cc:	d501      	bpl.n	80046d2 <_printf_i+0xc2>
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	e002      	b.n	80046d8 <_printf_i+0xc8>
 80046d2:	0668      	lsls	r0, r5, #25
 80046d4:	d5fb      	bpl.n	80046ce <_printf_i+0xbe>
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	4854      	ldr	r0, [pc, #336]	; (800482c <_printf_i+0x21c>)
 80046da:	296f      	cmp	r1, #111	; 0x6f
 80046dc:	bf14      	ite	ne
 80046de:	220a      	movne	r2, #10
 80046e0:	2208      	moveq	r2, #8
 80046e2:	2100      	movs	r1, #0
 80046e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046e8:	6865      	ldr	r5, [r4, #4]
 80046ea:	60a5      	str	r5, [r4, #8]
 80046ec:	2d00      	cmp	r5, #0
 80046ee:	f2c0 8095 	blt.w	800481c <_printf_i+0x20c>
 80046f2:	6821      	ldr	r1, [r4, #0]
 80046f4:	f021 0104 	bic.w	r1, r1, #4
 80046f8:	6021      	str	r1, [r4, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d13d      	bne.n	800477a <_printf_i+0x16a>
 80046fe:	2d00      	cmp	r5, #0
 8004700:	f040 808e 	bne.w	8004820 <_printf_i+0x210>
 8004704:	4665      	mov	r5, ip
 8004706:	2a08      	cmp	r2, #8
 8004708:	d10b      	bne.n	8004722 <_printf_i+0x112>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07db      	lsls	r3, r3, #31
 800470e:	d508      	bpl.n	8004722 <_printf_i+0x112>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	bfde      	ittt	le
 8004718:	2330      	movle	r3, #48	; 0x30
 800471a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800471e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004722:	ebac 0305 	sub.w	r3, ip, r5
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	f8cd 8000 	str.w	r8, [sp]
 800472c:	463b      	mov	r3, r7
 800472e:	aa03      	add	r2, sp, #12
 8004730:	4621      	mov	r1, r4
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff fef6 	bl	8004524 <_printf_common>
 8004738:	3001      	adds	r0, #1
 800473a:	d14d      	bne.n	80047d8 <_printf_i+0x1c8>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	b005      	add	sp, #20
 8004742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004746:	4839      	ldr	r0, [pc, #228]	; (800482c <_printf_i+0x21c>)
 8004748:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	1d1d      	adds	r5, r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6015      	str	r5, [r2, #0]
 8004756:	060a      	lsls	r2, r1, #24
 8004758:	d50b      	bpl.n	8004772 <_printf_i+0x162>
 800475a:	07ca      	lsls	r2, r1, #31
 800475c:	bf44      	itt	mi
 800475e:	f041 0120 	orrmi.w	r1, r1, #32
 8004762:	6021      	strmi	r1, [r4, #0]
 8004764:	b91b      	cbnz	r3, 800476e <_printf_i+0x15e>
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	f022 0220 	bic.w	r2, r2, #32
 800476c:	6022      	str	r2, [r4, #0]
 800476e:	2210      	movs	r2, #16
 8004770:	e7b7      	b.n	80046e2 <_printf_i+0xd2>
 8004772:	064d      	lsls	r5, r1, #25
 8004774:	bf48      	it	mi
 8004776:	b29b      	uxthmi	r3, r3
 8004778:	e7ef      	b.n	800475a <_printf_i+0x14a>
 800477a:	4665      	mov	r5, ip
 800477c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004780:	fb02 3311 	mls	r3, r2, r1, r3
 8004784:	5cc3      	ldrb	r3, [r0, r3]
 8004786:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800478a:	460b      	mov	r3, r1
 800478c:	2900      	cmp	r1, #0
 800478e:	d1f5      	bne.n	800477c <_printf_i+0x16c>
 8004790:	e7b9      	b.n	8004706 <_printf_i+0xf6>
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	6825      	ldr	r5, [r4, #0]
 8004796:	6961      	ldr	r1, [r4, #20]
 8004798:	1d18      	adds	r0, r3, #4
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	0628      	lsls	r0, r5, #24
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	d501      	bpl.n	80047a6 <_printf_i+0x196>
 80047a2:	6019      	str	r1, [r3, #0]
 80047a4:	e002      	b.n	80047ac <_printf_i+0x19c>
 80047a6:	066a      	lsls	r2, r5, #25
 80047a8:	d5fb      	bpl.n	80047a2 <_printf_i+0x192>
 80047aa:	8019      	strh	r1, [r3, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	4665      	mov	r5, ip
 80047b2:	e7b9      	b.n	8004728 <_printf_i+0x118>
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	1d19      	adds	r1, r3, #4
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	681d      	ldr	r5, [r3, #0]
 80047bc:	6862      	ldr	r2, [r4, #4]
 80047be:	2100      	movs	r1, #0
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7fb fd0d 	bl	80001e0 <memchr>
 80047c6:	b108      	cbz	r0, 80047cc <_printf_i+0x1bc>
 80047c8:	1b40      	subs	r0, r0, r5
 80047ca:	6060      	str	r0, [r4, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	2300      	movs	r3, #0
 80047d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d6:	e7a7      	b.n	8004728 <_printf_i+0x118>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	462a      	mov	r2, r5
 80047dc:	4639      	mov	r1, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0aa      	beq.n	800473c <_printf_i+0x12c>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	079b      	lsls	r3, r3, #30
 80047ea:	d413      	bmi.n	8004814 <_printf_i+0x204>
 80047ec:	68e0      	ldr	r0, [r4, #12]
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	4298      	cmp	r0, r3
 80047f2:	bfb8      	it	lt
 80047f4:	4618      	movlt	r0, r3
 80047f6:	e7a3      	b.n	8004740 <_printf_i+0x130>
 80047f8:	2301      	movs	r3, #1
 80047fa:	464a      	mov	r2, r9
 80047fc:	4639      	mov	r1, r7
 80047fe:	4630      	mov	r0, r6
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d09a      	beq.n	800473c <_printf_i+0x12c>
 8004806:	3501      	adds	r5, #1
 8004808:	68e3      	ldr	r3, [r4, #12]
 800480a:	9a03      	ldr	r2, [sp, #12]
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	42ab      	cmp	r3, r5
 8004810:	dcf2      	bgt.n	80047f8 <_printf_i+0x1e8>
 8004812:	e7eb      	b.n	80047ec <_printf_i+0x1dc>
 8004814:	2500      	movs	r5, #0
 8004816:	f104 0919 	add.w	r9, r4, #25
 800481a:	e7f5      	b.n	8004808 <_printf_i+0x1f8>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1ac      	bne.n	800477a <_printf_i+0x16a>
 8004820:	7803      	ldrb	r3, [r0, #0]
 8004822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800482a:	e76c      	b.n	8004706 <_printf_i+0xf6>
 800482c:	08005381 	.word	0x08005381
 8004830:	08005392 	.word	0x08005392

08004834 <memcpy>:
 8004834:	b510      	push	{r4, lr}
 8004836:	1e43      	subs	r3, r0, #1
 8004838:	440a      	add	r2, r1
 800483a:	4291      	cmp	r1, r2
 800483c:	d100      	bne.n	8004840 <memcpy+0xc>
 800483e:	bd10      	pop	{r4, pc}
 8004840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	e7f7      	b.n	800483a <memcpy+0x6>

0800484a <memmove>:
 800484a:	4288      	cmp	r0, r1
 800484c:	b510      	push	{r4, lr}
 800484e:	eb01 0302 	add.w	r3, r1, r2
 8004852:	d807      	bhi.n	8004864 <memmove+0x1a>
 8004854:	1e42      	subs	r2, r0, #1
 8004856:	4299      	cmp	r1, r3
 8004858:	d00a      	beq.n	8004870 <memmove+0x26>
 800485a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004862:	e7f8      	b.n	8004856 <memmove+0xc>
 8004864:	4283      	cmp	r3, r0
 8004866:	d9f5      	bls.n	8004854 <memmove+0xa>
 8004868:	1881      	adds	r1, r0, r2
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	42d3      	cmn	r3, r2
 800486e:	d100      	bne.n	8004872 <memmove+0x28>
 8004870:	bd10      	pop	{r4, pc}
 8004872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004876:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800487a:	e7f7      	b.n	800486c <memmove+0x22>

0800487c <_free_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d045      	beq.n	8004910 <_free_r+0x94>
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f0c      	subs	r4, r1, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	18e4      	addlt	r4, r4, r3
 8004890:	f000 f8d2 	bl	8004a38 <__malloc_lock>
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <_free_r+0x98>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	4610      	mov	r0, r2
 800489a:	b933      	cbnz	r3, 80048aa <_free_r+0x2e>
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	6014      	str	r4, [r2, #0]
 80048a0:	4628      	mov	r0, r5
 80048a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a6:	f000 b8c8 	b.w	8004a3a <__malloc_unlock>
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	d90c      	bls.n	80048c8 <_free_r+0x4c>
 80048ae:	6821      	ldr	r1, [r4, #0]
 80048b0:	1862      	adds	r2, r4, r1
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bf04      	itt	eq
 80048b6:	681a      	ldreq	r2, [r3, #0]
 80048b8:	685b      	ldreq	r3, [r3, #4]
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	bf04      	itt	eq
 80048be:	1852      	addeq	r2, r2, r1
 80048c0:	6022      	streq	r2, [r4, #0]
 80048c2:	6004      	str	r4, [r0, #0]
 80048c4:	e7ec      	b.n	80048a0 <_free_r+0x24>
 80048c6:	4613      	mov	r3, r2
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	b10a      	cbz	r2, 80048d0 <_free_r+0x54>
 80048cc:	42a2      	cmp	r2, r4
 80048ce:	d9fa      	bls.n	80048c6 <_free_r+0x4a>
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	1858      	adds	r0, r3, r1
 80048d4:	42a0      	cmp	r0, r4
 80048d6:	d10b      	bne.n	80048f0 <_free_r+0x74>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	4401      	add	r1, r0
 80048dc:	1858      	adds	r0, r3, r1
 80048de:	4282      	cmp	r2, r0
 80048e0:	6019      	str	r1, [r3, #0]
 80048e2:	d1dd      	bne.n	80048a0 <_free_r+0x24>
 80048e4:	6810      	ldr	r0, [r2, #0]
 80048e6:	6852      	ldr	r2, [r2, #4]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	4401      	add	r1, r0
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	e7d7      	b.n	80048a0 <_free_r+0x24>
 80048f0:	d902      	bls.n	80048f8 <_free_r+0x7c>
 80048f2:	230c      	movs	r3, #12
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	e7d3      	b.n	80048a0 <_free_r+0x24>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428a      	cmp	r2, r1
 80048fe:	bf04      	itt	eq
 8004900:	6811      	ldreq	r1, [r2, #0]
 8004902:	6852      	ldreq	r2, [r2, #4]
 8004904:	6062      	str	r2, [r4, #4]
 8004906:	bf04      	itt	eq
 8004908:	1809      	addeq	r1, r1, r0
 800490a:	6021      	streq	r1, [r4, #0]
 800490c:	605c      	str	r4, [r3, #4]
 800490e:	e7c7      	b.n	80048a0 <_free_r+0x24>
 8004910:	bd38      	pop	{r3, r4, r5, pc}
 8004912:	bf00      	nop
 8004914:	200000a4 	.word	0x200000a4

08004918 <_malloc_r>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	1ccd      	adds	r5, r1, #3
 800491c:	f025 0503 	bic.w	r5, r5, #3
 8004920:	3508      	adds	r5, #8
 8004922:	2d0c      	cmp	r5, #12
 8004924:	bf38      	it	cc
 8004926:	250c      	movcc	r5, #12
 8004928:	2d00      	cmp	r5, #0
 800492a:	4606      	mov	r6, r0
 800492c:	db01      	blt.n	8004932 <_malloc_r+0x1a>
 800492e:	42a9      	cmp	r1, r5
 8004930:	d903      	bls.n	800493a <_malloc_r+0x22>
 8004932:	230c      	movs	r3, #12
 8004934:	6033      	str	r3, [r6, #0]
 8004936:	2000      	movs	r0, #0
 8004938:	bd70      	pop	{r4, r5, r6, pc}
 800493a:	f000 f87d 	bl	8004a38 <__malloc_lock>
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <_malloc_r+0xac>)
 8004940:	6814      	ldr	r4, [r2, #0]
 8004942:	4621      	mov	r1, r4
 8004944:	b991      	cbnz	r1, 800496c <_malloc_r+0x54>
 8004946:	4c20      	ldr	r4, [pc, #128]	; (80049c8 <_malloc_r+0xb0>)
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	b91b      	cbnz	r3, 8004954 <_malloc_r+0x3c>
 800494c:	4630      	mov	r0, r6
 800494e:	f000 f863 	bl	8004a18 <_sbrk_r>
 8004952:	6020      	str	r0, [r4, #0]
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f85e 	bl	8004a18 <_sbrk_r>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d124      	bne.n	80049aa <_malloc_r+0x92>
 8004960:	230c      	movs	r3, #12
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	4630      	mov	r0, r6
 8004966:	f000 f868 	bl	8004a3a <__malloc_unlock>
 800496a:	e7e4      	b.n	8004936 <_malloc_r+0x1e>
 800496c:	680b      	ldr	r3, [r1, #0]
 800496e:	1b5b      	subs	r3, r3, r5
 8004970:	d418      	bmi.n	80049a4 <_malloc_r+0x8c>
 8004972:	2b0b      	cmp	r3, #11
 8004974:	d90f      	bls.n	8004996 <_malloc_r+0x7e>
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	50cd      	str	r5, [r1, r3]
 800497a:	18cc      	adds	r4, r1, r3
 800497c:	4630      	mov	r0, r6
 800497e:	f000 f85c 	bl	8004a3a <__malloc_unlock>
 8004982:	f104 000b 	add.w	r0, r4, #11
 8004986:	1d23      	adds	r3, r4, #4
 8004988:	f020 0007 	bic.w	r0, r0, #7
 800498c:	1ac3      	subs	r3, r0, r3
 800498e:	d0d3      	beq.n	8004938 <_malloc_r+0x20>
 8004990:	425a      	negs	r2, r3
 8004992:	50e2      	str	r2, [r4, r3]
 8004994:	e7d0      	b.n	8004938 <_malloc_r+0x20>
 8004996:	428c      	cmp	r4, r1
 8004998:	684b      	ldr	r3, [r1, #4]
 800499a:	bf16      	itet	ne
 800499c:	6063      	strne	r3, [r4, #4]
 800499e:	6013      	streq	r3, [r2, #0]
 80049a0:	460c      	movne	r4, r1
 80049a2:	e7eb      	b.n	800497c <_malloc_r+0x64>
 80049a4:	460c      	mov	r4, r1
 80049a6:	6849      	ldr	r1, [r1, #4]
 80049a8:	e7cc      	b.n	8004944 <_malloc_r+0x2c>
 80049aa:	1cc4      	adds	r4, r0, #3
 80049ac:	f024 0403 	bic.w	r4, r4, #3
 80049b0:	42a0      	cmp	r0, r4
 80049b2:	d005      	beq.n	80049c0 <_malloc_r+0xa8>
 80049b4:	1a21      	subs	r1, r4, r0
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f82e 	bl	8004a18 <_sbrk_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	d0cf      	beq.n	8004960 <_malloc_r+0x48>
 80049c0:	6025      	str	r5, [r4, #0]
 80049c2:	e7db      	b.n	800497c <_malloc_r+0x64>
 80049c4:	200000a4 	.word	0x200000a4
 80049c8:	200000a8 	.word	0x200000a8

080049cc <_realloc_r>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	4607      	mov	r7, r0
 80049d0:	4614      	mov	r4, r2
 80049d2:	460e      	mov	r6, r1
 80049d4:	b921      	cbnz	r1, 80049e0 <_realloc_r+0x14>
 80049d6:	4611      	mov	r1, r2
 80049d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049dc:	f7ff bf9c 	b.w	8004918 <_malloc_r>
 80049e0:	b922      	cbnz	r2, 80049ec <_realloc_r+0x20>
 80049e2:	f7ff ff4b 	bl	800487c <_free_r>
 80049e6:	4625      	mov	r5, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ec:	f000 f826 	bl	8004a3c <_malloc_usable_size_r>
 80049f0:	42a0      	cmp	r0, r4
 80049f2:	d20f      	bcs.n	8004a14 <_realloc_r+0x48>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff ff8e 	bl	8004918 <_malloc_r>
 80049fc:	4605      	mov	r5, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d0f2      	beq.n	80049e8 <_realloc_r+0x1c>
 8004a02:	4631      	mov	r1, r6
 8004a04:	4622      	mov	r2, r4
 8004a06:	f7ff ff15 	bl	8004834 <memcpy>
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ff35 	bl	800487c <_free_r>
 8004a12:	e7e9      	b.n	80049e8 <_realloc_r+0x1c>
 8004a14:	4635      	mov	r5, r6
 8004a16:	e7e7      	b.n	80049e8 <_realloc_r+0x1c>

08004a18 <_sbrk_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4c06      	ldr	r4, [pc, #24]	; (8004a34 <_sbrk_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4605      	mov	r5, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	f7fc fe02 	bl	800162c <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_sbrk_r+0x1a>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_sbrk_r+0x1a>
 8004a30:	602b      	str	r3, [r5, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	200001d4 	.word	0x200001d4

08004a38 <__malloc_lock>:
 8004a38:	4770      	bx	lr

08004a3a <__malloc_unlock>:
 8004a3a:	4770      	bx	lr

08004a3c <_malloc_usable_size_r>:
 8004a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a40:	1f18      	subs	r0, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfbc      	itt	lt
 8004a46:	580b      	ldrlt	r3, [r1, r0]
 8004a48:	18c0      	addlt	r0, r0, r3
 8004a4a:	4770      	bx	lr

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
